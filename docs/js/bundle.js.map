{
  "version": 3,
  "sources": ["../../node_modules/fabric/src/config.ts", "../../node_modules/fabric/src/util/internals/console.ts", "../../node_modules/fabric/src/filters/GLProbes/GLProbe.ts", "../../node_modules/fabric/src/filters/GLProbes/WebGLProbe.ts", "../../node_modules/fabric/src/env/browser.ts", "../../node_modules/fabric/src/env/index.ts", "../../node_modules/fabric/src/cache.ts", "../../node_modules/fabric/src/constants.ts", "../../node_modules/fabric/src/ClassRegistry.ts", "../../node_modules/fabric/src/util/animation/AnimationRegistry.ts", "../../node_modules/fabric/src/Observable.ts", "../../node_modules/fabric/src/util/internals/removeFromArray.ts", "../../node_modules/fabric/src/util/misc/cos.ts", "../../node_modules/fabric/src/util/misc/sin.ts", "../../node_modules/fabric/src/Point.ts", "../../node_modules/fabric/src/Collection.ts", "../../node_modules/fabric/src/CommonMethods.ts", "../../node_modules/fabric/src/util/animation/AnimationFrameProvider.ts", "../../node_modules/fabric/src/util/internals/uid.ts", "../../node_modules/fabric/src/util/misc/dom.ts", "../../node_modules/fabric/src/util/misc/radiansDegreesConversion.ts", "../../node_modules/fabric/src/util/misc/matrix.ts", "../../node_modules/fabric/src/util/misc/objectEnlive.ts", "../../node_modules/fabric/src/util/misc/pick.ts", "../../node_modules/fabric/src/util/misc/toFixed.ts", "../../node_modules/fabric/src/util/misc/svgExport.ts", "../../node_modules/fabric/src/util/typeAssertions.ts", "../../node_modules/fabric/src/util/dom_misc.ts", "../../node_modules/fabric/src/canvas/DOMManagers/util.ts", "../../node_modules/fabric/src/canvas/DOMManagers/StaticCanvasDOMManager.ts", "../../node_modules/fabric/src/canvas/StaticCanvasOptions.ts", "../../node_modules/fabric/src/canvas/StaticCanvas.ts", "../../node_modules/fabric/src/util/dom_event.ts", "../../node_modules/fabric/src/util/misc/boundingBoxFromPoints.ts", "../../node_modules/fabric/src/util/misc/objectTransforms.ts", "../../node_modules/fabric/src/util/misc/planeChange.ts", "../../node_modules/fabric/src/controls/fireEvent.ts", "../../node_modules/fabric/src/util/misc/resolveOrigin.ts", "../../node_modules/fabric/src/controls/util.ts", "../../node_modules/fabric/src/controls/drag.ts", "../../node_modules/fabric/src/color/color_map.ts", "../../node_modules/fabric/src/color/util.ts", "../../node_modules/fabric/src/color/Color.ts", "../../node_modules/fabric/src/color/constants.ts", "../../node_modules/fabric/src/util/misc/svgParsing.ts", "../../node_modules/fabric/src/shapes/Object/FabricObjectSVGExportMixin.ts", "../../node_modules/fabric/src/parser/getSvgRegex.ts", "../../node_modules/fabric/src/parser/constants.ts", "../../node_modules/fabric/src/util/misc/vectors.ts", "../../node_modules/fabric/src/Shadow.ts", "../../node_modules/fabric/src/util/misc/capValue.ts", "../../node_modules/fabric/src/shapes/Object/defaultValues.ts", "../../node_modules/fabric/src/util/animation/easing.ts", "../../node_modules/fabric/src/util/animation/AnimationBase.ts", "../../node_modules/fabric/src/util/animation/ValueAnimation.ts", "../../node_modules/fabric/src/util/animation/ArrayAnimation.ts", "../../node_modules/fabric/src/util/animation/ColorAnimation.ts", "../../node_modules/fabric/src/util/animation/animate.ts", "../../node_modules/fabric/src/Intersection.ts", "../../node_modules/fabric/src/shapes/Object/ObjectGeometry.ts", "../../node_modules/fabric/src/shapes/Object/Object.ts", "../../node_modules/fabric/src/controls/wrapWithFireEvent.ts", "../../node_modules/fabric/src/controls/wrapWithFixedAnchor.ts", "../../node_modules/fabric/src/controls/changeWidth.ts", "../../node_modules/fabric/src/controls/controlRendering.ts", "../../node_modules/fabric/src/controls/Control.ts", "../../node_modules/fabric/src/controls/rotate.ts", "../../node_modules/fabric/src/controls/scale.ts", "../../node_modules/fabric/src/controls/skew.ts", "../../node_modules/fabric/src/controls/scaleSkew.ts", "../../node_modules/fabric/src/controls/commonControls.ts", "../../node_modules/fabric/src/shapes/Object/InteractiveObject.ts", "../../node_modules/fabric/src/util/applyMixins.ts", "../../node_modules/fabric/src/shapes/Object/FabricObject.ts", "../../node_modules/fabric/src/util/misc/isTransparent.ts", "../../node_modules/fabric/src/util/misc/projectStroke/StrokeProjectionsBase.ts", "../../node_modules/fabric/src/util/misc/projectStroke/StrokeLineJoinProjections.ts", "../../node_modules/fabric/src/util/misc/projectStroke/StrokeLineCapProjections.ts", "../../node_modules/fabric/src/util/misc/projectStroke/index.ts", "../../node_modules/fabric/src/util/internals/findRight.ts", "../../node_modules/fabric/src/util/internals/cloneStyles.ts", "../../node_modules/fabric/src/util/lang_string.ts", "../../node_modules/fabric/src/util/misc/textStyles.ts", "../../node_modules/fabric/src/parser/attributes.ts", "../../node_modules/fabric/src/parser/selectorMatches.ts", "../../node_modules/fabric/src/parser/elementMatchesRule.ts", "../../node_modules/fabric/src/parser/doesSomeParentMatch.ts", "../../node_modules/fabric/src/parser/normalizeAttr.ts", "../../node_modules/fabric/src/util/internals/cleanupSvgAttribute.ts", "../../node_modules/fabric/src/parser/parseTransformAttribute.ts", "../../node_modules/fabric/src/parser/normalizeValue.ts", "../../node_modules/fabric/src/parser/parseFontDeclaration.ts", "../../node_modules/fabric/src/parser/parseStyleString.ts", "../../node_modules/fabric/src/parser/parseStyleAttribute.ts", "../../node_modules/fabric/src/parser/parseStyleObject.ts", "../../node_modules/fabric/src/parser/setStrokeFillOpacity.ts", "../../node_modules/fabric/src/parser/parseAttributes.ts", "../../node_modules/fabric/src/parser/getGlobalStylesForElement.ts", "../../node_modules/fabric/src/shapes/Rect.ts", "../../node_modules/fabric/src/LayoutManager/constants.ts", "../../node_modules/fabric/src/LayoutManager/LayoutStrategies/utils.ts", "../../node_modules/fabric/src/LayoutManager/LayoutStrategies/LayoutStrategy.ts", "../../node_modules/fabric/src/LayoutManager/LayoutStrategies/FitContentLayout.ts", "../../node_modules/fabric/src/LayoutManager/LayoutManager.ts", "../../node_modules/fabric/src/shapes/Group.ts", "../../node_modules/fabric/src/util/misc/groupSVGElements.ts", "../../node_modules/fabric/src/util/misc/findScaleTo.ts", "../../node_modules/fabric/src/util/path/regex.ts", "../../node_modules/fabric/src/util/path/index.ts", "../../node_modules/fabric/src/util/dom_style.ts", "../../node_modules/fabric/src/util/misc/mergeClipPaths.ts", "../../node_modules/fabric/src/util/internals/getRandomInt.ts", "../../node_modules/fabric/src/util/internals/dom_request.ts", "../../node_modules/fabric/src/util/transform_matrix_removal.ts", "../../node_modules/fabric/src/util/misc/rotatePoint.ts", "../../node_modules/fabric/src/canvas/DOMManagers/CanvasDOMManager.ts", "../../node_modules/fabric/src/canvas/SelectableCanvas.ts", "../../node_modules/fabric/src/canvas/CanvasOptions.ts", "../../node_modules/fabric/src/canvas/TextEditingManager.ts", "../../node_modules/fabric/src/canvas/Canvas.ts", "../../node_modules/fabric/src/gradient/constants.ts", "../../node_modules/fabric/src/util/internals/ifNaN.ts", "../../node_modules/fabric/src/parser/percent.ts", "../../node_modules/fabric/src/gradient/parser/parseColorStops.ts", "../../node_modules/fabric/src/gradient/parser/misc.ts", "../../node_modules/fabric/src/gradient/parser/parseCoords.ts", "../../node_modules/fabric/src/gradient/Gradient.ts", "../../node_modules/fabric/src/Pattern/Pattern.ts", "../../node_modules/fabric/src/brushes/BaseBrush.ts", "../../node_modules/fabric/src/shapes/Path.ts", "../../node_modules/fabric/src/brushes/PencilBrush.ts", "../../node_modules/fabric/src/shapes/Circle.ts", "../../node_modules/fabric/src/brushes/CircleBrush.ts", "../../node_modules/fabric/src/brushes/SprayBrush.ts", "../../node_modules/fabric/src/brushes/PatternBrush.ts", "../../node_modules/fabric/src/shapes/Line.ts", "../../node_modules/fabric/src/shapes/Triangle.ts", "../../node_modules/fabric/src/shapes/Ellipse.ts", "../../node_modules/fabric/src/parser/parsePointsAttribute.ts", "../../node_modules/fabric/src/shapes/Polyline.ts", "../../node_modules/fabric/src/shapes/Polygon.ts", "../../node_modules/fabric/src/shapes/Text/constants.ts", "../../node_modules/fabric/src/shapes/Text/StyledText.ts", "../../node_modules/fabric/src/shapes/Text/TextSVGExportMixin.ts", "../../node_modules/fabric/src/shapes/Text/Text.ts", "../../node_modules/fabric/src/shapes/IText/DraggableTextDelegate.ts", "../../node_modules/fabric/src/shapes/IText/ITextBehavior.ts", "../../node_modules/fabric/src/shapes/IText/ITextKeyBehavior.ts", "../../node_modules/fabric/src/shapes/IText/ITextClickBehavior.ts", "../../node_modules/fabric/src/shapes/IText/constants.ts", "../../node_modules/fabric/src/util/internals/applyCanvasTransform.ts", "../../node_modules/fabric/src/shapes/IText/IText.ts", "../../node_modules/fabric/src/shapes/Textbox.ts", "../../node_modules/fabric/src/LayoutManager/LayoutStrategies/ClipPathLayout.ts", "../../node_modules/fabric/src/LayoutManager/LayoutStrategies/FixedLayout.ts", "../../node_modules/fabric/src/LayoutManager/ActiveSelectionLayoutManager.ts", "../../node_modules/fabric/src/shapes/ActiveSelection.ts", "../../node_modules/fabric/src/filters/Canvas2dFilterBackend.ts", "../../node_modules/fabric/src/filters/WebGLFilterBackend.ts", "../../node_modules/fabric/src/filters/FilterBackend.ts", "../../node_modules/fabric/src/shapes/Image.ts", "../../node_modules/fabric/src/parser/applyViewboxTransform.ts", "../../node_modules/fabric/src/parser/getTagName.ts", "../../node_modules/fabric/src/parser/hasInvalidAncestor.ts", "../../node_modules/fabric/src/parser/getMultipleNodes.ts", "../../node_modules/fabric/src/parser/recursivelyParseGradientsXlink.ts", "../../node_modules/fabric/src/parser/getGradientDefs.ts", "../../node_modules/fabric/src/parser/getCSSRules.ts", "../../node_modules/fabric/src/parser/elements_parser.ts", "../../node_modules/fabric/src/parser/parseSVGDocument.ts", "../../node_modules/fabric/src/parser/parseUseDirectives.ts", "../../node_modules/fabric/src/parser/loadSVGFromString.ts", "../../node_modules/fabric/src/parser/loadSVGFromURL.ts", "../../node_modules/fabric/src/controls/polyControl.ts", "../../node_modules/fabric/src/controls/pathControl.ts", "../../node_modules/fabric/src/filters/utils.ts", "../../node_modules/fabric/src/filters/shaders/baseFilter.ts", "../../node_modules/fabric/src/filters/BaseFilter.ts", "../../node_modules/fabric/src/filters/shaders/blendColor.ts", "../../node_modules/fabric/src/filters/BlendColor.ts", "../../node_modules/fabric/src/filters/shaders/blendImage.ts", "../../node_modules/fabric/src/filters/BlendImage.ts", "../../node_modules/fabric/src/filters/Blur.ts", "../../node_modules/fabric/src/filters/shaders/blur.ts", "../../node_modules/fabric/src/filters/Brightness.ts", "../../node_modules/fabric/src/filters/shaders/brightness.ts", "../../node_modules/fabric/src/filters/shaders/colorMatrix.ts", "../../node_modules/fabric/src/filters/ColorMatrix.ts", "../../node_modules/fabric/src/filters/ColorMatrixFilters.ts", "../../node_modules/fabric/src/filters/Composed.ts", "../../node_modules/fabric/src/filters/Contrast.ts", "../../node_modules/fabric/src/filters/shaders/constrast.ts", "../../node_modules/fabric/src/filters/shaders/convolute.ts", "../../node_modules/fabric/src/filters/Convolute.ts", "../../node_modules/fabric/src/filters/shaders/gamma.ts", "../../node_modules/fabric/src/filters/Gamma.ts", "../../node_modules/fabric/src/filters/shaders/grayscale.ts", "../../node_modules/fabric/src/filters/Grayscale.ts", "../../node_modules/fabric/src/filters/HueRotation.ts", "../../node_modules/fabric/src/filters/Invert.ts", "../../node_modules/fabric/src/filters/shaders/invert.ts", "../../node_modules/fabric/src/filters/Noise.ts", "../../node_modules/fabric/src/filters/shaders/noise.ts", "../../node_modules/fabric/src/filters/Pixelate.ts", "../../node_modules/fabric/src/filters/shaders/pixelate.ts", "../../node_modules/fabric/src/filters/RemoveColor.ts", "../../node_modules/fabric/src/filters/shaders/removeColor.ts", "../../node_modules/fabric/src/filters/Resize.ts", "../../node_modules/fabric/src/filters/Saturation.ts", "../../node_modules/fabric/src/filters/shaders/saturation.ts", "../../node_modules/fabric/src/filters/Vibrance.ts", "../../node_modules/fabric/src/filters/shaders/vibrance.ts", "../../node_modules/axios/lib/helpers/bind.js", "../../node_modules/axios/lib/utils.js", "../../node_modules/axios/lib/core/AxiosError.js", "../../node_modules/axios/lib/helpers/null.js", "../../node_modules/axios/lib/helpers/toFormData.js", "../../node_modules/axios/lib/helpers/AxiosURLSearchParams.js", "../../node_modules/axios/lib/helpers/buildURL.js", "../../node_modules/axios/lib/core/InterceptorManager.js", "../../node_modules/axios/lib/defaults/transitional.js", "../../node_modules/axios/lib/platform/browser/classes/URLSearchParams.js", "../../node_modules/axios/lib/platform/browser/classes/FormData.js", "../../node_modules/axios/lib/platform/browser/classes/Blob.js", "../../node_modules/axios/lib/platform/browser/index.js", "../../node_modules/axios/lib/platform/common/utils.js", "../../node_modules/axios/lib/platform/index.js", "../../node_modules/axios/lib/helpers/toURLEncodedForm.js", "../../node_modules/axios/lib/helpers/formDataToJSON.js", "../../node_modules/axios/lib/defaults/index.js", "../../node_modules/axios/lib/helpers/parseHeaders.js", "../../node_modules/axios/lib/core/AxiosHeaders.js", "../../node_modules/axios/lib/core/transformData.js", "../../node_modules/axios/lib/cancel/isCancel.js", "../../node_modules/axios/lib/cancel/CanceledError.js", "../../node_modules/axios/lib/core/settle.js", "../../node_modules/axios/lib/helpers/parseProtocol.js", "../../node_modules/axios/lib/helpers/speedometer.js", "../../node_modules/axios/lib/helpers/throttle.js", "../../node_modules/axios/lib/helpers/progressEventReducer.js", "../../node_modules/axios/lib/helpers/isURLSameOrigin.js", "../../node_modules/axios/lib/helpers/cookies.js", "../../node_modules/axios/lib/helpers/isAbsoluteURL.js", "../../node_modules/axios/lib/helpers/combineURLs.js", "../../node_modules/axios/lib/core/buildFullPath.js", "../../node_modules/axios/lib/core/mergeConfig.js", "../../node_modules/axios/lib/helpers/resolveConfig.js", "../../node_modules/axios/lib/adapters/xhr.js", "../../node_modules/axios/lib/helpers/composeSignals.js", "../../node_modules/axios/lib/helpers/trackStream.js", "../../node_modules/axios/lib/adapters/fetch.js", "../../node_modules/axios/lib/adapters/adapters.js", "../../node_modules/axios/lib/core/dispatchRequest.js", "../../node_modules/axios/lib/env/data.js", "../../node_modules/axios/lib/helpers/validator.js", "../../node_modules/axios/lib/core/Axios.js", "../../node_modules/axios/lib/cancel/CancelToken.js", "../../node_modules/axios/lib/helpers/spread.js", "../../node_modules/axios/lib/helpers/isAxiosError.js", "../../node_modules/axios/lib/helpers/HttpStatusCode.js", "../../node_modules/axios/lib/axios.js", "../../node_modules/axios/index.js", "../../src/app.ts"],
  "sourcesContent": ["export type TConfiguration = Partial<BaseConfiguration>;\n\nclass BaseConfiguration {\n  /**\n   * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\n   * which is unitless and not rendered equally across browsers.\n   *\n   * Values that work quite well (as of October 2017) are:\n   * - Chrome: 1.5\n   * - Edge: 1.75\n   * - Firefox: 0.9\n   * - Safari: 0.95\n   *\n   * @since 2.0.0\n   * @type Number\n   * @default 1\n   */\n  browserShadowBlurConstant = 1;\n\n  /**\n   * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\n   */\n  DPI = 96;\n\n  /**\n   * Device Pixel Ratio\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n   */\n  devicePixelRatio =\n    typeof window !== 'undefined' ? window.devicePixelRatio : 1; // eslint-disable-line no-restricted-globals\n\n  /**\n   * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  perfLimitSizeTotal = 2097152;\n\n  /**\n   * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  maxCacheSideLimit = 4096;\n\n  /**\n   * Lowest pixel limit for cache canvases, set at 256PX\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  minCacheSideLimit = 256;\n\n  /**\n   * When 'true', style information is not retained when copy/pasting text, making\n   * pasted text use destination style.\n   * Defaults to 'false'.\n   * @type Boolean\n   * @default\n   * @deprecated\n   */\n  disableStyleCopyPaste = false;\n\n  /**\n   * Enable webgl for filtering picture is available\n   * A filtering backend will be initialized, this will both take memory and\n   * time since a default 2048x2048 canvas will be created for the gl context\n   * @since 2.0.0\n   * @type Boolean\n   * @default\n   */\n  enableGLFiltering = true;\n\n  /**\n   * if webgl is enabled and available, textureSize will determine the size\n   * of the canvas backend\n   *\n   * In order to support old hardware set to `2048` to avoid OOM\n   *\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  textureSize = 4096;\n\n  /**\n   * Skip performance testing of setupGLContext and force the use of putImageData that seems to be the one that works best on\n   * Chrome + old hardware. if your users are experiencing empty images after filtering you may try to force this to true\n   * this has to be set before instantiating the filtering backend ( before filtering the first image )\n   * @type Boolean\n   * @default false\n   */\n  forceGLPutImageData = false;\n\n  /**\n   * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\n   * With the standard behaviour of fabric to translate all curves in absolute commands and by not subtracting the starting point from\n   * the curve is very hard to hit any cache.\n   * Enable only if you know why it could be useful.\n   * Candidate for removal/simplification\n   * @default false\n   */\n  cachesBoundsOfCurve = false;\n\n  /**\n   * Map of font files\n   * Map<fontFamily, pathToFile> of font files\n   */\n  fontPaths: Record</** fontFamily */ string, /** pathToFile */ string> = {};\n\n  /**\n   * Defines the number of fraction digits to use when serializing object values.\n   * Used in exporting methods (`toObject`, `toJSON`, `toSVG`)\n   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\n   */\n  NUM_FRACTION_DIGITS = 4;\n}\n\nexport class Configuration extends BaseConfiguration {\n  constructor(config?: TConfiguration) {\n    super();\n    this.configure(config);\n  }\n\n  configure(config: TConfiguration = {}) {\n    Object.assign(this, config);\n  }\n\n  /**\n   * Map<fontFamily, pathToFile> of font files\n   */\n  addFonts(\n    paths: Record</** fontFamily */ string, /** pathToFile */ string> = {},\n  ) {\n    this.fontPaths = {\n      ...this.fontPaths,\n      ...paths,\n    };\n  }\n\n  removeFonts(fontFamilys: string[] = []) {\n    fontFamilys.forEach((fontFamily) => {\n      delete this.fontPaths[fontFamily];\n    });\n  }\n\n  clearFonts() {\n    this.fontPaths = {};\n  }\n\n  restoreDefaults<T extends BaseConfiguration>(keys?: (keyof T)[]) {\n    const defaults = new BaseConfiguration() as T;\n    const config =\n      keys?.reduce((acc, key) => {\n        acc[key] = defaults[key];\n        return acc;\n      }, {} as T) || defaults;\n    this.configure(config);\n  }\n}\n\nexport const config = new Configuration();\n", "export const log = (\n  severity: 'log' | 'warn' | 'error',\n  ...optionalParams: any[]\n) =>\n  // eslint-disable-next-line no-restricted-syntax\n  console[severity]('fabric', ...optionalParams);\n\nexport class FabricError extends Error {\n  constructor(message?: string, options?: ErrorOptions) {\n    super(`fabric: ${message}`, options);\n  }\n}\n\nexport class SignalAbortedError extends FabricError {\n  constructor(context: string) {\n    super(`${context} 'options.signal' is in 'aborted' state`);\n  }\n}\n", "export type GLPrecision = 'lowp' | 'mediump' | 'highp';\n\nexport abstract class GLProbe {\n  declare GLPrecision: GLPrecision | undefined;\n  abstract queryWebGL(canvas: HTMLCanvasElement): void;\n  abstract isSupported(textureSize: number): boolean;\n}\n", "import { log } from '../../util/internals/console';\nimport { GLProbe } from './GLProbe';\nimport type { GLPrecision } from './GLProbe';\n\n/**\n * Lazy initialize WebGL constants\n */\nexport class WebGLProbe extends GLProbe {\n  declare maxTextureSize?: number;\n\n  /**\n   * Tests if webgl supports certain precision\n   * @param {WebGL} Canvas WebGL context to test on\n   * @param {GLPrecision} Precision to test can be any of following\n   * @returns {Boolean} Whether the user's browser WebGL supports given precision.\n   */\n  private testPrecision(\n    gl: WebGLRenderingContext,\n    precision: GLPrecision,\n  ): boolean {\n    const fragmentSource = `precision ${precision} float;\\nvoid main(){}`;\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    if (!fragmentShader) {\n      return false;\n    }\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    return !!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS);\n  }\n\n  /**\n   * query browser for WebGL\n   */\n  queryWebGL(canvas: HTMLCanvasElement) {\n    const gl = canvas.getContext('webgl');\n    if (gl) {\n      this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n      this.GLPrecision = (['highp', 'mediump', 'lowp'] as const).find(\n        (precision) => this.testPrecision(gl, precision),\n      );\n      gl.getExtension('WEBGL_lose_context')!.loseContext();\n      log('log', `WebGL: max texture size ${this.maxTextureSize}`);\n    }\n  }\n\n  isSupported(textureSize: number) {\n    return !!this.maxTextureSize && this.maxTextureSize >= textureSize;\n  }\n}\n", "/* eslint-disable no-restricted-globals */\nimport { WebGLProbe } from '../filters/GLProbes/WebGLProbe';\nimport type { TCopyPasteData, TFabricEnv } from './types';\n\nconst copyPasteData: TCopyPasteData = {};\n\nexport const getEnv = (): TFabricEnv => {\n  return {\n    document,\n    window,\n    isTouchSupported:\n      'ontouchstart' in window ||\n      'ontouchstart' in document ||\n      (window && window.navigator && window.navigator.maxTouchPoints > 0),\n    WebGLProbe: new WebGLProbe(),\n    dispose() {\n      // noop\n    },\n    copyPasteData,\n  };\n};\n", "/**\n * This file is consumed by fabric.\n * The `./node` and `./browser` files define the env variable that is used by this module.\n * The `./browser` module is defined to be the default env and doesn't set the env at all.\n * This is done in order to support isomorphic usage for browser and node applications\n * since window and document aren't defined at time of import in SSR, we can't set env so we avoid it by deferring to the default env.\n */\n\nimport { config } from '../config';\nimport { getEnv as getBrowserEnv } from './browser';\nimport type { TFabricEnv } from './types';\nimport type { DOMWindow } from 'jsdom';\n\nlet env: TFabricEnv;\n\n/**\n * Sets the environment variables used by fabric.\\\n * This is exposed for special cases, such as configuring a test environment, and should be used with care.\n *\n * **CAUTION**: Must be called before using the package.\n *\n * @example\n * <caption>Passing `window` and `document` objects to fabric (in case they are mocked or something)</caption>\n * import { getEnv, setEnv } from 'fabric';\n * // we want fabric to use the `window` and `document` objects exposed by the environment we are running in.\n * setEnv({ ...getEnv(), window, document });\n * // done with setup, using fabric is now safe\n */\nexport const setEnv = (value: TFabricEnv) => {\n  env = value;\n};\n\n/**\n * In order to support SSR we **MUST** access the browser env only after the window has loaded\n */\nexport const getEnv = () => env || (env = getBrowserEnv());\n\nexport const getFabricDocument = (): Document => getEnv().document;\n\nexport const getFabricWindow = (): (Window & typeof globalThis) | DOMWindow =>\n  getEnv().window;\n\n/**\n * @returns the config value if defined, fallbacks to the environment value\n */\nexport const getDevicePixelRatio = () =>\n  Math.max(config.devicePixelRatio ?? getFabricWindow().devicePixelRatio, 1);\n", "import { config } from './config';\nimport type { TRectBounds } from './typedefs';\n\nexport class Cache {\n  /**\n   * Cache of widths of chars in text rendering.\n   */\n  charWidthsCache: Record<\n    /** fontFamily */ string,\n    Record<\n      /** fontStyleCacheKey */ string,\n      Record</** char */ string, /** width */ number>\n    >\n  > = {};\n\n  /**\n   * @return {Object} reference to cache\n   */\n  getFontCache({\n    fontFamily,\n    fontStyle,\n    fontWeight,\n  }: {\n    fontFamily: string;\n    fontStyle: string;\n    fontWeight: string | number;\n  }) {\n    fontFamily = fontFamily.toLowerCase();\n    if (!this.charWidthsCache[fontFamily]) {\n      this.charWidthsCache[fontFamily] = {};\n    }\n    const fontCache = this.charWidthsCache[fontFamily];\n    const cacheKey = `${fontStyle.toLowerCase()}_${(\n      fontWeight + ''\n    ).toLowerCase()}`;\n    if (!fontCache[cacheKey]) {\n      fontCache[cacheKey] = {};\n    }\n    return fontCache[cacheKey];\n  }\n\n  /**\n   * Clear char widths cache for the given font family or all the cache if no\n   * fontFamily is specified.\n   * Use it if you know you are loading fonts in a lazy way and you are not waiting\n   * for custom fonts to load properly when adding text objects to the canvas.\n   * If a text object is added when its own font is not loaded yet, you will get wrong\n   * measurement and so wrong bounding boxes.\n   * After the font cache is cleared, either change the textObject text content or call\n   * initDimensions() to trigger a recalculation\n   * @param {String} [fontFamily] font family to clear\n   */\n  clearFontCache(fontFamily?: string) {\n    fontFamily = (fontFamily || '').toLowerCase();\n    if (!fontFamily) {\n      this.charWidthsCache = {};\n    } else if (this.charWidthsCache[fontFamily]) {\n      delete this.charWidthsCache[fontFamily];\n    }\n  }\n\n  /**\n   * Given current aspect ratio, determines the max width and height that can\n   * respect the total allowed area for the cache.\n   * @param {number} ar aspect ratio\n   * @return {number[]} Limited dimensions X and Y\n   */\n  limitDimsByArea(ar: number) {\n    const { perfLimitSizeTotal } = config;\n    const roughWidth = Math.sqrt(perfLimitSizeTotal * ar);\n    // we are not returning a point on purpose, to avoid circular dependencies\n    // this is an internal utility\n    return [\n      Math.floor(roughWidth),\n      Math.floor(perfLimitSizeTotal / roughWidth),\n    ];\n  }\n\n  /**\n   * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\n   * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\n   * you do not get any speed benefit and you get a big object in memory.\n   * The object was a private variable before, while now is appended to the lib so that you have access to it and you\n   * can eventually clear it.\n   * It was an internal variable, is accessible since version 2.3.4\n   */\n  boundsOfCurveCache: Record<string, TRectBounds> = {};\n}\n\nexport const cache = new Cache();\n", "import type { TMat2D } from './typedefs';\n// use this syntax so babel plugin see this import here\nimport { version } from '../package.json';\n\nexport const VERSION = version;\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n\nexport const halfPI = Math.PI / 2;\nexport const twoMathPi = Math.PI * 2;\nexport const PiBy180 = Math.PI / 180;\n\nexport const iMatrix = Object.freeze([1, 0, 0, 1, 0, 0]) as TMat2D;\nexport const DEFAULT_SVG_FONT_SIZE = 16;\nexport const ALIASING_LIMIT = 2;\n\n/* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */\nexport const kRect = 1 - 0.5522847498;\n\nexport const CENTER = 'center';\nexport const LEFT = 'left';\nexport const TOP = 'top';\nexport const BOTTOM = 'bottom';\nexport const RIGHT = 'right';\nexport const NONE = 'none';\n\nexport const reNewline = /\\r?\\n/;\n\nexport const MOVING = 'moving';\nexport const SCALING = 'scaling';\nexport const ROTATING = 'rotating';\nexport const ROTATE = 'rotate';\nexport const SKEWING = 'skewing';\nexport const RESIZING = 'resizing';\nexport const MODIFY_POLY = 'modifyPoly';\nexport const MODIFY_PATH = 'modifyPath';\nexport const CHANGED = 'changed';\nexport const SCALE = 'scale';\nexport const SCALE_X = 'scaleX';\nexport const SCALE_Y = 'scaleY';\nexport const SKEW_X = 'skewX';\nexport const SKEW_Y = 'skewY';\nexport const FILL = 'fill';\nexport const STROKE = 'stroke';\nexport const MODIFIED = 'modified';\n", "import { FabricError } from './util/internals/console';\n\n/*\n * This Map connects the objects type value with their\n * class implementation. It used from any object to understand which are\n * the classes to enlive when requesting a object.type = 'path' for example.\n * Objects uses it for clipPath, Canvas uses it for everything.\n * This is necessary for generic code to run and enlive instances from serialized representation.\n * You can customize which classes get enlived from SVG parsing using this classRegistry.\n * The Registry start empty and gets filled in depending which files you import.\n * If you want to be able to parse arbitrary SVGs or JSON representation of canvases, coming from\n * different sources you will need to import all fabric because you may need all classes.\n */\n\nexport const JSON = 'json';\nexport const SVG = 'svg';\n\nexport class ClassRegistry {\n  declare [JSON]: Map<string, any>;\n  declare [SVG]: Map<string, any>;\n\n  constructor() {\n    this[JSON] = new Map();\n    this[SVG] = new Map();\n  }\n\n  has(classType: string): boolean {\n    return this[JSON].has(classType);\n  }\n\n  getClass<T>(classType: string): T {\n    const constructor = this[JSON].get(classType);\n    if (!constructor) {\n      throw new FabricError(`No class registered for ${classType}`);\n    }\n    return constructor;\n  }\n\n  setClass(classConstructor: any, classType?: string) {\n    if (classType) {\n      this[JSON].set(classType, classConstructor);\n    } else {\n      this[JSON].set(classConstructor.type, classConstructor);\n      // legacy\n      // @TODO: needs to be removed in fabric 7 or 8\n      this[JSON].set(classConstructor.type.toLowerCase(), classConstructor);\n    }\n  }\n\n  getSVGClass(SVGTagName: string): any {\n    return this[SVG].get(SVGTagName);\n  }\n\n  setSVGClass(classConstructor: any, SVGTagName?: string) {\n    this[SVG].set(\n      SVGTagName ?? classConstructor.type.toLowerCase(),\n      classConstructor,\n    );\n  }\n}\n\nexport const classRegistry = new ClassRegistry();\n", "import type { StaticCanvas } from '../../canvas/StaticCanvas';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport type { AnimationBase } from './AnimationBase';\n\n/**\n * Array holding all running animations\n */\nclass AnimationRegistry extends Array<AnimationBase> {\n  /**\n   * Remove a single animation using an animation context\n   * @param {AnimationBase} context\n   */\n  remove(context: AnimationBase) {\n    const index = this.indexOf(context);\n    index > -1 && this.splice(index, 1);\n  }\n\n  /**\n   * Cancel all running animations on the next frame\n   */\n  cancelAll() {\n    const animations = this.splice(0);\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n\n  /**\n   * Cancel all running animations attached to a canvas on the next frame\n   * @param {StaticCanvas} canvas\n   */\n  cancelByCanvas(canvas: StaticCanvas) {\n    if (!canvas) {\n      return [];\n    }\n    const animations = this.filter(\n      (animation) =>\n        animation.target === canvas ||\n        (typeof animation.target === 'object' &&\n          (animation.target as FabricObject)?.canvas === canvas),\n    );\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n\n  /**\n   * Cancel all running animations for target on the next frame\n   * @param target\n   */\n  cancelByTarget(target: AnimationBase['target']) {\n    if (!target) {\n      return [];\n    }\n    const animations = this.filter((animation) => animation.target === target);\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n}\n\nexport const runningAnimations = new AnimationRegistry();\n", "export type TEventCallback<T = any> = (options: T) => any;\n\ntype EventRegistryObject<E> = {\n  [K in keyof E]?: TEventCallback<E[K]>;\n};\n\n/**\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\n * @see {@link http://fabricjs.com/events|Events demo}\n */\nexport class Observable<EventSpec> {\n  private __eventListeners: Record<keyof EventSpec, TEventCallback[]> =\n    {} as Record<keyof EventSpec, TEventCallback[]>;\n\n  /**\n   * Observes specified event\n   * @alias on\n   * @param {string} eventName Event name (eg. 'after:render')\n   * @param {EventRegistryObject} handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Function} disposer\n   */\n  on<K extends keyof EventSpec, E extends EventSpec[K]>(\n    eventName: K,\n    handler: TEventCallback<E>,\n  ): VoidFunction;\n  on(handlers: EventRegistryObject<EventSpec>): VoidFunction;\n  on<K extends keyof EventSpec, E extends EventSpec[K]>(\n    arg0: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback<E>,\n  ): VoidFunction {\n    if (!this.__eventListeners) {\n      this.__eventListeners = {} as Record<keyof EventSpec, TEventCallback[]>;\n    }\n    if (typeof arg0 === 'object') {\n      // one object with key/value pairs was passed\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        this.on(eventName as K, handler as TEventCallback);\n      });\n      return () => this.off(arg0);\n    } else if (handler) {\n      const eventName = arg0;\n      if (!this.__eventListeners[eventName]) {\n        this.__eventListeners[eventName] = [];\n      }\n      this.__eventListeners[eventName].push(handler);\n      return () => this.off(eventName, handler);\n    } else {\n      // noop\n      return () => false;\n    }\n  }\n\n  /**\n   * Observes specified event **once**\n   * @alias once\n   * @param {string} eventName Event name (eg. 'after:render')\n   * @param {EventRegistryObject} handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Function} disposer\n   */\n  once<K extends keyof EventSpec, E extends EventSpec[K]>(\n    eventName: K,\n    handler: TEventCallback<E>,\n  ): VoidFunction;\n  once(handlers: EventRegistryObject<EventSpec>): VoidFunction;\n  once<K extends keyof EventSpec, E extends EventSpec[K]>(\n    arg0: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback<E>,\n  ): VoidFunction {\n    if (typeof arg0 === 'object') {\n      // one object with key/value pairs was passed\n      const disposers: VoidFunction[] = [];\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        disposers.push(this.once(eventName as K, handler as TEventCallback));\n      });\n      return () => disposers.forEach((d) => d());\n    } else if (handler) {\n      const disposer = this.on<K, E>(\n        arg0,\n        function onceHandler(this: Observable<EventSpec>, ...args) {\n          handler.call(this, ...args);\n          disposer();\n        },\n      );\n      return disposer;\n    } else {\n      // noop\n      return () => false;\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} eventName\n   * @param {Function} [handler]\n   */\n  private _removeEventListener<K extends keyof EventSpec>(\n    eventName: K,\n    handler?: TEventCallback,\n  ) {\n    if (!this.__eventListeners[eventName]) {\n      return;\n    }\n\n    if (handler) {\n      const eventListener = this.__eventListeners[eventName];\n      const index = eventListener.indexOf(handler);\n      index > -1 && eventListener.splice(index, 1);\n    } else {\n      this.__eventListeners[eventName] = [];\n    }\n  }\n\n  /**\n   * Unsubscribe all event listeners for eventname.\n   * Do not use this pattern. You could kill internal fabricJS events.\n   * We know we should have protected events for internal flows, but we don't have yet\n   * @deprecated\n   * @param {string} eventName event name (eg. 'after:render')\n   */\n  off<K extends keyof EventSpec>(eventName: K): void;\n  /**\n   * unsubscribe an event listener\n   * @param {string} eventName event name (eg. 'after:render')\n   * @param {TEventCallback} handler event listener to unsubscribe\n   */\n  off<K extends keyof EventSpec>(eventName: K, handler: TEventCallback): void;\n  /**\n   * unsubscribe event listeners\n   * @param handlers handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   */\n  off(handlers: EventRegistryObject<EventSpec>): void;\n  /**\n   * unsubscribe all event listeners\n   */\n  off(): void;\n  off<K extends keyof EventSpec>(\n    arg0?: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback,\n  ) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    // remove all key/value pairs (event name -> event handler)\n    if (typeof arg0 === 'undefined') {\n      for (const eventName in this.__eventListeners) {\n        this._removeEventListener(eventName);\n      }\n    }\n    // one object with key/value pairs was passed\n    else if (typeof arg0 === 'object') {\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        this._removeEventListener(eventName as K, handler as TEventCallback);\n      });\n    } else {\n      this._removeEventListener(arg0, handler);\n    }\n  }\n\n  /**\n   * Fires event with an optional options object\n   * @param {String} eventName Event name to fire\n   * @param {Object} [options] Options object\n   */\n  fire<K extends keyof EventSpec>(eventName: K, options?: EventSpec[K]) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    const listenersForEvent = this.__eventListeners[eventName]?.concat();\n    if (listenersForEvent) {\n      for (let i = 0; i < listenersForEvent.length; i++) {\n        listenersForEvent[i].call(this, options || {});\n      }\n    }\n  }\n}\n", "/**\n * Removes value from an array.\n * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n * @param {Array} array\n * @param {*} value\n * @return {Array} original array\n */\nexport const removeFromArray = <T>(array: T[], value: T): T[] => {\n  const idx = array.indexOf(value);\n  if (idx !== -1) {\n    array.splice(idx, 1);\n  }\n  return array;\n};\n", "import type { TRadian } from '../../typedefs';\nimport { halfPI } from '../../constants';\n\n/**\n * Calculate the cos of an angle, avoiding returning floats for known results\n * This function is here just to avoid getting 0.999999999999999 when dealing\n * with numbers that are really 1 or 0.\n * @param {TRadian} angle the angle\n * @return {Number} the cosin value for angle.\n */\nexport const cos = (angle: TRadian): number => {\n  if (angle === 0) {\n    return 1;\n  }\n  const angleSlice = Math.abs(angle) / halfPI;\n  switch (angleSlice) {\n    case 1:\n    case 3:\n      return 0;\n    case 2:\n      return -1;\n  }\n  return Math.cos(angle);\n};\n", "import type { TRadian } from '../../typedefs';\nimport { halfPI } from '../../constants';\n\n/**\n * Calculate the cos of an angle, avoiding returning floats for known results\n * This function is here just to avoid getting 0.999999999999999 when dealing\n * with numbers that are really 1 or 0.\n * @param {TRadian} angle the angle\n * @return {Number} the sin value for angle.\n */\nexport const sin = (angle: TRadian): number => {\n  if (angle === 0) {\n    return 0;\n  }\n  const angleSlice = angle / halfPI;\n  const value = Math.sign(angle);\n  switch (angleSlice) {\n    case 1:\n      return value;\n    case 2:\n      return 0;\n    case 3:\n      return -value;\n  }\n  return Math.sin(angle);\n};\n", "import type { TMat2D, TRadian } from './typedefs';\nimport { cos } from './util/misc/cos';\nimport { sin } from './util/misc/sin';\n\nexport interface XY {\n  x: number;\n  y: number;\n}\n\n/**\n * Adaptation of work of Kevin Lindsey(kevin@kevlindev.com)\n */\nexport class Point implements XY {\n  declare x: number;\n\n  declare y: number;\n\n  constructor();\n  constructor(x: number, y: number);\n  constructor(point?: XY);\n  constructor(arg0: number | XY = 0, y = 0) {\n    if (typeof arg0 === 'object') {\n      this.x = arg0.x;\n      this.y = arg0.y;\n    } else {\n      this.x = arg0;\n      this.y = y;\n    }\n  }\n\n  /**\n   * Adds another point to this one and returns another one\n   * @param {XY} that\n   * @return {Point} new Point instance with added values\n   */\n  add(that: XY): Point {\n    return new Point(this.x + that.x, this.y + that.y);\n  }\n\n  /**\n   * Adds another point to this one\n   * @param {XY} that\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  addEquals(that: XY): Point {\n    this.x += that.x;\n    this.y += that.y;\n    return this;\n  }\n\n  /**\n   * Adds value to this point and returns a new one\n   * @param {Number} scalar\n   * @return {Point} new Point with added value\n   */\n  scalarAdd(scalar: number): Point {\n    return new Point(this.x + scalar, this.y + scalar);\n  }\n\n  /**\n   * Adds value to this point\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarAddEquals(scalar: number): Point {\n    this.x += scalar;\n    this.y += scalar;\n    return this;\n  }\n\n  /**\n   * Subtracts another point from this point and returns a new one\n   * @param {XY} that\n   * @return {Point} new Point object with subtracted values\n   */\n  subtract(that: XY): Point {\n    return new Point(this.x - that.x, this.y - that.y);\n  }\n\n  /**\n   * Subtracts another point from this point\n   * @param {XY} that\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  subtractEquals(that: XY): Point {\n    this.x -= that.x;\n    this.y -= that.y;\n    return this;\n  }\n\n  /**\n   * Subtracts value from this point and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarSubtract(scalar: number): Point {\n    return new Point(this.x - scalar, this.y - scalar);\n  }\n\n  /**\n   * Subtracts value from this point\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarSubtractEquals(scalar: number): Point {\n    this.x -= scalar;\n    this.y -= scalar;\n    return this;\n  }\n\n  /**\n   * Multiplies this point by another value and returns a new one\n   * @param {XY} that\n   * @return {Point}\n   */\n  multiply(that: XY): Point {\n    return new Point(this.x * that.x, this.y * that.y);\n  }\n\n  /**\n   * Multiplies this point by a value and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarMultiply(scalar: number): Point {\n    return new Point(this.x * scalar, this.y * scalar);\n  }\n\n  /**\n   * Multiplies this point by a value\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarMultiplyEquals(scalar: number): Point {\n    this.x *= scalar;\n    this.y *= scalar;\n    return this;\n  }\n\n  /**\n   * Divides this point by another and returns a new one\n   * @param {XY} that\n   * @return {Point}\n   */\n  divide(that: XY): Point {\n    return new Point(this.x / that.x, this.y / that.y);\n  }\n\n  /**\n   * Divides this point by a value and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarDivide(scalar: number): Point {\n    return new Point(this.x / scalar, this.y / scalar);\n  }\n\n  /**\n   * Divides this point by a value\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarDivideEquals(scalar: number): Point {\n    this.x /= scalar;\n    this.y /= scalar;\n    return this;\n  }\n\n  /**\n   * Returns true if this point is equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  eq(that: XY): boolean {\n    return this.x === that.x && this.y === that.y;\n  }\n\n  /**\n   * Returns true if this point is less than another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  lt(that: XY): boolean {\n    return this.x < that.x && this.y < that.y;\n  }\n\n  /**\n   * Returns true if this point is less than or equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  lte(that: XY): boolean {\n    return this.x <= that.x && this.y <= that.y;\n  }\n\n  /**\n\n   * Returns true if this point is greater another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  gt(that: XY): boolean {\n    return this.x > that.x && this.y > that.y;\n  }\n\n  /**\n   * Returns true if this point is greater than or equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  gte(that: XY): boolean {\n    return this.x >= that.x && this.y >= that.y;\n  }\n\n  /**\n   * Returns new point which is the result of linear interpolation with this one and another one\n   * @param {XY} that\n   * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\n   * @return {Point}\n   */\n  lerp(that: XY, t = 0.5): Point {\n    t = Math.max(Math.min(1, t), 0);\n    return new Point(\n      this.x + (that.x - this.x) * t,\n      this.y + (that.y - this.y) * t,\n    );\n  }\n\n  /**\n   * Returns distance from this point and another one\n   * @param {XY} that\n   * @return {Number}\n   */\n  distanceFrom(that: XY): number {\n    const dx = this.x - that.x,\n      dy = this.y - that.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  /**\n   * Returns the point between this point and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  midPointFrom(that: XY): Point {\n    return this.lerp(that);\n  }\n\n  /**\n   * Returns a new point which is the min of this and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  min(that: XY): Point {\n    return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n  }\n\n  /**\n   * Returns a new point which is the max of this and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  max(that: XY): Point {\n    return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n  }\n\n  /**\n   * Returns string representation of this point\n   * @return {String}\n   */\n  toString(): string {\n    return `${this.x},${this.y}`;\n  }\n\n  /**\n   * Sets x/y of this point\n   * @param {Number} x\n   * @param {Number} y\n   * @chainable\n   */\n  setXY(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets x of this point\n   * @param {Number} x\n   * @chainable\n   */\n  setX(x: number) {\n    this.x = x;\n    return this;\n  }\n\n  /**\n   * Sets y of this point\n   * @param {Number} y\n   * @chainable\n   */\n  setY(y: number) {\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets x/y of this point from another point\n   * @param {XY} that\n   * @chainable\n   */\n  setFromPoint(that: XY) {\n    this.x = that.x;\n    this.y = that.y;\n    return this;\n  }\n\n  /**\n   * Swaps x/y of this point and another point\n   * @param {XY} that\n   */\n  swap(that: XY) {\n    const x = this.x,\n      y = this.y;\n    this.x = that.x;\n    this.y = that.y;\n    that.x = x;\n    that.y = y;\n  }\n\n  /**\n   * return a cloned instance of the point\n   * @return {Point}\n   */\n  clone(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Rotates `point` around `origin` with `radians`\n   * @static\n   * @memberOf fabric.util\n   * @param {XY} origin The origin of the rotation\n   * @param {TRadian} radians The radians of the angle for the rotation\n   * @return {Point} The new rotated point\n   */\n  rotate(radians: TRadian, origin: XY = ZERO): Point {\n    // TODO benchmark and verify the add and subtract how much cost\n    // and then in case early return if no origin is passed\n    const sinus = sin(radians),\n      cosinus = cos(radians);\n    const p = this.subtract(origin);\n    const rotated = new Point(\n      p.x * cosinus - p.y * sinus,\n      p.x * sinus + p.y * cosinus,\n    );\n    return rotated.add(origin);\n  }\n\n  /**\n   * Apply transform t to point p\n   * @static\n   * @memberOf fabric.util\n   * @param  {TMat2D} t The transform\n   * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n   * @return {Point} The transformed point\n   */\n  transform(t: TMat2D, ignoreOffset = false): Point {\n    return new Point(\n      t[0] * this.x + t[2] * this.y + (ignoreOffset ? 0 : t[4]),\n      t[1] * this.x + t[3] * this.y + (ignoreOffset ? 0 : t[5]),\n    );\n  }\n}\n\nexport const ZERO = new Point(0, 0);\n", "import type { Constructor, TBBox } from './typedefs';\nimport { removeFromArray } from './util/internals/removeFromArray';\nimport { Point } from './Point';\nimport type { ActiveSelection } from './shapes/ActiveSelection';\nimport type { Group } from './shapes/Group';\nimport type { InteractiveFabricObject } from './shapes/Object/InteractiveObject';\nimport type { FabricObject } from './shapes/Object/FabricObject';\n\nexport const isCollection = (\n  fabricObject?: FabricObject,\n): fabricObject is Group | ActiveSelection => {\n  return !!fabricObject && Array.isArray((fabricObject as Group)._objects);\n};\n\nexport function createCollectionMixin<TBase extends Constructor>(Base: TBase) {\n  class Collection extends Base {\n    /**\n     * @type {FabricObject[]}\n     * @TODO needs to end up in the constructor too\n     */\n    _objects: FabricObject[] = [];\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onObjectAdded(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onObjectRemoved(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onStackOrderChanged(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    /**\n     * Adds objects to collection\n     * Objects should be instances of (or inherit from) FabricObject\n     * @param {...FabricObject[]} objects to add\n     * @returns {number} new array length\n     */\n    add(...objects: FabricObject[]): number {\n      const size = this._objects.push(...objects);\n      objects.forEach((object) => this._onObjectAdded(object));\n      return size;\n    }\n\n    /**\n     * Inserts an object into collection at specified index\n     * @param {number} index Index to insert object at\n     * @param {...FabricObject[]} objects Object(s) to insert\n     * @returns {number} new array length\n     */\n    insertAt(index: number, ...objects: FabricObject[]) {\n      this._objects.splice(index, 0, ...objects);\n      objects.forEach((object) => this._onObjectAdded(object));\n      return this._objects.length;\n    }\n\n    /**\n     * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n     * @private\n     * @param {...FabricObject[]} objects objects to remove\n     * @returns {FabricObject[]} removed objects\n     */\n    remove(...objects: FabricObject[]) {\n      const array = this._objects,\n        removed: FabricObject[] = [];\n      objects.forEach((object) => {\n        const index = array.indexOf(object);\n        // only call onObjectRemoved if an object was actually removed\n        if (index !== -1) {\n          array.splice(index, 1);\n          removed.push(object);\n          this._onObjectRemoved(object);\n        }\n      });\n      return removed;\n    }\n\n    /**\n     * Executes given function for each object in this group\n     * A simple shortcut for getObjects().forEach, before es6 was more complicated,\n     * now is just a shortcut.\n     * @param {Function} callback\n     *                   Callback invoked with current object as first argument,\n     *                   index - as second and an array of all objects - as third.\n     */\n    forEachObject(\n      callback: (\n        object: FabricObject,\n        index: number,\n        array: FabricObject[],\n      ) => any,\n    ) {\n      this.getObjects().forEach((object, index, objects) =>\n        callback(object, index, objects),\n      );\n    }\n\n    /**\n     * Returns an array of children objects of this instance\n     * @param {...String} [types] When specified, only objects of these types are returned\n     * @return {Array}\n     */\n    getObjects(...types: string[]) {\n      if (types.length === 0) {\n        return [...this._objects];\n      }\n      return this._objects.filter((o) => o.isType(...types));\n    }\n\n    /**\n     * Returns object at specified index\n     * @param {Number} index\n     * @return {Object} object at index\n     */\n    item(index: number) {\n      return this._objects[index];\n    }\n\n    /**\n     * Returns true if collection contains no objects\n     * @return {Boolean} true if collection is empty\n     */\n    isEmpty() {\n      return this._objects.length === 0;\n    }\n\n    /**\n     * Returns a size of a collection (i.e: length of an array containing its objects)\n     * @return {Number} Collection size\n     */\n    size() {\n      return this._objects.length;\n    }\n\n    /**\n     * Returns true if collection contains an object.\\\n     * **Prefer using {@link FabricObject#isDescendantOf} for performance reasons**\n     * instead of `a.contains(b)` use `b.isDescendantOf(a)`\n     * @param {Object} object Object to check against\n     * @param {Boolean} [deep=false] `true` to check all descendants, `false` to check only `_objects`\n     * @return {Boolean} `true` if collection contains an object\n     */\n    contains(object: FabricObject, deep?: boolean): boolean {\n      if (this._objects.includes(object)) {\n        return true;\n      } else if (deep) {\n        return this._objects.some(\n          (obj) =>\n            obj instanceof Collection &&\n            (obj as unknown as Collection).contains(object, true),\n        );\n      }\n      return false;\n    }\n\n    /**\n     * Returns number representation of a collection complexity\n     * @return {Number} complexity\n     */\n    complexity() {\n      return this._objects.reduce((memo, current) => {\n        memo += current.complexity ? current.complexity() : 0;\n        return memo;\n      }, 0);\n    }\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the bottom of the stack of drawn objects\n     * @param {fabric.Object} object Object to send to back\n     * @returns {boolean} true if change occurred\n     */\n    sendObjectToBack(object: FabricObject) {\n      if (!object || object === this._objects[0]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.unshift(object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the top of the stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @returns {boolean} true if change occurred\n     */\n    bringObjectToFront(object: FabricObject) {\n      if (!object || object === this._objects[this._objects.length - 1]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.push(object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    /**\n     * Moves an object or a selection down in stack of drawn objects\n     * An optional parameter, `intersecting` allows to move the object in behind\n     * the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {boolean} [intersecting] If `true`, send object behind next lower intersecting object\n     * @returns {boolean} true if change occurred\n     */\n    sendObjectBackwards(object: FabricObject, intersecting?: boolean) {\n      if (!object) {\n        return false;\n      }\n      const idx = this._objects.indexOf(object);\n      if (idx !== 0) {\n        // if object is not on the bottom of stack\n        const newIdx = this.findNewLowerIndex(object, idx, intersecting);\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this._onStackOrderChanged(object);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Moves an object or a selection up in stack of drawn objects\n     * An optional parameter, intersecting allows to move the object in front\n     * of the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n     * @returns {boolean} true if change occurred\n     */\n    bringObjectForward(object: FabricObject, intersecting?: boolean) {\n      if (!object) {\n        return false;\n      }\n      const idx = this._objects.indexOf(object);\n      if (idx !== this._objects.length - 1) {\n        // if object is not on top of stack (last item in an array)\n        const newIdx = this.findNewUpperIndex(object, idx, intersecting);\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this._onStackOrderChanged(object);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Moves an object to specified level in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {number} index Position to move to\n     * @returns {boolean} true if change occurred\n     */\n    moveObjectTo(object: FabricObject, index: number) {\n      if (object === this._objects[index]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.splice(index, 0, object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    findNewLowerIndex(\n      object: FabricObject,\n      idx: number,\n      intersecting?: boolean,\n    ) {\n      let newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n        // traverse down the stack looking for the nearest intersecting object\n        for (let i = idx - 1; i >= 0; --i) {\n          if (object.isOverlapping(this._objects[i])) {\n            newIdx = i;\n            break;\n          }\n        }\n      } else {\n        newIdx = idx - 1;\n      }\n\n      return newIdx;\n    }\n\n    findNewUpperIndex(\n      object: FabricObject,\n      idx: number,\n      intersecting?: boolean,\n    ) {\n      let newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n        // traverse up the stack looking for the nearest intersecting object\n        for (let i = idx + 1; i < this._objects.length; ++i) {\n          if (object.isOverlapping(this._objects[i])) {\n            newIdx = i;\n            break;\n          }\n        }\n      } else {\n        newIdx = idx + 1;\n      }\n\n      return newIdx;\n    }\n\n    /**\n     * Given a bounding box, return all the objects of the collection that are contained in the bounding box.\n     * If `includeIntersecting` is true, return also the objects that intersect the bounding box as well.\n     * This is meant to work with selection. Is not a generic method.\n     * @param {TBBox} bbox a bounding box in scene coordinates\n     * @param {{ includeIntersecting?: boolean }} options an object with includeIntersecting\n     * @returns array of objects contained in the bounding box, ordered from top to bottom stacking wise\n     */\n    collectObjects(\n      { left, top, width, height }: TBBox,\n      { includeIntersecting = true }: { includeIntersecting?: boolean } = {},\n    ) {\n      const objects: InteractiveFabricObject[] = [],\n        tl = new Point(left, top),\n        br = tl.add(new Point(width, height));\n\n      // we iterate reverse order to collect top first in case of click.\n      for (let i = this._objects.length - 1; i >= 0; i--) {\n        const object = this._objects[i] as unknown as InteractiveFabricObject;\n        if (\n          object.selectable &&\n          object.visible &&\n          ((includeIntersecting && object.intersectsWithRect(tl, br)) ||\n            object.isContainedWithinRect(tl, br) ||\n            (includeIntersecting && object.containsPoint(tl)) ||\n            (includeIntersecting && object.containsPoint(br)))\n        ) {\n          objects.push(object);\n        }\n      }\n\n      return objects;\n    }\n  }\n\n  // https://github.com/microsoft/TypeScript/issues/32080\n  return Collection as typeof Collection & TBase;\n}\n", "import { Observable } from './Observable';\n\nexport class CommonMethods<EventSpec> extends Observable<EventSpec> {\n  /**\n   * Sets object's properties from options, for initialization only\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected _setOptions(options: any = {}) {\n    for (const prop in options) {\n      this.set(prop, options[prop]);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setObject(obj: Record<string, any>) {\n    for (const prop in obj) {\n      this._set(prop, obj[prop]);\n    }\n  }\n\n  /**\n   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n   * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n   */\n  set(key: string | Record<string, any>, value?: any) {\n    if (typeof key === 'object') {\n      this._setObject(key);\n    } else {\n      this._set(key, value);\n    }\n    return this;\n  }\n\n  _set(key: string, value: any) {\n    this[key as keyof this] = value;\n  }\n\n  /**\n   * Toggles specified property from `true` to `false` or from `false` to `true`\n   * @param {String} property Property to toggle\n   */\n  toggle(property: string) {\n    const value = this.get(property);\n    if (typeof value === 'boolean') {\n      this.set(property, !value);\n    }\n    return this;\n  }\n\n  /**\n   * Basic getter\n   * @param {String} property Property name\n   * @return {*} value of a property\n   */\n  get(property: string): any {\n    return this[property as keyof this];\n  }\n}\n", "import { getFabricWindow } from '../../env';\n\nexport function requestAnimFrame(callback: FrameRequestCallback): number {\n  return getFabricWindow().requestAnimationFrame(callback);\n}\n\nexport function cancelAnimFrame(handle: number): void {\n  return getFabricWindow().cancelAnimationFrame(handle);\n}\n", "let id = 0;\n\nexport const uid = () => id++;\n", "import { getFabricDocument } from '../../env';\nimport type { ImageFormat, TSize } from '../../typedefs';\nimport { FabricError } from '../internals/console';\n/**\n * Creates canvas element\n * @return {CanvasElement} initialized canvas element\n */\nexport const createCanvasElement = (): HTMLCanvasElement => {\n  const element = getFabricDocument().createElement('canvas');\n  if (!element || typeof element.getContext === 'undefined') {\n    throw new FabricError('Failed to create `canvas` element');\n  }\n  return element;\n};\n\n/**\n * Creates image element (works on client and node)\n * @return {HTMLImageElement} HTML image element\n */\nexport const createImage = (): HTMLImageElement =>\n  getFabricDocument().createElement('img');\n\n/**\n * Creates a canvas element that is a copy of another and is also painted\n * @param {CanvasElement} canvas to copy size and content of\n * @return {CanvasElement} initialized canvas element\n */\nexport const copyCanvasElement = (\n  canvas: HTMLCanvasElement,\n): HTMLCanvasElement => {\n  const newCanvas = createCanvasElementFor(canvas);\n  newCanvas.getContext('2d')?.drawImage(canvas, 0, 0);\n  return newCanvas;\n};\n\n/**\n * Creates a canvas element as big as another\n * @param {CanvasElement} canvas to copy size and content of\n * @return {CanvasElement} initialized canvas element\n */\nexport const createCanvasElementFor = (\n  canvas: HTMLCanvasElement | ImageData | HTMLImageElement | TSize,\n): HTMLCanvasElement => {\n  const newCanvas = createCanvasElement();\n  newCanvas.width = canvas.width;\n  newCanvas.height = canvas.height;\n  return newCanvas;\n};\n\n/**\n * since 2.6.0 moved from canvas instance to utility.\n * possibly useless\n * @param {CanvasElement} canvasEl to copy size and content of\n * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\n * @param {number} quality <= 1 and > 0\n * @return {String} data url\n */\nexport const toDataURL = (\n  canvasEl: HTMLCanvasElement,\n  format: ImageFormat,\n  quality: number,\n) => canvasEl.toDataURL(`image/${format}`, quality);\n\nexport const isHTMLCanvas = (\n  canvas?: HTMLCanvasElement | string,\n): canvas is HTMLCanvasElement => {\n  return !!canvas && (canvas as HTMLCanvasElement).getContext !== undefined;\n};\n\nexport const toBlob = (\n  canvasEl: HTMLCanvasElement,\n  format?: ImageFormat,\n  quality?: number,\n) =>\n  new Promise((resolve, _) => {\n    canvasEl.toBlob(resolve, `image/${format}`, quality);\n  }) as Promise<Blob | null>;\n", "import type { TRadian, TDegree } from '../../typedefs';\nimport { PiBy180 } from '../../constants';\n\n/**\n * Transforms degrees to radians.\n * @param {TDegree} degrees value in degrees\n * @return {TRadian} value in radians\n */\nexport const degreesToRadians = (degrees: TDegree): TRadian =>\n  (degrees * PiBy180) as TRadian;\n\n/**\n * Transforms radians to degrees.\n * @param {TRadian} radians value in radians\n * @return {TDegree} value in degrees\n */\nexport const radiansToDegrees = (radians: TRadian): TDegree =>\n  (radians / PiBy180) as TDegree;\n", "import { iMatrix } from '../../constants';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport type { TDegree, TRadian, TMat2D } from '../../typedefs';\nimport { cos } from './cos';\nimport { degreesToRadians, radiansToDegrees } from './radiansDegreesConversion';\nimport { sin } from './sin';\n\nexport type TRotateMatrixArgs = {\n  angle?: TDegree;\n};\n\nexport type TTranslateMatrixArgs = {\n  translateX?: number;\n  translateY?: number;\n};\n\nexport type TScaleMatrixArgs = {\n  scaleX?: number;\n  scaleY?: number;\n  flipX?: boolean;\n  flipY?: boolean;\n  skewX?: TDegree;\n  skewY?: TDegree;\n};\n\nexport type TComposeMatrixArgs = TTranslateMatrixArgs &\n  TRotateMatrixArgs &\n  TScaleMatrixArgs;\n\nexport type TQrDecomposeOut = Required<\n  Omit<TComposeMatrixArgs, 'flipX' | 'flipY'>\n>;\n\nexport const isIdentityMatrix = (mat: TMat2D) =>\n  mat.every((value, index) => value === iMatrix[index]);\n\n/**\n * Apply transform t to point p\n * @deprecated use {@link Point#transform}\n * @param  {Point | XY} p The point to transform\n * @param  {Array} t The transform\n * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n * @return {Point} The transformed point\n */\nexport const transformPoint = (\n  p: XY,\n  t: TMat2D,\n  ignoreOffset?: boolean,\n): Point => new Point(p).transform(t, ignoreOffset);\n\n/**\n * Invert transformation t\n * @param {Array} t The transform\n * @return {Array} The inverted transform\n */\nexport const invertTransform = (t: TMat2D): TMat2D => {\n  const a = 1 / (t[0] * t[3] - t[1] * t[2]),\n    r = [a * t[3], -a * t[1], -a * t[2], a * t[0], 0, 0] as TMat2D,\n    { x, y } = new Point(t[4], t[5]).transform(r, true);\n  r[4] = -x;\n  r[5] = -y;\n  return r;\n};\n\n/**\n * Multiply matrix A by matrix B to nest transformations\n * @param  {TMat2D} a First transformMatrix\n * @param  {TMat2D} b Second transformMatrix\n * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\n * @return {TMat2D} The product of the two transform matrices\n */\nexport const multiplyTransformMatrices = (\n  a: TMat2D,\n  b: TMat2D,\n  is2x2?: boolean,\n): TMat2D =>\n  [\n    a[0] * b[0] + a[2] * b[1],\n    a[1] * b[0] + a[3] * b[1],\n    a[0] * b[2] + a[2] * b[3],\n    a[1] * b[2] + a[3] * b[3],\n    is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\n    is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5],\n  ] as TMat2D;\n\n/**\n * Multiplies {@link TMat2D} such that a matrix defines the plane for the rest of the matrices **after** it\n *\n * `multiplyTransformMatrixArray([A, B, C, D])` is equivalent to `A(B(C(D)))`\n *\n * @param matrices an array of matrices\n * @param [is2x2] flag to multiply matrices as 2x2 matrices\n * @returns the multiplication product\n */\nexport const multiplyTransformMatrixArray = (\n  matrices: (TMat2D | undefined | null | false)[],\n  is2x2?: boolean,\n) =>\n  matrices.reduceRight(\n    (product: TMat2D, curr) =>\n      curr && product\n        ? multiplyTransformMatrices(curr, product, is2x2)\n        : curr || product,\n    undefined as unknown as TMat2D,\n  ) || iMatrix.concat();\n\nexport const calcPlaneRotation = ([a, b]: TMat2D) =>\n  Math.atan2(b, a) as TRadian;\n\n/**\n * Decomposes standard 2x3 matrix into transform components\n * @param  {TMat2D} a transformMatrix\n * @return {Object} Components of transform\n */\nexport const qrDecompose = (a: TMat2D): TQrDecomposeOut => {\n  const angle = calcPlaneRotation(a),\n    denom = Math.pow(a[0], 2) + Math.pow(a[1], 2),\n    scaleX = Math.sqrt(denom),\n    scaleY = (a[0] * a[3] - a[2] * a[1]) / scaleX,\n    skewX = Math.atan2(a[0] * a[2] + a[1] * a[3], denom);\n  return {\n    angle: radiansToDegrees(angle),\n    scaleX,\n    scaleY,\n    skewX: radiansToDegrees(skewX),\n    skewY: 0 as TDegree,\n    translateX: a[4] || 0,\n    translateY: a[5] || 0,\n  };\n};\n\n/**\n * Generate a translation matrix\n *\n * A translation matrix in the form of\n * [ 1 0 x ]\n * [ 0 1 y ]\n * [ 0 0 1 ]\n *\n * See @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#translate for more details\n *\n * @param {number} x translation on X axis\n * @param {number} [y] translation on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createTranslateMatrix = (x: number, y = 0): TMat2D => [\n  1,\n  0,\n  0,\n  1,\n  x,\n  y,\n];\n\n/**\n * Generate a rotation matrix around around a point (x,y), defaulting to (0,0)\n *\n * A matrix in the form of\n * [cos(a) -sin(a) -x*cos(a)+y*sin(a)+x]\n * [sin(a)  cos(a) -x*sin(a)-y*cos(a)+y]\n * [0       0      1                 ]\n *\n *\n * @param {TDegree} angle rotation in degrees\n * @param {XY} [pivotPoint] pivot point to rotate around\n * @returns {TMat2D} matrix\n */\nexport function createRotateMatrix(\n  { angle = 0 }: TRotateMatrixArgs = {},\n  { x = 0, y = 0 }: Partial<XY> = {},\n): TMat2D {\n  const angleRadiant = degreesToRadians(angle),\n    cosValue = cos(angleRadiant),\n    sinValue = sin(angleRadiant);\n  return [\n    cosValue,\n    sinValue,\n    -sinValue,\n    cosValue,\n    x ? x - (cosValue * x - sinValue * y) : 0,\n    y ? y - (sinValue * x + cosValue * y) : 0,\n  ];\n}\n\n/**\n * Generate a scale matrix around the point (0,0)\n *\n * A matrix in the form of\n * [x 0 0]\n * [0 y 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#scale\n *\n * @param {number} x scale on X axis\n * @param {number} [y] scale on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createScaleMatrix = (x: number, y: number = x): TMat2D => [\n  x,\n  0,\n  0,\n  y,\n  0,\n  0,\n];\n\nexport const angleToSkew = (angle: TDegree) =>\n  Math.tan(degreesToRadians(angle));\n\nexport const skewToAngle = (value: TRadian) =>\n  radiansToDegrees(Math.atan(value));\n\n/**\n * Generate a skew matrix for the X axis\n *\n * A matrix in the form of\n * [1 x 0]\n * [0 1 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#skewx\n *\n * @param {TDegree} skewValue translation on X axis\n * @returns {TMat2D} matrix\n */\nexport const createSkewXMatrix = (skewValue: TDegree): TMat2D => [\n  1,\n  0,\n  angleToSkew(skewValue),\n  1,\n  0,\n  0,\n];\n\n/**\n * Generate a skew matrix for the Y axis\n *\n * A matrix in the form of\n * [1 0 0]\n * [y 1 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#skewy\n *\n * @param {TDegree} skewValue translation on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createSkewYMatrix = (skewValue: TDegree): TMat2D => [\n  1,\n  angleToSkew(skewValue),\n  0,\n  1,\n  0,\n  0,\n];\n\n/**\n * Returns a transform matrix starting from an object of the same kind of\n * the one returned from qrDecompose, useful also if you want to calculate some\n * transformations from an object that is not enlived yet.\n * is called DimensionsTransformMatrix because those properties are the one that influence\n * the size of the resulting box of the object.\n * @param  {Object} options\n * @param  {Number} [options.scaleX]\n * @param  {Number} [options.scaleY]\n * @param  {Boolean} [options.flipX]\n * @param  {Boolean} [options.flipY]\n * @param  {Number} [options.skewX]\n * @param  {Number} [options.skewY]\n * @return {Number[]} transform matrix\n */\nexport const calcDimensionsMatrix = ({\n  scaleX = 1,\n  scaleY = 1,\n  flipX = false,\n  flipY = false,\n  skewX = 0 as TDegree,\n  skewY = 0 as TDegree,\n}: TScaleMatrixArgs) => {\n  let matrix = createScaleMatrix(\n    flipX ? -scaleX : scaleX,\n    flipY ? -scaleY : scaleY,\n  );\n  if (skewX) {\n    matrix = multiplyTransformMatrices(matrix, createSkewXMatrix(skewX), true);\n  }\n  if (skewY) {\n    matrix = multiplyTransformMatrices(matrix, createSkewYMatrix(skewY), true);\n  }\n  return matrix;\n};\n\n/**\n * Returns a transform matrix starting from an object of the same kind of\n * the one returned from qrDecompose, useful also if you want to calculate some\n * transformations from an object that is not enlived yet\n * Before changing this function look at: src/benchmarks/calcTransformMatrix.mjs\n * @param  {Object} options\n * @param  {Number} [options.angle]\n * @param  {Number} [options.scaleX]\n * @param  {Number} [options.scaleY]\n * @param  {Boolean} [options.flipX]\n * @param  {Boolean} [options.flipY]\n * @param  {Number} [options.skewX]\n * @param  {Number} [options.skewY]\n * @param  {Number} [options.translateX]\n * @param  {Number} [options.translateY]\n * @return {Number[]} transform matrix\n */\nexport const composeMatrix = (options: TComposeMatrixArgs): TMat2D => {\n  const { translateX = 0, translateY = 0, angle = 0 as TDegree } = options;\n  let matrix = createTranslateMatrix(translateX, translateY);\n  if (angle) {\n    matrix = multiplyTransformMatrices(matrix, createRotateMatrix({ angle }));\n  }\n  const scaleMatrix = calcDimensionsMatrix(options);\n  if (!isIdentityMatrix(scaleMatrix)) {\n    matrix = multiplyTransformMatrices(matrix, scaleMatrix);\n  }\n  return matrix;\n};\n", "import { noop } from '../../constants';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport type {\n  Abortable,\n  Constructor,\n  TCrossOrigin,\n  TFiller,\n} from '../../typedefs';\nimport { createImage } from './dom';\nimport { classRegistry } from '../../ClassRegistry';\nimport type { BaseFilter } from '../../filters/BaseFilter';\nimport type { FabricObject as BaseFabricObject } from '../../shapes/Object/Object';\nimport { FabricError, SignalAbortedError } from '../internals/console';\nimport type { Shadow } from '../../Shadow';\n\nexport type LoadImageOptions = Abortable & {\n  /**\n   * cors value for the image loading, default to anonymous\n   */\n  crossOrigin?: TCrossOrigin;\n};\n\n/**\n * Loads image element from given url and resolve it, or catch.\n * @param {String} url URL representing an image\n * @param {LoadImageOptions} [options] image loading options\n * @returns {Promise<HTMLImageElement>} the loaded image.\n */\nexport const loadImage = (\n  url: string,\n  { signal, crossOrigin = null }: LoadImageOptions = {},\n) =>\n  new Promise<HTMLImageElement>(function (resolve, reject) {\n    if (signal && signal.aborted) {\n      return reject(new SignalAbortedError('loadImage'));\n    }\n    const img = createImage();\n    let abort: EventListenerOrEventListenerObject;\n    if (signal) {\n      abort = function (err: Event) {\n        img.src = '';\n        reject(err);\n      };\n      signal.addEventListener('abort', abort, { once: true });\n    }\n    const done = function () {\n      img.onload = img.onerror = null;\n      abort && signal?.removeEventListener('abort', abort);\n      resolve(img);\n    };\n    if (!url) {\n      done();\n      return;\n    }\n    img.onload = done;\n    img.onerror = function () {\n      abort && signal?.removeEventListener('abort', abort);\n      reject(new FabricError(`Error loading ${img.src}`));\n    };\n    crossOrigin && (img.crossOrigin = crossOrigin);\n    img.src = url;\n  });\n\nexport type EnlivenObjectOptions = Abortable & {\n  /**\n   * Method for further parsing of object elements,\n   * called after each fabric object created.\n   */\n  reviver?: <\n    T extends\n      | BaseFabricObject\n      | FabricObject\n      | BaseFilter<string>\n      | Shadow\n      | TFiller,\n  >(\n    serializedObj: Record<string, any>,\n    instance: T,\n  ) => void;\n};\n\n/**\n * @TODO type this correctly.\n * Creates corresponding fabric instances from their object representations\n * @param {Object[]} objects Objects to enliven\n * @param {EnlivenObjectOptions} [options]\n * @param {(serializedObj: object, instance: FabricObject) => any} [options.reviver] Method for further parsing of object elements,\n * called after each fabric object created.\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @returns {Promise<FabricObject[]>}\n */\nexport const enlivenObjects = <\n  T extends\n    | BaseFabricObject\n    | FabricObject\n    | BaseFilter<string>\n    | Shadow\n    | TFiller,\n>(\n  objects: any[],\n  { signal, reviver = noop }: EnlivenObjectOptions = {},\n) =>\n  new Promise<T[]>((resolve, reject) => {\n    const instances: T[] = [];\n    signal && signal.addEventListener('abort', reject, { once: true });\n    Promise.all(\n      objects.map((obj) =>\n        classRegistry\n          .getClass<\n            Constructor<T> & {\n              fromObject(options: any, context: Abortable): Promise<T>;\n            }\n          >(obj.type)\n          .fromObject(obj, { signal })\n          .then((fabricInstance) => {\n            reviver(obj, fabricInstance);\n            instances.push(fabricInstance);\n            return fabricInstance;\n          }),\n      ),\n    )\n      .then(resolve)\n      .catch((error) => {\n        // cleanup\n        instances.forEach((instance) => {\n          (instance as FabricObject).dispose &&\n            (instance as FabricObject).dispose();\n        });\n        reject(error);\n      })\n      .finally(() => {\n        signal && signal.removeEventListener('abort', reject);\n      });\n  });\n\n/**\n * Creates corresponding fabric instances residing in an object, e.g. `clipPath`\n * @param {Object} object with properties to enlive ( fill, stroke, clipPath, path )\n * @param {object} [options]\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @returns {Promise<Record<string, FabricObject | TFiller | null>>} the input object with enlived values\n */\nexport const enlivenObjectEnlivables = <\n  R = Record<string, FabricObject | TFiller | null>,\n>(\n  serializedObject: any,\n  { signal }: Abortable = {},\n) =>\n  new Promise<R>((resolve, reject) => {\n    const instances: (FabricObject | TFiller | Shadow)[] = [];\n    signal && signal.addEventListener('abort', reject, { once: true });\n    // enlive every possible property\n    const promises = Object.values(serializedObject).map((value: any) => {\n      if (!value) {\n        return value;\n      }\n      /**\n       * clipPath or shadow or gradient or text on a path or a pattern,\n       * or the backgroundImage or overlayImage of canvas\n       * If we have a type and there is a classe registered for it, we enlive it.\n       * If there is no class registered for it we return the value as is\n       * */\n      if (value.type && classRegistry.has(value.type)) {\n        return enlivenObjects<FabricObject | Shadow | TFiller>([value], {\n          signal,\n        }).then(([enlived]) => {\n          instances.push(enlived);\n          return enlived;\n        });\n      }\n      return value;\n    });\n    const keys = Object.keys(serializedObject);\n    Promise.all(promises)\n      .then((enlived) => {\n        return enlived.reduce((acc, instance, index) => {\n          acc[keys[index]] = instance;\n          return acc;\n        }, {});\n      })\n      .then(resolve)\n      .catch((error) => {\n        // cleanup\n        instances.forEach((instance: any) => {\n          instance.dispose && instance.dispose();\n        });\n        reject(error);\n      })\n      .finally(() => {\n        signal && signal.removeEventListener('abort', reject);\n      });\n  });\n", "/**\n * Populates an object with properties of another object\n * @param {Object} source Source object\n * @param {string[]} properties Properties names to include\n * @returns object populated with the picked keys\n */\nexport const pick = <T extends Record<string, any>>(\n  source: T,\n  keys: (keyof T)[] = [],\n) => {\n  return keys.reduce((o, key) => {\n    if (key in source) {\n      o[key] = source[key];\n    }\n    return o;\n  }, {} as Partial<T>);\n};\n\nexport const pickBy = <T extends Record<string, any>>(\n  source: T,\n  predicate: <K extends keyof T>(value: T[K], key: K, collection: T) => boolean,\n) => {\n  return (Object.keys(source) as (keyof T)[]).reduce((o, key) => {\n    if (predicate(source[key], key, source)) {\n      o[key] = source[key];\n    }\n    return o;\n  }, {} as Partial<T>);\n};\n", "/**\n * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\n * @param {number|string} number number to operate on\n * @param {number} fractionDigits number of fraction digits to \"leave\"\n * @return {number}\n */\nexport const toFixed = (number: number | string, fractionDigits: number) =>\n  parseFloat(Number(number).toFixed(fractionDigits));\n", "import type { TMat2D } from '../../typedefs';\nimport { toFixed } from './toFixed';\nimport { config } from '../../config';\n\n/**\n * given an array of 6 number returns something like `\"matrix(...numbers)\"`\n * @param {TMat2D} transform an array with 6 numbers\n * @return {String} transform matrix for svg\n */\nexport const matrixToSVG = (transform: TMat2D) =>\n  'matrix(' +\n  transform\n    .map((value) => toFixed(value, config.NUM_FRACTION_DIGITS))\n    .join(' ') +\n  ')';\n", "import type { FabricObject } from '../shapes/Object/Object';\nimport type { TFiller } from '../typedefs';\nimport type { FabricText } from '../shapes/Text/Text';\nimport type { Pattern } from '../Pattern';\nimport type { Path } from '../shapes/Path';\nimport type { ActiveSelection } from '../shapes/ActiveSelection';\n\nexport const isFiller = (\n  filler: TFiller | string | null,\n): filler is TFiller => {\n  return !!filler && (filler as TFiller).toLive !== undefined;\n};\n\nexport const isSerializableFiller = (\n  filler: TFiller | string | null,\n): filler is TFiller => {\n  return !!filler && typeof (filler as TFiller).toObject === 'function';\n};\n\nexport const isPattern = (filler: TFiller): filler is Pattern => {\n  return (\n    !!filler && (filler as Pattern).offsetX !== undefined && 'source' in filler\n  );\n};\n\nexport const isTextObject = (\n  fabricObject?: FabricObject,\n): fabricObject is FabricText => {\n  return (\n    !!fabricObject &&\n    typeof (fabricObject as FabricText)._renderText === 'function'\n  );\n};\n\nexport const isPath = (fabricObject?: FabricObject): fabricObject is Path => {\n  // we could use instanceof but that would mean pulling in Text code for a simple check\n  // @todo discuss what to do and how to do\n  return (\n    !!fabricObject &&\n    typeof (fabricObject as Path)._renderPathCommands === 'function'\n  );\n};\n\nexport const isActiveSelection = (\n  fabricObject?: FabricObject,\n): fabricObject is ActiveSelection =>\n  !!fabricObject && 'multiSelectionStacking' in fabricObject;\n", "/**\n * Returns element scroll offsets\n * @param {HTMLElement} element Element to operate on\n * @return {Object} Object with left/top values\n */\nexport function getScrollLeftTop(element: HTMLElement | null) {\n  const doc = element && getDocumentFromElement(element);\n  let left = 0,\n    top = 0;\n  if (!element || !doc) {\n    return { left, top };\n  }\n  let elementLoop: HTMLElement | Document | ShadowRoot = element;\n  const docElement = doc.documentElement,\n    body = doc.body || {\n      scrollLeft: 0,\n      scrollTop: 0,\n    };\n  // While loop checks (and then sets element to) .parentNode OR .host\n  //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\n  //  but the .parentNode of a root ShadowDOM node will always be null, instead\n  //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\n  while (\n    elementLoop &&\n    (elementLoop.parentNode || (elementLoop as unknown as ShadowRoot).host)\n  ) {\n    elementLoop = (elementLoop.parentNode ||\n      (elementLoop as unknown as ShadowRoot).host) as\n      | HTMLElement\n      | Document\n      | ShadowRoot;\n    if (elementLoop === doc) {\n      left = body.scrollLeft || docElement.scrollLeft || 0;\n      top = body.scrollTop || docElement.scrollTop || 0;\n    } else {\n      left += (elementLoop as HTMLElement).scrollLeft || 0;\n      top += (elementLoop as HTMLElement).scrollTop || 0;\n    }\n\n    if (\n      elementLoop.nodeType === 1 &&\n      (elementLoop as HTMLElement).style.position === 'fixed'\n    ) {\n      break;\n    }\n  }\n\n  return { left, top };\n}\n\nexport const getDocumentFromElement = (el: HTMLElement) =>\n  el.ownerDocument || null;\n\nexport const getWindowFromElement = (el: HTMLElement) =>\n  el.ownerDocument?.defaultView || null;\n", "import { NONE } from '../../constants';\nimport type { TSize } from '../../typedefs';\nimport {\n  getDocumentFromElement,\n  getWindowFromElement,\n  getScrollLeftTop,\n} from '../../util/dom_misc';\n\nexport const setCanvasDimensions = (\n  el: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  { width, height }: TSize,\n  retinaScaling = 1,\n) => {\n  el.width = width;\n  el.height = height;\n  if (retinaScaling > 1) {\n    el.setAttribute('width', (width * retinaScaling).toString());\n    el.setAttribute('height', (height * retinaScaling).toString());\n    ctx.scale(retinaScaling, retinaScaling);\n  }\n};\n\nexport type CSSDimensions = {\n  width: number | string;\n  height: number | string;\n};\n\nexport const setCSSDimensions = (\n  el: HTMLElement,\n  { width, height }: Partial<CSSDimensions>,\n) => {\n  width && (el.style.width = typeof width === 'number' ? `${width}px` : width);\n  height &&\n    (el.style.height = typeof height === 'number' ? `${height}px` : height);\n};\n\n/**\n * Returns offset for a given element\n * @param {HTMLElement} element Element to get offset for\n * @return {Object} Object with \"left\" and \"top\" properties\n */\nexport function getElementOffset(element: HTMLElement) {\n  const doc = element && getDocumentFromElement(element),\n    offset = { left: 0, top: 0 };\n\n  if (!doc) {\n    return offset;\n  }\n  const elemStyle: CSSStyleDeclaration =\n    getWindowFromElement(element)?.getComputedStyle(element, null) ||\n    ({} as CSSStyleDeclaration);\n  offset.left += parseInt(elemStyle.borderLeftWidth, 10) || 0;\n  offset.top += parseInt(elemStyle.borderTopWidth, 10) || 0;\n  offset.left += parseInt(elemStyle.paddingLeft, 10) || 0;\n  offset.top += parseInt(elemStyle.paddingTop, 10) || 0;\n\n  let box = { left: 0, top: 0 };\n\n  const docElem = doc.documentElement;\n  if (typeof element.getBoundingClientRect !== 'undefined') {\n    box = element.getBoundingClientRect();\n  }\n\n  const scrollLeftTop = getScrollLeftTop(element);\n\n  return {\n    left:\n      box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n    top: box.top + scrollLeftTop.top - (docElem.clientTop || 0) + offset.top,\n  };\n}\n\n/**\n * Makes element unselectable\n * @param {HTMLElement} element Element to make unselectable\n * @return {HTMLElement} Element that was passed in\n */\nexport function makeElementUnselectable(element: HTMLElement) {\n  if (typeof element.onselectstart !== 'undefined') {\n    element.onselectstart = () => false;\n  }\n  element.style.userSelect = NONE;\n  return element;\n}\n", "import { getEnv, getFabricDocument } from '../../env';\nimport type { TSize } from '../../typedefs';\nimport type { CSSDimensions } from './util';\nimport { setCSSDimensions, getElementOffset } from './util';\nimport { createCanvasElement, isHTMLCanvas } from '../../util/misc/dom';\nimport { setCanvasDimensions } from './util';\nimport { FabricError } from '../../util/internals/console';\n\nexport type CanvasItem = {\n  el: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n};\n\nexport class StaticCanvasDOMManager {\n  /**\n   * Keeps a copy of the canvas style before setting retina scaling and other potions\n   * in order to return it to original state on dispose\n   * @type string\n   */\n  private _originalCanvasStyle?: string;\n\n  lower: CanvasItem;\n\n  constructor(arg0?: string | HTMLCanvasElement) {\n    const el = this.createLowerCanvas(arg0);\n    this.lower = { el, ctx: el.getContext('2d')! };\n  }\n\n  protected createLowerCanvas(arg0?: HTMLCanvasElement | string) {\n    // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\n    const el = isHTMLCanvas(arg0)\n      ? arg0\n      : (arg0 &&\n          (getFabricDocument().getElementById(arg0) as HTMLCanvasElement)) ||\n        createCanvasElement();\n    if (el.hasAttribute('data-fabric')) {\n      throw new FabricError(\n        'Trying to initialize a canvas that has already been initialized. Did you forget to dispose the canvas?',\n      );\n    }\n    this._originalCanvasStyle = el.style.cssText;\n    el.setAttribute('data-fabric', 'main');\n    el.classList.add('lower-canvas');\n    return el;\n  }\n\n  cleanupDOM({ width, height }: TSize) {\n    const { el } = this.lower;\n    // restore canvas style and attributes\n    el.classList.remove('lower-canvas');\n    el.removeAttribute('data-fabric');\n    // restore canvas size to original size in case retina scaling was applied\n    el.setAttribute('width', `${width}`);\n    el.setAttribute('height', `${height}`);\n    el.style.cssText = this._originalCanvasStyle || '';\n    this._originalCanvasStyle = undefined;\n  }\n\n  setDimensions(size: TSize, retinaScaling: number) {\n    const { el, ctx } = this.lower;\n    setCanvasDimensions(el, ctx, size, retinaScaling);\n  }\n\n  setCSSDimensions(size: Partial<CSSDimensions>) {\n    setCSSDimensions(this.lower.el, size);\n  }\n\n  /**\n   * Calculates canvas element offset relative to the document\n   */\n  calcOffset() {\n    return getElementOffset(this.lower.el);\n  }\n\n  dispose() {\n    getEnv().dispose(this.lower.el);\n    // @ts-expect-error disposing\n    delete this.lower;\n  }\n}\n", "import { iMatrix } from '../constants';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TFiller, TMat2D, TOptions } from '../typedefs';\n\ninterface CanvasDrawableOptions {\n  /**\n   * if set to false background image is not affected by viewport transform\n   * @since 1.6.3\n   * @type Boolean\n   * @todo we should really find a different way to do this\n   * @default\n   */\n  backgroundVpt: boolean;\n\n  /**\n   * Background color of canvas instance.\n   * @type {(String|TFiller)}\n   * @default\n   */\n  backgroundColor: TFiller | string;\n\n  /**\n   * Background image of canvas instance.\n   * since 2.4.0 image caching is active, please when putting an image as background, add to the\n   * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n   * vale. As an alternative you can disable image objectCaching\n   * @type FabricObject\n   * @default\n   */\n  backgroundImage?: FabricObject;\n\n  /**\n   * if set to false overlay image is not affected by viewport transform\n   * @since 1.6.3\n   * @type Boolean\n   * @todo we should really find a different way to do this\n   * @default\n   */\n  overlayVpt: boolean;\n\n  /**\n   * Overlay color of canvas instance.\n   * @since 1.3.9\n   * @type {(String|TFiller)}\n   * @default\n   */\n  overlayColor: TFiller | string;\n\n  /**\n   * Overlay image of canvas instance.\n   * since 2.4.0 image caching is active, please when putting an image as overlay, add to the\n   * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n   * vale. As an alternative you can disable image objectCaching\n   * @type FabricObject\n   * @default\n   */\n  overlayImage?: FabricObject;\n}\n\ninterface CanvasRenderingOptions {\n  /**\n   * Indicates whether {@link StaticCanvas#add}, {@link StaticCanvas#insertAt} and {@link StaticCanvas#remove},\n   * {@link StaticCanvas#moveTo}, {@link StaticCanvas#clear} and many more, should also re-render canvas.\n   * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\n   * since the renders are queued and executed one per frame.\n   * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\n   * Left default to true to do not break documentation and old app, fiddles.\n   * @type Boolean\n   * @default\n   */\n  renderOnAddRemove: boolean;\n\n  /**\n   * Based on vptCoords and object.aCoords, skip rendering of objects that\n   * are not included in current viewport.\n   * May greatly help in applications with crowded canvas and use of zoom/pan\n   * If One of the corner of the bounding box of the object is on the canvas\n   * the objects get rendered.\n   * @type Boolean\n   * @default true\n   */\n  skipOffscreen: boolean;\n\n  /**\n   * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\n   * @type Boolean\n   * @default\n   */\n  enableRetinaScaling: boolean;\n\n  /**\n   * Indicates whether this canvas will use image smoothing, this is on by default in browsers\n   * @type Boolean\n   * @default\n   */\n  imageSmoothingEnabled: boolean;\n\n  /**\n   * a fabricObject that, without stroke define a clipping area with their shape. filled in black\n   * the clipPath object gets used when the canvas has rendered, and the context is placed in the\n   * top left corner of the canvas.\n   * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true\n   * @type FabricObject\n   */\n  clipPath?: FabricObject;\n}\n\nexport interface CanvasExportOptions {\n  /**\n   * Indicates whether toObject/toDatalessObject should include default values\n   * if set to false, takes precedence over the object value.\n   * @type Boolean\n   * @default\n   */\n  includeDefaultValues: boolean;\n\n  /**\n   * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\n   * a zoomed canvas will then produce zoomed SVG output.\n   * @type Boolean\n   * @default\n   */\n  svgViewportTransformation: boolean;\n}\n\nexport interface StaticCanvasOptions\n  extends CanvasDrawableOptions,\n    CanvasRenderingOptions,\n    CanvasExportOptions {\n  /**\n   * Width in virtual/logical pixels of the canvas.\n   * The canvas can be larger than width if retina scaling is active\n   * @type number\n   */\n  width: number;\n\n  /**\n   * Height in virtual/logical pixels of the canvas.\n   * The canvas can be taller than width if retina scaling is active\n   * @type height\n   */\n  height: number;\n\n  /**\n   * Indicates whether object controls (borders/controls) are rendered above overlay image\n   * @type Boolean\n   * @default\n   *\n   * @todo move to Canvas\n   */\n  controlsAboveOverlay: boolean;\n\n  /**\n   * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\n   * It gives PRIORITY to DOM scrolling, it doesn't make it always possible.\n   * If is true, when using a touch event on the canvas, the canvas will scroll if scroll is possible.\n   * If we are in drawing mode or if we are selecting an object the canvas preventDefault and so it won't scroll\n   * @type Boolean\n   * @default\n   *\n   * @todo move to Canvas\n   */\n  allowTouchScrolling: boolean;\n\n  /**\n   * The transformation (a Canvas 2D API transform matrix) which focuses the viewport\n   * @type Array\n   * @example <caption>Default transform</caption>\n   * canvas.viewportTransform = [1, 0, 0, 1, 0, 0];\n   * @example <caption>Scale by 70% and translate toward bottom-right by 50, without skewing</caption>\n   * canvas.viewportTransform = [0.7, 0, 0, 0.7, 50, 50];\n   * @default\n   */\n  viewportTransform: TMat2D;\n}\n\nexport const staticCanvasDefaults: TOptions<StaticCanvasOptions> = {\n  backgroundVpt: true,\n  backgroundColor: '',\n  overlayVpt: true,\n  overlayColor: '',\n\n  includeDefaultValues: true,\n  svgViewportTransformation: true,\n\n  renderOnAddRemove: true,\n  skipOffscreen: true,\n  enableRetinaScaling: true,\n  imageSmoothingEnabled: true,\n\n  /**\n   * @todo move to Canvas\n   */\n  controlsAboveOverlay: false,\n  /**\n   * @todo move to Canvas\n   */\n  allowTouchScrolling: false,\n\n  viewportTransform: [...iMatrix],\n};\n", "import { config } from '../config';\nimport { CENTER, VERSION } from '../constants';\nimport type { CanvasEvents, StaticCanvasEvents } from '../EventTypeDefs';\nimport type { Gradient } from '../gradient/Gradient';\nimport { createCollectionMixin, isCollection } from '../Collection';\nimport { CommonMethods } from '../CommonMethods';\nimport type { Pattern } from '../Pattern';\nimport { Point } from '../Point';\nimport type { TCachedFabricObject } from '../shapes/Object/Object';\nimport type {\n  Abortable,\n  Constructor,\n  TCornerPoint,\n  TDataUrlOptions,\n  TFiller,\n  TMat2D,\n  TSize,\n  TSVGReviver,\n  TToCanvasElementOptions,\n  TValidToObjectMethod,\n  TOptions,\n} from '../typedefs';\nimport {\n  cancelAnimFrame,\n  requestAnimFrame,\n} from '../util/animation/AnimationFrameProvider';\nimport { runningAnimations } from '../util/animation/AnimationRegistry';\nimport { uid } from '../util/internals/uid';\nimport { createCanvasElementFor, toBlob, toDataURL } from '../util/misc/dom';\nimport { invertTransform, transformPoint } from '../util/misc/matrix';\nimport type { EnlivenObjectOptions } from '../util/misc/objectEnlive';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n} from '../util/misc/objectEnlive';\nimport { pick } from '../util/misc/pick';\nimport { matrixToSVG } from '../util/misc/svgExport';\nimport { toFixed } from '../util/misc/toFixed';\nimport { isFiller, isPattern, isTextObject } from '../util/typeAssertions';\nimport { StaticCanvasDOMManager } from './DOMManagers/StaticCanvasDOMManager';\nimport type { CSSDimensions } from './DOMManagers/util';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { StaticCanvasOptions } from './StaticCanvasOptions';\nimport { staticCanvasDefaults } from './StaticCanvasOptions';\nimport { log, FabricError } from '../util/internals/console';\nimport { getDevicePixelRatio } from '../env';\n\n/**\n * Having both options in TCanvasSizeOptions set to true transform the call in a calcOffset\n * Better try to restrict with types to avoid confusion.\n */\nexport type TCanvasSizeOptions =\n  | {\n      backstoreOnly?: true;\n      cssOnly?: false;\n    }\n  | {\n      backstoreOnly?: false;\n      cssOnly?: true;\n    };\n\nexport type TSVGExportOptions = {\n  suppressPreamble?: boolean;\n  viewBox?: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n  encoding?: 'UTF-8'; // test Encoding type and see what happens\n  width?: string;\n  height?: string;\n  reviver?: TSVGReviver;\n};\n\n/**\n * Static canvas class\n * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\n * @fires before:render\n * @fires after:render\n * @fires canvas:cleared\n * @fires object:added\n * @fires object:removed\n */\n// TODO: fix `EventSpec` inheritance https://github.com/microsoft/TypeScript/issues/26154#issuecomment-1366616260\nexport class StaticCanvas<\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    EventSpec extends StaticCanvasEvents = StaticCanvasEvents,\n  >\n  extends createCollectionMixin(CommonMethods<CanvasEvents>)\n  implements StaticCanvasOptions\n{\n  declare width: number;\n  declare height: number;\n\n  // background\n  declare backgroundVpt: boolean;\n  declare backgroundColor: TFiller | string;\n  declare backgroundImage?: FabricObject;\n  // overlay\n  declare overlayVpt: boolean;\n  declare overlayColor: TFiller | string;\n  declare overlayImage?: FabricObject;\n\n  declare clipPath?: FabricObject;\n\n  declare includeDefaultValues: boolean;\n\n  // rendering config\n  declare renderOnAddRemove: boolean;\n  declare skipOffscreen: boolean;\n  declare enableRetinaScaling: boolean;\n  declare imageSmoothingEnabled: boolean;\n\n  /**\n   * @todo move to Canvas\n   */\n  declare controlsAboveOverlay: boolean;\n\n  /**\n   * @todo move to Canvas\n   */\n  declare allowTouchScrolling: boolean;\n\n  declare viewportTransform: TMat2D;\n\n  /**\n   * The viewport bounding box in scene plane coordinates, see {@link calcViewportBoundaries}\n   */\n  declare vptCoords: TCornerPoint;\n\n  /**\n   * A reference to the canvas actual HTMLCanvasElement.\n   * Can be use to read the raw pixels, but never write or manipulate\n   * @type HTMLCanvasElement\n   */\n  get lowerCanvasEl() {\n    return this.elements.lower?.el;\n  }\n\n  get contextContainer() {\n    return this.elements.lower?.ctx;\n  }\n\n  /**\n   * If true the Canvas is in the process or has been disposed/destroyed.\n   * No more rendering operation will be executed on this canvas.\n   * @type boolean\n   */\n  declare destroyed?: boolean;\n\n  /**\n   * Started the process of disposing but not done yet.\n   * WIll likely complete the render cycle already scheduled but stopping adding more.\n   * @type boolean\n   */\n  declare disposed?: boolean;\n\n  declare _offset: { left: number; top: number };\n  protected declare hasLostContext: boolean;\n  protected declare nextRenderHandle: number;\n\n  declare elements: StaticCanvasDOMManager;\n\n  /**\n   * When true control drawing is skipped.\n   * This boolean is used to avoid toDataURL to export controls.\n   * Usage of this boolean to build up other flows and features is not supported\n   * @type Boolean\n   * @default false\n   */\n  protected declare skipControlsDrawing: boolean;\n\n  static ownDefaults = staticCanvasDefaults;\n\n  // reference to\n  protected declare __cleanupTask?: {\n    (): void;\n    kill: (reason?: any) => void;\n  };\n\n  static getDefaults(): Record<string, any> {\n    return StaticCanvas.ownDefaults;\n  }\n\n  constructor(\n    el?: string | HTMLCanvasElement,\n    options: TOptions<StaticCanvasOptions> = {},\n  ) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof StaticCanvas).getDefaults(),\n    );\n    this.set(options);\n    this.initElements(el);\n    this._setDimensionsImpl({\n      width: this.width || this.elements.lower.el.width || 0,\n      height: this.height || this.elements.lower.el.height || 0,\n    });\n    this.skipControlsDrawing = false;\n    this.viewportTransform = [...this.viewportTransform];\n    this.calcViewportBoundaries();\n  }\n\n  protected initElements(el?: string | HTMLCanvasElement) {\n    this.elements = new StaticCanvasDOMManager(el);\n  }\n\n  add(...objects: FabricObject[]) {\n    const size = super.add(...objects);\n    objects.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return size;\n  }\n\n  insertAt(index: number, ...objects: FabricObject[]) {\n    const size = super.insertAt(index, ...objects);\n    objects.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return size;\n  }\n\n  remove(...objects: FabricObject[]) {\n    const removed = super.remove(...objects);\n    removed.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return removed;\n  }\n\n  _onObjectAdded(obj: FabricObject) {\n    if (obj.canvas && (obj.canvas as StaticCanvas) !== this) {\n      log(\n        'warn',\n        'Canvas is trying to add an object that belongs to a different canvas.\\n' +\n          'Resulting to default behavior: removing object from previous canvas and adding to new canvas',\n      );\n      obj.canvas.remove(obj);\n    }\n    obj._set('canvas', this);\n    obj.setCoords();\n    this.fire('object:added', { target: obj });\n    obj.fire('added', { target: this });\n  }\n\n  _onObjectRemoved(obj: FabricObject) {\n    obj._set('canvas', undefined);\n    this.fire('object:removed', { target: obj });\n    obj.fire('removed', { target: this });\n  }\n\n  _onStackOrderChanged() {\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * @private\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n   * @return {Number} retinaScaling if applied, otherwise 1;\n   */\n  getRetinaScaling() {\n    return this.enableRetinaScaling ? getDevicePixelRatio() : 1;\n  }\n\n  /**\n   * Calculates canvas element offset relative to the document\n   * This method is also attached as \"resize\" event handler of window\n   */\n  calcOffset() {\n    return (this._offset = this.elements.calcOffset());\n  }\n\n  /**\n   * Returns canvas width (in px)\n   * @return {Number}\n   */\n  getWidth(): number {\n    return this.width;\n  }\n\n  /**\n   * Returns canvas height (in px)\n   * @return {Number}\n   */\n  getHeight(): number {\n    return this.height;\n  }\n\n  /**\n   * Sets width of this canvas instance\n   * @param {Number|String} value                         Value to set width to\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   * @deprecated will be removed in 7.0\n   */\n  setWidth(\n    value: TSize['width'],\n    options?: { backstoreOnly?: true; cssOnly?: false },\n  ): void;\n  setWidth(\n    value: CSSDimensions['width'],\n    options?: { cssOnly?: true; backstoreOnly?: false },\n  ): void;\n  setWidth(value: number, options?: never) {\n    return this.setDimensions({ width: value }, options);\n  }\n\n  /**s\n   * Sets height of this canvas instance\n   * @param {Number|String} value                         Value to set height to\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   * @deprecated will be removed in 7.0\n   */\n  setHeight(\n    value: TSize['height'],\n    options?: { backstoreOnly?: true; cssOnly?: false },\n  ): void;\n  setHeight(\n    value: CSSDimensions['height'],\n    options?: { cssOnly?: true; backstoreOnly?: false },\n  ): void;\n  setHeight(value: CSSDimensions['height'], options?: never) {\n    return this.setDimensions({ height: value }, options);\n  }\n\n  /**\n   * Internal use only\n   * @protected\n   */\n  protected _setDimensionsImpl(\n    dimensions: Partial<TSize | CSSDimensions>,\n    { cssOnly = false, backstoreOnly = false }: TCanvasSizeOptions = {},\n  ) {\n    if (!cssOnly) {\n      const size = {\n        width: this.width,\n        height: this.height,\n        ...(dimensions as Partial<TSize>),\n      };\n      this.elements.setDimensions(size, this.getRetinaScaling());\n      this.hasLostContext = true;\n      this.width = size.width;\n      this.height = size.height;\n    }\n    if (!backstoreOnly) {\n      this.elements.setCSSDimensions(dimensions);\n    }\n\n    this.calcOffset();\n  }\n\n  /**\n   * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\n   * @param {Object}        dimensions                    Object with width/height properties\n   * @param {Number|String} [dimensions.width]            Width of canvas element\n   * @param {Number|String} [dimensions.height]           Height of canvas element\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   */\n  setDimensions(\n    dimensions: Partial<CSSDimensions>,\n    options?: { cssOnly?: true; backstoreOnly?: false },\n  ): void;\n  setDimensions(\n    dimensions: Partial<TSize>,\n    options?: { backstoreOnly?: true; cssOnly?: false },\n  ): void;\n  setDimensions(dimensions: Partial<TSize>, options?: never): void;\n  setDimensions(\n    dimensions: Partial<TSize | CSSDimensions>,\n    options?: TCanvasSizeOptions,\n  ) {\n    this._setDimensionsImpl(dimensions, options);\n    if (!options || !options.cssOnly) {\n      this.requestRenderAll();\n    }\n  }\n\n  /**\n   * Returns canvas zoom level\n   * @return {Number}\n   */\n  getZoom() {\n    return this.viewportTransform[0];\n  }\n\n  /**\n   * Sets viewport transformation of this canvas instance\n   * @param {Array} vpt a Canvas 2D API transform matrix\n   */\n  setViewportTransform(vpt: TMat2D) {\n    this.viewportTransform = vpt;\n    this.calcViewportBoundaries();\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Sets zoom level of this canvas instance, the zoom centered around point\n   * meaning that following zoom to point with the same point will have the visual\n   * effect of the zoom originating from that point. The point won't move.\n   * It has nothing to do with canvas center or visual center of the viewport.\n   * @param {Point} point to zoom with respect to\n   * @param {Number} value to set zoom to, less than 1 zooms out\n   */\n  zoomToPoint(point: Point, value: number) {\n    // TODO: just change the scale, preserve other transformations\n    const before = point,\n      vpt: TMat2D = [...this.viewportTransform];\n    const newPoint = transformPoint(point, invertTransform(vpt));\n    vpt[0] = value;\n    vpt[3] = value;\n    const after = transformPoint(newPoint, vpt);\n    vpt[4] += before.x - after.x;\n    vpt[5] += before.y - after.y;\n    this.setViewportTransform(vpt);\n  }\n\n  /**\n   * Sets zoom level of this canvas instance\n   * @param {Number} value to set zoom to, less than 1 zooms out\n   */\n  setZoom(value: number) {\n    this.zoomToPoint(new Point(0, 0), value);\n  }\n\n  /**\n   * Pan viewport so as to place point at top left corner of canvas\n   * @param {Point} point to move to\n   */\n  absolutePan(point: Point) {\n    const vpt: TMat2D = [...this.viewportTransform];\n    vpt[4] = -point.x;\n    vpt[5] = -point.y;\n    return this.setViewportTransform(vpt);\n  }\n\n  /**\n   * Pans viewpoint relatively\n   * @param {Point} point (position vector) to move by\n   */\n  relativePan(point: Point) {\n    return this.absolutePan(\n      new Point(\n        -point.x - this.viewportTransform[4],\n        -point.y - this.viewportTransform[5],\n      ),\n    );\n  }\n\n  /**\n   * Returns &lt;canvas> element corresponding to this instance\n   * @return {HTMLCanvasElement}\n   */\n  getElement(): HTMLCanvasElement {\n    return this.elements.lower.el;\n  }\n\n  /**\n   * Clears specified context of canvas element\n   * @param {CanvasRenderingContext2D} ctx Context to clear\n   */\n  clearContext(ctx: CanvasRenderingContext2D) {\n    ctx.clearRect(0, 0, this.width, this.height);\n  }\n\n  /**\n   * Returns context of canvas where objects are drawn\n   * @return {CanvasRenderingContext2D}\n   */\n  getContext(): CanvasRenderingContext2D {\n    return this.elements.lower.ctx;\n  }\n\n  /**\n   * Clears all contexts (background, main, top) of an instance\n   */\n  clear() {\n    this.remove(...this.getObjects());\n    this.backgroundImage = undefined;\n    this.overlayImage = undefined;\n    this.backgroundColor = '';\n    this.overlayColor = '';\n    this.clearContext(this.getContext());\n    this.fire('canvas:cleared');\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Renders the canvas\n   */\n  renderAll() {\n    this.cancelRequestedRender();\n    if (this.destroyed) {\n      return;\n    }\n    this.renderCanvas(this.getContext(), this._objects);\n  }\n\n  /**\n   * Function created to be instance bound at initialization\n   * used in requestAnimationFrame rendering\n   * Let the fabricJS call it. If you call it manually you could have more\n   * animationFrame stacking on to of each other\n   * for an imperative rendering, use canvas.renderAll\n   * @private\n   */\n  renderAndReset() {\n    this.nextRenderHandle = 0;\n    this.renderAll();\n  }\n\n  /**\n   * Append a renderAll request to next animation frame.\n   * unless one is already in progress, in that case nothing is done\n   * a boolean flag will avoid appending more.\n   */\n  requestRenderAll() {\n    if (!this.nextRenderHandle && !this.disposed && !this.destroyed) {\n      this.nextRenderHandle = requestAnimFrame(() => this.renderAndReset());\n    }\n  }\n\n  /**\n   * Calculate the position of the 4 corner of canvas with current viewportTransform.\n   * helps to determinate when an object is in the current rendering viewport\n   */\n  calcViewportBoundaries(): TCornerPoint {\n    const width = this.width,\n      height = this.height,\n      iVpt = invertTransform(this.viewportTransform),\n      a = transformPoint({ x: 0, y: 0 }, iVpt),\n      b = transformPoint({ x: width, y: height }, iVpt),\n      // we don't support vpt flipping\n      // but the code is robust enough to mostly work with flipping\n      min = a.min(b),\n      max = a.max(b);\n    return (this.vptCoords = {\n      tl: min,\n      tr: new Point(max.x, min.y),\n      bl: new Point(min.x, max.y),\n      br: max,\n    });\n  }\n\n  cancelRequestedRender() {\n    if (this.nextRenderHandle) {\n      cancelAnimFrame(this.nextRenderHandle);\n      this.nextRenderHandle = 0;\n    }\n  }\n\n  drawControls(_ctx: CanvasRenderingContext2D) {\n    // Static canvas has no controls\n  }\n\n  /**\n   * Renders background, objects, overlay and controls.\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {Array} objects to render\n   */\n  renderCanvas(ctx: CanvasRenderingContext2D, objects: FabricObject[]) {\n    if (this.destroyed) {\n      return;\n    }\n\n    const v = this.viewportTransform,\n      path = this.clipPath;\n    this.calcViewportBoundaries();\n    this.clearContext(ctx);\n    ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\n    // @ts-expect-error node-canvas stuff\n    ctx.patternQuality = 'best';\n    this.fire('before:render', { ctx });\n    this._renderBackground(ctx);\n\n    ctx.save();\n    //apply viewport transform once for all rendering process\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this._renderObjects(ctx, objects);\n    ctx.restore();\n    if (!this.controlsAboveOverlay && !this.skipControlsDrawing) {\n      this.drawControls(ctx);\n    }\n    if (path) {\n      path._set('canvas', this);\n      // needed to setup a couple of variables\n      // todo migrate to the newer one\n      path.shouldCache();\n      path._transformDone = true;\n      (path as TCachedFabricObject).renderCache({ forClipping: true });\n      this.drawClipPathOnCanvas(ctx, path as TCachedFabricObject);\n    }\n    this._renderOverlay(ctx);\n    if (this.controlsAboveOverlay && !this.skipControlsDrawing) {\n      this.drawControls(ctx);\n    }\n    this.fire('after:render', { ctx });\n\n    if (this.__cleanupTask) {\n      this.__cleanupTask();\n      this.__cleanupTask = undefined;\n    }\n  }\n\n  /**\n   * Paint the cached clipPath on the lowerCanvasEl\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawClipPathOnCanvas(\n    ctx: CanvasRenderingContext2D,\n    clipPath: TCachedFabricObject,\n  ) {\n    const v = this.viewportTransform;\n    ctx.save();\n    ctx.transform(...v);\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4;\n    ctx.globalCompositeOperation = 'destination-in';\n    clipPath.transform(ctx);\n    ctx.scale(1 / clipPath.zoomX, 1 / clipPath.zoomY);\n    ctx.drawImage(\n      clipPath._cacheCanvas,\n      -clipPath.cacheTranslationX,\n      -clipPath.cacheTranslationY,\n    );\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Array} objects to render\n   */\n  _renderObjects(ctx: CanvasRenderingContext2D, objects: FabricObject[]) {\n    for (let i = 0, len = objects.length; i < len; ++i) {\n      objects[i] && objects[i].render(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {string} property 'background' or 'overlay'\n   */\n  _renderBackgroundOrOverlay(\n    ctx: CanvasRenderingContext2D,\n    property: 'background' | 'overlay',\n  ) {\n    const fill = this[`${property}Color`],\n      object = this[`${property}Image`],\n      v = this.viewportTransform,\n      needsVpt = this[`${property}Vpt`];\n    if (!fill && !object) {\n      return;\n    }\n    const isAFiller = isFiller(fill);\n    if (fill) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      ctx.lineTo(this.width, 0);\n      ctx.lineTo(this.width, this.height);\n      ctx.lineTo(0, this.height);\n      ctx.closePath();\n      ctx.fillStyle = isAFiller ? fill.toLive(ctx /* this */)! : fill;\n      if (needsVpt) {\n        ctx.transform(...v);\n      }\n      if (isAFiller) {\n        ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);\n        const m = ((fill as Gradient<'linear'>).gradientTransform ||\n          (fill as Pattern).patternTransform) as TMat2D;\n        m && ctx.transform(...m);\n      }\n      ctx.fill();\n      ctx.restore();\n    }\n    if (object) {\n      ctx.save();\n      const { skipOffscreen } = this;\n      // if the object doesn't move with the viewport,\n      // the offscreen concept does not apply;\n      this.skipOffscreen = needsVpt;\n      if (needsVpt) {\n        ctx.transform(...v);\n      }\n      object.render(ctx);\n      this.skipOffscreen = skipOffscreen;\n      ctx.restore();\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    this._renderBackgroundOrOverlay(ctx, 'background');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderOverlay(ctx: CanvasRenderingContext2D) {\n    this._renderBackgroundOrOverlay(ctx, 'overlay');\n  }\n\n  /**\n   * Returns coordinates of a center of canvas.\n   * Returned value is an object with top and left properties\n   * @return {Object} object with \"top\" and \"left\" number values\n   * @deprecated migrate to `getCenterPoint`\n   */\n  getCenter() {\n    return {\n      top: this.height / 2,\n      left: this.width / 2,\n    };\n  }\n\n  /**\n   * Returns coordinates of a center of canvas.\n   * @return {Point}\n   */\n  getCenterPoint() {\n    return new Point(this.width / 2, this.height / 2);\n  }\n\n  /**\n   * Centers object horizontally in the canvas\n   */\n  centerObjectH(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(this.getCenterPoint().x, object.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object vertically in the canvas\n   * @param {FabricObject} object Object to center vertically\n   */\n  centerObjectV(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(object.getCenterPoint().x, this.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object vertically and horizontally in the canvas\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  centerObject(object: FabricObject) {\n    return this._centerObject(object, this.getCenterPoint());\n  }\n\n  /**\n   * Centers object vertically and horizontally in the viewport\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObject(object: FabricObject) {\n    return this._centerObject(object, this.getVpCenter());\n  }\n\n  /**\n   * Centers object horizontally in the viewport, object.top is unchanged\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObjectH(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(this.getVpCenter().x, object.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object Vertically in the viewport, object.top is unchanged\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObjectV(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(object.getCenterPoint().x, this.getVpCenter().y),\n    );\n  }\n\n  /**\n   * Calculate the point in canvas that correspond to the center of actual viewport.\n   * @return {Point} vpCenter, viewport center\n   */\n  getVpCenter(): Point {\n    return transformPoint(\n      this.getCenterPoint(),\n      invertTransform(this.viewportTransform),\n    );\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object Object to center\n   * @param {Point} center Center point\n   */\n  _centerObject(object: FabricObject, center: Point) {\n    object.setXY(center, CENTER, CENTER);\n    object.setCoords();\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Returns dataless JSON representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {String} json string\n   */\n  toDatalessJSON(propertiesToInclude?: string[]) {\n    return this.toDatalessObject(propertiesToInclude);\n  }\n\n  /**\n   * Returns object representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject(propertiesToInclude?: string[]) {\n    return this._toObjectMethod('toObject', propertiesToInclude);\n  }\n\n  /**\n   * Returns Object representation of canvas\n   * this alias is provided because if you call JSON.stringify on an instance,\n   * the toJSON object will be invoked if it exists.\n   * Having a toJSON method means you can do JSON.stringify(myCanvas)\n   * @return {Object} JSON compatible object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\n   * @example <caption>JSON without additional properties</caption>\n   * var json = canvas.toJSON();\n   * @example <caption>JSON with additional properties included</caption>\n   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY']);\n   * @example <caption>JSON without default values</caption>\n   * var json = canvas.toJSON();\n   */\n  toJSON() {\n    return this.toObject();\n  }\n\n  /**\n   * Returns dataless object representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: string[]) {\n    return this._toObjectMethod('toDatalessObject', propertiesToInclude);\n  }\n\n  /**\n   * @private\n   */\n  _toObjectMethod(\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    const clipPath = this.clipPath;\n    const clipPathData =\n      clipPath && !clipPath.excludeFromExport\n        ? this._toObject(clipPath, methodName, propertiesToInclude)\n        : null;\n    return {\n      version: VERSION,\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      objects: this._objects\n        .filter((object) => !object.excludeFromExport)\n        .map((instance) =>\n          this._toObject(instance, methodName, propertiesToInclude),\n        ),\n      ...this.__serializeBgOverlay(methodName, propertiesToInclude),\n      ...(clipPathData ? { clipPath: clipPathData } : null),\n    };\n  }\n\n  /**\n   * @private\n   */\n  protected _toObject(\n    instance: FabricObject,\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    let originalValue;\n\n    if (!this.includeDefaultValues) {\n      originalValue = instance.includeDefaultValues;\n      instance.includeDefaultValues = false;\n    }\n\n    const object = instance[methodName](propertiesToInclude);\n    if (!this.includeDefaultValues) {\n      instance.includeDefaultValues = !!originalValue;\n    }\n    return object;\n  }\n\n  /**\n   * @private\n   */\n  __serializeBgOverlay(\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    const data: any = {},\n      bgImage = this.backgroundImage,\n      overlayImage = this.overlayImage,\n      bgColor = this.backgroundColor,\n      overlayColor = this.overlayColor;\n\n    if (isFiller(bgColor)) {\n      if (!bgColor.excludeFromExport) {\n        data.background = bgColor.toObject(propertiesToInclude);\n      }\n    } else if (bgColor) {\n      data.background = bgColor;\n    }\n\n    if (isFiller(overlayColor)) {\n      if (!overlayColor.excludeFromExport) {\n        data.overlay = overlayColor.toObject(propertiesToInclude);\n      }\n    } else if (overlayColor) {\n      data.overlay = overlayColor;\n    }\n\n    if (bgImage && !bgImage.excludeFromExport) {\n      data.backgroundImage = this._toObject(\n        bgImage,\n        methodName,\n        propertiesToInclude,\n      );\n    }\n    if (overlayImage && !overlayImage.excludeFromExport) {\n      data.overlayImage = this._toObject(\n        overlayImage,\n        methodName,\n        propertiesToInclude,\n      );\n    }\n\n    return data;\n  }\n\n  /* _TO_SVG_START_ */\n\n  declare svgViewportTransformation: boolean;\n\n  /**\n   * Returns SVG representation of canvas\n   * @function\n   * @param {Object} [options] Options object for SVG output\n   * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\n   * @param {Object} [options.viewBox] SVG viewbox object\n   * @param {Number} [options.viewBox.x] x-coordinate of viewbox\n   * @param {Number} [options.viewBox.y] y-coordinate of viewbox\n   * @param {Number} [options.viewBox.width] Width of viewbox\n   * @param {Number} [options.viewBox.height] Height of viewbox\n   * @param {String} [options.encoding=UTF-8] Encoding of SVG output\n   * @param {String} [options.width] desired width of svg with or without units\n   * @param {String} [options.height] desired height of svg with or without units\n   * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\n   * @return {String} SVG string\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\n   * @example <caption>Normal SVG output</caption>\n   * var svg = canvas.toSVG();\n   * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\n   * var svg = canvas.toSVG({suppressPreamble: true});\n   * @example <caption>SVG output with viewBox attribute</caption>\n   * var svg = canvas.toSVG({\n   *   viewBox: {\n   *     x: 100,\n   *     y: 100,\n   *     width: 200,\n   *     height: 300\n   *   }\n   * });\n   * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\n   * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\n   * @example <caption>Modify SVG output with reviver function</caption>\n   * var svg = canvas.toSVG(null, function(svg) {\n   *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\n   * });\n   */\n  toSVG(options: TSVGExportOptions = {}, reviver?: TSVGReviver) {\n    options.reviver = reviver;\n    const markup: string[] = [];\n\n    this._setSVGPreamble(markup, options);\n    this._setSVGHeader(markup, options);\n    if (this.clipPath) {\n      markup.push(`<g clip-path=\"url(#${this.clipPath.clipPathId})\" >\\n`);\n    }\n    this._setSVGBgOverlayColor(markup, 'background');\n    this._setSVGBgOverlayImage(markup, 'backgroundImage', reviver);\n    this._setSVGObjects(markup, reviver);\n    if (this.clipPath) {\n      markup.push('</g>\\n');\n    }\n    this._setSVGBgOverlayColor(markup, 'overlay');\n    this._setSVGBgOverlayImage(markup, 'overlayImage', reviver);\n\n    markup.push('</svg>');\n\n    return markup.join('');\n  }\n\n  /**\n   * @private\n   */\n  _setSVGPreamble(markup: string[], options: TSVGExportOptions): void {\n    if (options.suppressPreamble) {\n      return;\n    }\n    markup.push(\n      '<?xml version=\"1.0\" encoding=\"',\n      options.encoding || 'UTF-8',\n      '\" standalone=\"no\" ?>\\n',\n      '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\n      '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n',\n    );\n  }\n\n  /**\n   * @private\n   */\n  _setSVGHeader(markup: string[], options: TSVGExportOptions): void {\n    const width = options.width || `${this.width}`,\n      height = options.height || `${this.height}`,\n      NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS,\n      optViewBox = options.viewBox;\n    let viewBox: string;\n    if (optViewBox) {\n      viewBox = `viewBox=\"${optViewBox.x} ${optViewBox.y} ${optViewBox.width} ${optViewBox.height}\" `;\n    } else if (this.svgViewportTransformation) {\n      const vpt = this.viewportTransform;\n      viewBox = `viewBox=\"${toFixed(\n        -vpt[4] / vpt[0],\n        NUM_FRACTION_DIGITS,\n      )} ${toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS)} ${toFixed(\n        this.width / vpt[0],\n        NUM_FRACTION_DIGITS,\n      )} ${toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS)}\" `;\n    } else {\n      viewBox = `viewBox=\"0 0 ${this.width} ${this.height}\" `;\n    }\n\n    markup.push(\n      '<svg ',\n      'xmlns=\"http://www.w3.org/2000/svg\" ',\n      'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\n      'version=\"1.1\" ',\n      'width=\"',\n      width,\n      '\" ',\n      'height=\"',\n      height,\n      '\" ',\n      viewBox,\n      'xml:space=\"preserve\">\\n',\n      '<desc>Created with Fabric.js ',\n      VERSION,\n      '</desc>\\n',\n      '<defs>\\n',\n      this.createSVGFontFacesMarkup(),\n      this.createSVGRefElementsMarkup(),\n      this.createSVGClipPathMarkup(options),\n      '</defs>\\n',\n    );\n  }\n\n  createSVGClipPathMarkup(options: TSVGExportOptions): string {\n    const clipPath = this.clipPath;\n    if (clipPath) {\n      clipPath.clipPathId = `CLIPPATH_${uid()}`;\n      return `<clipPath id=\"${clipPath.clipPathId}\" >\\n${clipPath.toClipPathSVG(\n        options.reviver,\n      )}</clipPath>\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * Creates markup containing SVG referenced elements like patterns, gradients etc.\n   * @return {String}\n   */\n  createSVGRefElementsMarkup(): string {\n    return (['background', 'overlay'] as const)\n      .map((prop) => {\n        const fill = this[`${prop}Color`];\n        if (isFiller(fill)) {\n          const shouldTransform = this[`${prop}Vpt`],\n            vpt = this.viewportTransform,\n            object = {\n              // otherwise circular dependency\n              isType: () => false,\n              width: this.width / (shouldTransform ? vpt[0] : 1),\n              height: this.height / (shouldTransform ? vpt[3] : 1),\n            };\n          return fill.toSVG(object as FabricObject, {\n            additionalTransform: shouldTransform ? matrixToSVG(vpt) : '',\n          });\n        }\n      })\n      .join('');\n  }\n\n  /**\n   * Creates markup containing SVG font faces,\n   * font URLs for font faces must be collected by developers\n   * and are not extracted from the DOM by fabricjs\n   * @param {Array} objects Array of fabric objects\n   * @return {String}\n   */\n  createSVGFontFacesMarkup(): string {\n    const objects: FabricObject[] = [],\n      fontList: Record<string, boolean> = {},\n      fontPaths = config.fontPaths;\n\n    this._objects.forEach(function add(object) {\n      objects.push(object);\n      if (isCollection(object)) {\n        object._objects.forEach(add);\n      }\n    });\n\n    objects.forEach((obj) => {\n      if (!isTextObject(obj)) {\n        return;\n      }\n      const { styles, fontFamily } = obj;\n      if (fontList[fontFamily] || !fontPaths[fontFamily]) {\n        return;\n      }\n      fontList[fontFamily] = true;\n      if (!styles) {\n        return;\n      }\n      Object.values(styles).forEach((styleRow) => {\n        Object.values(styleRow).forEach(({ fontFamily = '' }) => {\n          if (!fontList[fontFamily] && fontPaths[fontFamily]) {\n            fontList[fontFamily] = true;\n          }\n        });\n      });\n    });\n\n    const fontListMarkup = Object.keys(fontList)\n      .map(\n        (fontFamily) =>\n          `\\t\\t@font-face {\\n\\t\\t\\tfont-family: '${fontFamily}';\\n\\t\\t\\tsrc: url('${fontPaths[fontFamily]}');\\n\\t\\t}\\n`,\n      )\n      .join('');\n\n    if (fontListMarkup) {\n      return `\\t<style type=\"text/css\"><![CDATA[\\n${fontListMarkup}]]></style>\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * @private\n   */\n  _setSVGObjects(markup: string[], reviver?: TSVGReviver) {\n    this.forEachObject((fabricObject) => {\n      if (fabricObject.excludeFromExport) {\n        return;\n      }\n      this._setSVGObject(markup, fabricObject, reviver);\n    });\n  }\n\n  /**\n   * This is its own function because the Canvas ( non static ) requires extra code here\n   * @private\n   */\n  _setSVGObject(\n    markup: string[],\n    instance: FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    markup.push(instance.toSVG(reviver));\n  }\n\n  /**\n   * @private\n   */\n  _setSVGBgOverlayImage(\n    markup: string[],\n    property: 'overlayImage' | 'backgroundImage',\n    reviver?: TSVGReviver,\n  ) {\n    const bgOrOverlay = this[property];\n    if (bgOrOverlay && !bgOrOverlay.excludeFromExport && bgOrOverlay.toSVG) {\n      markup.push(bgOrOverlay.toSVG(reviver));\n    }\n  }\n\n  /**\n   * @TODO this seems to handle patterns but fail at gradients.\n   * @private\n   */\n  _setSVGBgOverlayColor(markup: string[], property: 'background' | 'overlay') {\n    const filler = this[`${property}Color`];\n    if (!filler) {\n      return;\n    }\n    if (isFiller(filler)) {\n      const repeat = (filler as Pattern).repeat || '',\n        finalWidth = this.width,\n        finalHeight = this.height,\n        shouldInvert = this[`${property}Vpt`],\n        additionalTransform = shouldInvert\n          ? matrixToSVG(invertTransform(this.viewportTransform))\n          : '';\n      markup.push(\n        `<rect transform=\"${additionalTransform} translate(${finalWidth / 2},${\n          finalHeight / 2\n        })\" x=\"${filler.offsetX - finalWidth / 2}\" y=\"${\n          filler.offsetY - finalHeight / 2\n        }\" width=\"${\n          (repeat === 'repeat-y' || repeat === 'no-repeat') && isPattern(filler)\n            ? (filler.source as HTMLImageElement).width\n            : finalWidth\n        }\" height=\"${\n          (repeat === 'repeat-x' || repeat === 'no-repeat') && isPattern(filler)\n            ? (filler.source as HTMLImageElement).height\n            : finalHeight\n        }\" fill=\"url(#SVGID_${filler.id})\"></rect>\\n`,\n      );\n    } else {\n      markup.push(\n        '<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ',\n        'fill=\"',\n        filler,\n        '\"',\n        '></rect>\\n',\n      );\n    }\n  }\n  /* _TO_SVG_END_ */\n\n  /**\n   * Populates canvas with data from the specified JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\n   *\n   * **IMPORTANT**: It is recommended to abort loading tasks before calling this method to prevent race conditions and unnecessary networking\n   *\n   * @param {String|Object} json JSON string or object\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @param {Object} [options] options\n   * @param {AbortSignal} [options.signal] see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @return {Promise<Canvas | StaticCanvas>} instance\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\n   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\n   * @example <caption>loadFromJSON</caption>\n   * canvas.loadFromJSON(json).then((canvas) => canvas.requestRenderAll());\n   * @example <caption>loadFromJSON with reviver</caption>\n   * canvas.loadFromJSON(json, function(o, object) {\n   *   // `o` = json object\n   *   // `object` = fabric.Object instance\n   *   // ... do some stuff ...\n   * }).then((canvas) => {\n   *   ... canvas is restored, add your code.\n   * });\n   *\n   */\n  loadFromJSON(\n    json: string | Record<string, any>,\n    reviver?: EnlivenObjectOptions['reviver'],\n    { signal }: Abortable = {},\n  ): Promise<this> {\n    if (!json) {\n      return Promise.reject(new FabricError('`json` is undefined'));\n    }\n\n    // parse json if it wasn't already\n    const serialized = typeof json === 'string' ? JSON.parse(json) : json;\n    const {\n      objects = [],\n      backgroundImage,\n      background,\n      overlayImage,\n      overlay,\n      clipPath,\n    } = serialized;\n    const renderOnAddRemove = this.renderOnAddRemove;\n    this.renderOnAddRemove = false;\n\n    return Promise.all([\n      enlivenObjects<FabricObject>(objects, {\n        reviver,\n        signal,\n      }),\n      enlivenObjectEnlivables(\n        {\n          backgroundImage,\n          backgroundColor: background,\n          overlayImage,\n          overlayColor: overlay,\n          clipPath,\n        },\n        { signal },\n      ),\n    ]).then(([enlived, enlivedMap]) => {\n      this.clear();\n      this.add(...enlived);\n      this.set(serialized);\n      this.set(enlivedMap);\n      this.renderOnAddRemove = renderOnAddRemove;\n      return this;\n    });\n  }\n\n  /**\n   * Clones canvas instance\n   * @param {string[]} [properties] Array of properties to include in the cloned canvas and children\n   */\n  clone(properties: string[]) {\n    const data = this.toObject(properties);\n    const canvas = this.cloneWithoutData();\n    return canvas.loadFromJSON(data);\n  }\n\n  /**\n   * Clones canvas instance without cloning existing data.\n   * This essentially copies canvas dimensions since loadFromJSON does not affect canvas size.\n   */\n  cloneWithoutData() {\n    const el = createCanvasElementFor(this);\n    return new (this.constructor as Constructor<this>)(el);\n  }\n\n  /**\n   * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\n   * @param {Object} [options] Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\n   * @param {(object: fabric.Object) => boolean} [options.filter] Function to filter objects.\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   * @see {@link https://jsfiddle.net/xsjua1rd/ demo}\n   * @example <caption>Generate jpeg dataURL with lower quality</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'jpeg',\n   *   quality: 0.8\n   * });\n   * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   left: 100,\n   *   top: 100,\n   *   width: 200,\n   *   height: 200\n   * });\n   * @example <caption>Generate double scaled png dataURL</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   multiplier: 2\n   * });\n   * @example <caption>Generate dataURL with objects that overlap a specified object</caption>\n   * var myObject;\n   * var dataURL = canvas.toDataURL({\n   *   filter: (object) => object.isContainedWithinObject(myObject) || object.intersectsWithObject(myObject)\n   * });\n   */\n  toDataURL(options = {} as TDataUrlOptions): string {\n    const {\n      format = 'png',\n      quality = 1,\n      multiplier = 1,\n      enableRetinaScaling = false,\n    } = options;\n    const finalMultiplier =\n      multiplier * (enableRetinaScaling ? this.getRetinaScaling() : 1);\n\n    return toDataURL(\n      this.toCanvasElement(finalMultiplier, options),\n      format,\n      quality,\n    );\n  }\n  toBlob(options = {} as TDataUrlOptions): Promise<Blob | null> {\n    const {\n      format = 'png',\n      quality = 1,\n      multiplier = 1,\n      enableRetinaScaling = false,\n    } = options;\n    const finalMultiplier =\n      multiplier * (enableRetinaScaling ? this.getRetinaScaling() : 1);\n\n    return toBlob(\n      this.toCanvasElement(finalMultiplier, options),\n      format,\n      quality,\n    );\n  }\n\n  /**\n   * Create a new HTMLCanvas element painted with the current canvas content.\n   * No need to resize the actual one or repaint it.\n   * Will transfer object ownership to a new canvas, paint it, and set everything back.\n   * This is an intermediary step used to get to a dataUrl but also it is useful to\n   * create quick image copies of a canvas without passing for the dataUrl string\n   * @param {Number} [multiplier] a zoom factor.\n   * @param {Object} [options] Cropping informations\n   * @param {Number} [options.left] Cropping left offset.\n   * @param {Number} [options.top] Cropping top offset.\n   * @param {Number} [options.width] Cropping width.\n   * @param {Number} [options.height] Cropping height.\n   * @param {(object: fabric.Object) => boolean} [options.filter] Function to filter objects.\n   */\n  toCanvasElement(\n    multiplier = 1,\n    { width, height, left, top, filter } = {} as TToCanvasElementOptions,\n  ): HTMLCanvasElement {\n    const scaledWidth = (width || this.width) * multiplier,\n      scaledHeight = (height || this.height) * multiplier,\n      zoom = this.getZoom(),\n      originalWidth = this.width,\n      originalHeight = this.height,\n      originalSkipControlsDrawing = this.skipControlsDrawing,\n      newZoom = zoom * multiplier,\n      vp = this.viewportTransform,\n      translateX = (vp[4] - (left || 0)) * multiplier,\n      translateY = (vp[5] - (top || 0)) * multiplier,\n      newVp = [newZoom, 0, 0, newZoom, translateX, translateY] as TMat2D,\n      originalRetina = this.enableRetinaScaling,\n      canvasEl = createCanvasElementFor({\n        width: scaledWidth,\n        height: scaledHeight,\n      }),\n      objectsToRender = filter\n        ? this._objects.filter((obj) => filter(obj))\n        : this._objects;\n    this.enableRetinaScaling = false;\n    this.viewportTransform = newVp;\n    this.width = scaledWidth;\n    this.height = scaledHeight;\n    this.skipControlsDrawing = true;\n    this.calcViewportBoundaries();\n    this.renderCanvas(canvasEl.getContext('2d')!, objectsToRender);\n    this.viewportTransform = vp;\n    this.width = originalWidth;\n    this.height = originalHeight;\n    this.calcViewportBoundaries();\n    this.enableRetinaScaling = originalRetina;\n    this.skipControlsDrawing = originalSkipControlsDrawing;\n    return canvasEl;\n  }\n\n  /**\n   * Waits until rendering has settled to destroy the canvas\n   * @returns {Promise<boolean>} a promise resolving to `true` once the canvas has been destroyed or to `false` if the canvas has was already destroyed\n   * @throws if aborted by a consequent call\n   */\n  dispose() {\n    !this.disposed &&\n      this.elements.cleanupDOM({ width: this.width, height: this.height });\n    runningAnimations.cancelByCanvas(this);\n    this.disposed = true;\n    return new Promise<boolean>((resolve, reject) => {\n      const task = () => {\n        this.destroy();\n        resolve(true);\n      };\n      task.kill = reject;\n      if (this.__cleanupTask) {\n        this.__cleanupTask.kill('aborted');\n      }\n\n      if (this.destroyed) {\n        resolve(false);\n      } else if (this.nextRenderHandle) {\n        this.__cleanupTask = task;\n      } else {\n        task();\n      }\n    });\n  }\n\n  /**\n   * Clears the canvas element, disposes objects and frees resources.\n   *\n   * Invoked as part of the **async** operation of {@link dispose}.\n   *\n   * **CAUTION**:\n   *\n   * This method is **UNSAFE**.\n   * You may encounter a race condition using it if there's a requested render.\n   * Call this method only if you are sure rendering has settled.\n   * Consider using {@link dispose} as it is **SAFE**\n   *\n   * @private\n   */\n  destroy() {\n    this.destroyed = true;\n    this.cancelRequestedRender();\n    this.forEachObject((object) => object.dispose());\n    this._objects = [];\n    if (this.backgroundImage) {\n      this.backgroundImage.dispose();\n    }\n    this.backgroundImage = undefined;\n    if (this.overlayImage) {\n      this.overlayImage.dispose();\n    }\n    this.overlayImage = undefined;\n    this.elements.dispose();\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String} string representation of an instance\n   */\n  toString() {\n    return `#<Canvas (${this.complexity()}): { objects: ${\n      this._objects.length\n    } }>`;\n  }\n}\n", "import type { TPointerEvent } from '../EventTypeDefs';\nimport { Point } from '../Point';\nimport { getScrollLeftTop } from './dom_misc';\n\nconst touchEvents = ['touchstart', 'touchmove', 'touchend'];\n\nfunction getTouchInfo(event: TouchEvent | MouseEvent): MouseEvent | Touch {\n  const touchProp = (event as TouchEvent).changedTouches;\n  if (touchProp && touchProp[0]) {\n    return touchProp[0];\n  }\n  return event as MouseEvent;\n}\n\nexport const getPointer = (event: TPointerEvent): Point => {\n  const element = event.target as HTMLElement,\n    scroll = getScrollLeftTop(element),\n    _evt = getTouchInfo(event);\n  return new Point(_evt.clientX + scroll.left, _evt.clientY + scroll.top);\n};\n\nexport const isTouchEvent = (event: TPointerEvent) =>\n  touchEvents.includes(event.type) ||\n  (event as PointerEvent).pointerType === 'touch';\n\nexport const stopEvent = (e: Event) => {\n  e.preventDefault();\n  e.stopPropagation();\n};\n", "import type { XY } from '../../Point';\nimport type { TBBox } from '../../typedefs';\n\n/**\n * Calculates bounding box (left, top, width, height) from given `points`\n * @param {XY[]} points\n * @return {Object} Object with left, top, width, height properties\n */\nexport const makeBoundingBoxFromPoints = (points: XY[]): TBBox => {\n  let left = 0,\n    top = 0,\n    width = 0,\n    height = 0;\n\n  for (let i = 0, len = points.length; i < len; i++) {\n    const { x, y } = points[i];\n    if (x > width || !i) width = x;\n    if (x < left || !i) left = x;\n    if (y > height || !i) height = y;\n    if (y < top || !i) top = y;\n  }\n\n  return {\n    left,\n    top,\n    width: width - left,\n    height: height - top,\n  };\n};\n", "import { Point } from '../../Point';\nimport { CENTER } from '../../constants';\nimport type { FabricObject } from '../../shapes/Object/Object';\nimport type { TMat2D } from '../../typedefs';\nimport { makeBoundingBoxFromPoints } from './boundingBoxFromPoints';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from './matrix';\n\n/**\n * given an object and a transform, apply the inverse transform to the object,\n * this is equivalent to remove from that object that transformation, so that\n * added in a space with the removed transform, the object will be the same as before.\n * Removing from an object a transform that scale by 2 is like scaling it by 1/2.\n * Removing from an object a transform that rotate by 30deg is like rotating by 30deg\n * in the opposite direction.\n * This util is used to add objects inside transformed groups or nested groups.\n * @param {FabricObject} object the object you want to transform\n * @param {TMat2D} transform the destination transform\n */\nexport const removeTransformFromObject = (\n  object: FabricObject,\n  transform: TMat2D,\n) => {\n  const inverted = invertTransform(transform),\n    finalTransform = multiplyTransformMatrices(\n      inverted,\n      object.calcOwnMatrix(),\n    );\n  applyTransformToObject(object, finalTransform);\n};\n\n/**\n * given an object and a transform, apply the transform to the object.\n * this is equivalent to change the space where the object is drawn.\n * Adding to an object a transform that scale by 2 is like scaling it by 2.\n * This is used when removing an object from an active selection for example.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const addTransformToObject = (object: FabricObject, transform: TMat2D) =>\n  applyTransformToObject(\n    object,\n    multiplyTransformMatrices(transform, object.calcOwnMatrix()),\n  );\n\n/**\n * discard an object transform state and apply the one from the matrix.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const applyTransformToObject = (\n  object: FabricObject,\n  transform: TMat2D,\n) => {\n  const { translateX, translateY, scaleX, scaleY, ...otherOptions } =\n      qrDecompose(transform),\n    center = new Point(translateX, translateY);\n  object.flipX = false;\n  object.flipY = false;\n  Object.assign(object, otherOptions);\n  object.set({ scaleX, scaleY });\n  object.setPositionByOrigin(center, CENTER, CENTER);\n};\n/**\n * reset an object transform state to neutral. Top and left are not accounted for\n * @param  {FabricObject} target object to transform\n */\nexport const resetObjectTransform = (target: FabricObject) => {\n  target.scaleX = 1;\n  target.scaleY = 1;\n  target.skewX = 0;\n  target.skewY = 0;\n  target.flipX = false;\n  target.flipY = false;\n  target.rotate(0);\n};\n\n/**\n * Extract Object transform values\n * @param  {FabricObject} target object to read from\n * @return {Object} Components of transform\n */\nexport const saveObjectTransform = (target: FabricObject) => ({\n  scaleX: target.scaleX,\n  scaleY: target.scaleY,\n  skewX: target.skewX,\n  skewY: target.skewY,\n  angle: target.angle,\n  left: target.left,\n  flipX: target.flipX,\n  flipY: target.flipY,\n  top: target.top,\n});\n\n/**\n * given a width and height, return the size of the bounding box\n * that can contains the box with width/height with applied transform.\n * Use to calculate the boxes around objects for controls.\n * @param {Number} width\n * @param {Number} height\n * @param {TMat2D} t\n * @returns {Point} size\n */\nexport const sizeAfterTransform = (\n  width: number,\n  height: number,\n  t: TMat2D,\n) => {\n  const dimX = width / 2,\n    dimY = height / 2,\n    points = [\n      new Point(-dimX, -dimY),\n      new Point(dimX, -dimY),\n      new Point(-dimX, dimY),\n      new Point(dimX, dimY),\n    ].map((p) => p.transform(t)),\n    bbox = makeBoundingBoxFromPoints(points);\n  return new Point(bbox.width, bbox.height);\n};\n", "import { iMatrix } from '../../constants';\nimport type { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/Object';\nimport type { TMat2D } from '../../typedefs';\nimport { invertTransform, multiplyTransformMatrices } from './matrix';\nimport { applyTransformToObject } from './objectTransforms';\n\n/**\n * We are actually looking for the transformation from the destination plane to the source plane (change of basis matrix)\\\n * The object will exist on the destination plane and we want it to seem unchanged by it so we invert the destination matrix (`to`) and then apply the source matrix (`from`)\n * @param [from]\n * @param [to]\n * @returns\n */\nexport const calcPlaneChangeMatrix = (\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n) => multiplyTransformMatrices(invertTransform(to), from);\n\n/**\n * Sends a point from the source coordinate plane to the destination coordinate plane.\\\n * From the canvas/viewer's perspective the point remains unchanged.\n *\n * @example <caption>Send point from canvas plane to group plane</caption>\n * var obj = new Rect({ left: 20, top: 20, width: 60, height: 60, strokeWidth: 0 });\n * var group = new Group([obj], { strokeWidth: 0 });\n * var sentPoint1 = sendPointToPlane(new Point(50, 50), undefined, group.calcTransformMatrix());\n * var sentPoint2 = sendPointToPlane(new Point(50, 50), iMatrix, group.calcTransformMatrix());\n * console.log(sentPoint1, sentPoint2) //  both points print (0,0) which is the center of group\n *\n * @param {Point} point\n * @param {TMat2D} [from] plane matrix containing object. Passing `undefined` is equivalent to passing the identity matrix, which means `point` exists in the canvas coordinate plane.\n * @param {TMat2D} [to] destination plane matrix to contain object. Passing `undefined` means `point` should be sent to the canvas coordinate plane.\n * @returns {Point} transformed point\n */\nexport const sendPointToPlane = (\n  point: Point,\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n): Point => point.transform(calcPlaneChangeMatrix(from, to));\n\n/**\n * See {@link sendPointToPlane}\n */\nexport const sendVectorToPlane = (\n  point: Point,\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n): Point => point.transform(calcPlaneChangeMatrix(from, to), true);\n\n/**\n *\n * A util that abstracts applying transform to objects.\\\n * Sends `object` to the destination coordinate plane by applying the relevant transformations.\\\n * Changes the space/plane where `object` is drawn.\\\n * From the canvas/viewer's perspective `object` remains unchanged.\n *\n * @example <caption>Move clip path from one object to another while preserving it's appearance as viewed by canvas/viewer</caption>\n * let obj, obj2;\n * let clipPath = new Circle({ radius: 50 });\n * obj.clipPath = clipPath;\n * // render\n * sendObjectToPlane(clipPath, obj.calcTransformMatrix(), obj2.calcTransformMatrix());\n * obj.clipPath = undefined;\n * obj2.clipPath = clipPath;\n * // render, clipPath now clips obj2 but seems unchanged from the eyes of the viewer\n *\n * @example <caption>Clip an object's clip path with an existing object</caption>\n * let obj, existingObj;\n * let clipPath = new Circle({ radius: 50 });\n * obj.clipPath = clipPath;\n * let transformTo = multiplyTransformMatrices(obj.calcTransformMatrix(), clipPath.calcTransformMatrix());\n * sendObjectToPlane(existingObj, existingObj.group?.calcTransformMatrix(), transformTo);\n * clipPath.clipPath = existingObj;\n *\n * @param {FabricObject} object\n * @param {Matrix} [from] plane matrix containing object. Passing `undefined` is equivalent to passing the identity matrix, which means `object` is a direct child of canvas.\n * @param {Matrix} [to] destination plane matrix to contain object. Passing `undefined` means `object` should be sent to the canvas coordinate plane.\n * @returns {Matrix} the transform matrix that was applied to `object`\n */\nexport const sendObjectToPlane = (\n  object: FabricObject,\n  from?: TMat2D,\n  to?: TMat2D,\n): TMat2D => {\n  const t = calcPlaneChangeMatrix(from, to);\n  applyTransformToObject(\n    object,\n    multiplyTransformMatrices(t, object.calcOwnMatrix()),\n  );\n  return t;\n};\n", "import type {\n  ObjectModificationEvents,\n  TModificationEvents,\n} from '../EventTypeDefs';\n\nexport const fireEvent = (\n  eventName: TModificationEvents,\n  options: ObjectModificationEvents[typeof eventName],\n) => {\n  const {\n    transform: { target },\n  } = options;\n  target.canvas?.fire(`object:${eventName}`, {\n    ...options,\n    target,\n  });\n  target.fire(eventName, options);\n};\n", "import type { TOriginX, TOriginY } from '../../typedefs';\n\nconst originOffset = {\n  left: -0.5,\n  top: -0.5,\n  center: 0,\n  bottom: 0.5,\n  right: 0.5,\n};\n/**\n * Resolves origin value relative to center\n * @private\n * @param {TOriginX | TOriginY} originValue originX / originY\n * @returns number\n */\n\nexport const resolveOrigin = (\n  originValue: TOriginX | TOriginY | number,\n): number =>\n  typeof originValue === 'string'\n    ? originOffset[originValue]\n    : originValue - 0.5;\n", "import type {\n  TPointerEvent,\n  Transform,\n  TransformAction,\n  BasicTransformEvent,\n} from '../EventTypeDefs';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { Point } from '../Point';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TOriginX, TOriginY } from '../typedefs';\nimport {\n  degreesToRadians,\n  radiansToDegrees,\n} from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\nimport { CENTER } from '../constants';\n\nexport const NOT_ALLOWED_CURSOR = 'not-allowed';\n\n/**\n * @param {Boolean} alreadySelected true if target is already selected\n * @param {String} corner a string representing the corner ml, mr, tl ...\n * @param {Event} e Event object\n * @param {FabricObject} [target] inserted back to help overriding. Unused\n */\nexport const getActionFromCorner = (\n  alreadySelected: boolean,\n  corner: string | undefined,\n  e: TPointerEvent,\n  target: FabricObject,\n) => {\n  if (!corner || !alreadySelected) {\n    return 'drag';\n  }\n  const control = target.controls[corner];\n  return control.getActionName(e, control, target);\n};\n\n/**\n * Checks if transform is centered\n * @param {Object} transform transform data\n * @return {Boolean} true if transform is centered\n */\nexport function isTransformCentered(transform: Transform) {\n  return (\n    resolveOrigin(transform.originX) === resolveOrigin(CENTER) &&\n    resolveOrigin(transform.originY) === resolveOrigin(CENTER)\n  );\n}\n\nexport function invertOrigin(origin: TOriginX | TOriginY) {\n  return -resolveOrigin(origin) + 0.5;\n}\n\nexport const isLocked = (\n  target: FabricObject,\n  lockingKey:\n    | 'lockMovementX'\n    | 'lockMovementY'\n    | 'lockRotation'\n    | 'lockScalingX'\n    | 'lockScalingY'\n    | 'lockSkewingX'\n    | 'lockSkewingY'\n    | 'lockScalingFlip',\n) => target[lockingKey];\n\nexport const commonEventInfo: TransformAction<\n  Transform,\n  BasicTransformEvent\n> = (eventData, transform, x, y) => {\n  return {\n    e: eventData,\n    transform,\n    pointer: new Point(x, y),\n  };\n};\n\n/**\n * Combine control position and object angle to find the control direction compared\n * to the object center.\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n * @param {Control} control the control class\n * @return {Number} 0 - 7 a quadrant number\n */\nexport function findCornerQuadrant(\n  fabricObject: FabricObject,\n  control: Control,\n): number {\n  //  angle is relative to canvas plane\n  const angle = fabricObject.getTotalAngle(),\n    cornerAngle =\n      angle + radiansToDegrees(Math.atan2(control.y, control.x)) + 360;\n  return Math.round((cornerAngle % 360) / 45);\n}\n\n/**\n * @returns the normalized point (rotated relative to center) in local coordinates\n */\nfunction normalizePoint(\n  target: FabricObject,\n  point: Point,\n  originX: TOriginX,\n  originY: TOriginY,\n): Point {\n  const center = target.getRelativeCenterPoint(),\n    p =\n      typeof originX !== 'undefined' && typeof originY !== 'undefined'\n        ? target.translateToGivenOrigin(\n            center,\n            CENTER,\n            CENTER,\n            originX,\n            originY,\n          )\n        : new Point(target.left, target.top),\n    p2 = target.angle\n      ? point.rotate(-degreesToRadians(target.angle), center)\n      : point;\n  return p2.subtract(p);\n}\n\n/**\n * Transforms a point to the offset from the given origin\n * @param {Object} transform\n * @param {String} originX\n * @param {String} originY\n * @param {number} x\n * @param {number} y\n * @return {Fabric.Point} the normalized point\n */\nexport function getLocalPoint(\n  { target, corner }: Transform,\n  originX: TOriginX,\n  originY: TOriginY,\n  x: number,\n  y: number,\n) {\n  const control = target.controls[corner],\n    zoom = target.canvas?.getZoom() || 1,\n    padding = target.padding / zoom,\n    localPoint = normalizePoint(target, new Point(x, y), originX, originY);\n  if (localPoint.x >= padding) {\n    localPoint.x -= padding;\n  }\n  if (localPoint.x <= -padding) {\n    localPoint.x += padding;\n  }\n  if (localPoint.y >= padding) {\n    localPoint.y -= padding;\n  }\n  if (localPoint.y <= padding) {\n    localPoint.y += padding;\n  }\n  localPoint.x -= control.offsetX;\n  localPoint.y -= control.offsetY;\n  return localPoint;\n}\n", "import type { TransformActionHandler } from '../EventTypeDefs';\nimport { LEFT, TOP, MOVING } from '../constants';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo, isLocked } from './util';\n\n/**\n * Action handler\n * @private\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if the translation occurred\n */\nexport const dragHandler: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const { target, offsetX, offsetY } = transform,\n    newLeft = x - offsetX,\n    newTop = y - offsetY,\n    moveX = !isLocked(target, 'lockMovementX') && target.left !== newLeft,\n    moveY = !isLocked(target, 'lockMovementY') && target.top !== newTop;\n  moveX && target.set(LEFT, newLeft);\n  moveY && target.set(TOP, newTop);\n  if (moveX || moveY) {\n    fireEvent(MOVING, commonEventInfo(eventData, transform, x, y));\n  }\n  return moveX || moveY;\n};\n", "/**\n * Map of the 148 color names with HEX code\n * @see: https://www.w3.org/TR/css3-color/#svg-color\n */\nexport const ColorNameMap = {\n  aliceblue: '#F0F8FF',\n  antiquewhite: '#FAEBD7',\n  aqua: '#0FF',\n  aquamarine: '#7FFFD4',\n  azure: '#F0FFFF',\n  beige: '#F5F5DC',\n  bisque: '#FFE4C4',\n  black: '#000',\n  blanchedalmond: '#FFEBCD',\n  blue: '#00F',\n  blueviolet: '#8A2BE2',\n  brown: '#A52A2A',\n  burlywood: '#DEB887',\n  cadetblue: '#5F9EA0',\n  chartreuse: '#7FFF00',\n  chocolate: '#D2691E',\n  coral: '#FF7F50',\n  cornflowerblue: '#6495ED',\n  cornsilk: '#FFF8DC',\n  crimson: '#DC143C',\n  cyan: '#0FF',\n  darkblue: '#00008B',\n  darkcyan: '#008B8B',\n  darkgoldenrod: '#B8860B',\n  darkgray: '#A9A9A9',\n  darkgrey: '#A9A9A9',\n  darkgreen: '#006400',\n  darkkhaki: '#BDB76B',\n  darkmagenta: '#8B008B',\n  darkolivegreen: '#556B2F',\n  darkorange: '#FF8C00',\n  darkorchid: '#9932CC',\n  darkred: '#8B0000',\n  darksalmon: '#E9967A',\n  darkseagreen: '#8FBC8F',\n  darkslateblue: '#483D8B',\n  darkslategray: '#2F4F4F',\n  darkslategrey: '#2F4F4F',\n  darkturquoise: '#00CED1',\n  darkviolet: '#9400D3',\n  deeppink: '#FF1493',\n  deepskyblue: '#00BFFF',\n  dimgray: '#696969',\n  dimgrey: '#696969',\n  dodgerblue: '#1E90FF',\n  firebrick: '#B22222',\n  floralwhite: '#FFFAF0',\n  forestgreen: '#228B22',\n  fuchsia: '#F0F',\n  gainsboro: '#DCDCDC',\n  ghostwhite: '#F8F8FF',\n  gold: '#FFD700',\n  goldenrod: '#DAA520',\n  gray: '#808080',\n  grey: '#808080',\n  green: '#008000',\n  greenyellow: '#ADFF2F',\n  honeydew: '#F0FFF0',\n  hotpink: '#FF69B4',\n  indianred: '#CD5C5C',\n  indigo: '#4B0082',\n  ivory: '#FFFFF0',\n  khaki: '#F0E68C',\n  lavender: '#E6E6FA',\n  lavenderblush: '#FFF0F5',\n  lawngreen: '#7CFC00',\n  lemonchiffon: '#FFFACD',\n  lightblue: '#ADD8E6',\n  lightcoral: '#F08080',\n  lightcyan: '#E0FFFF',\n  lightgoldenrodyellow: '#FAFAD2',\n  lightgray: '#D3D3D3',\n  lightgrey: '#D3D3D3',\n  lightgreen: '#90EE90',\n  lightpink: '#FFB6C1',\n  lightsalmon: '#FFA07A',\n  lightseagreen: '#20B2AA',\n  lightskyblue: '#87CEFA',\n  lightslategray: '#789',\n  lightslategrey: '#789',\n  lightsteelblue: '#B0C4DE',\n  lightyellow: '#FFFFE0',\n  lime: '#0F0',\n  limegreen: '#32CD32',\n  linen: '#FAF0E6',\n  magenta: '#F0F',\n  maroon: '#800000',\n  mediumaquamarine: '#66CDAA',\n  mediumblue: '#0000CD',\n  mediumorchid: '#BA55D3',\n  mediumpurple: '#9370DB',\n  mediumseagreen: '#3CB371',\n  mediumslateblue: '#7B68EE',\n  mediumspringgreen: '#00FA9A',\n  mediumturquoise: '#48D1CC',\n  mediumvioletred: '#C71585',\n  midnightblue: '#191970',\n  mintcream: '#F5FFFA',\n  mistyrose: '#FFE4E1',\n  moccasin: '#FFE4B5',\n  navajowhite: '#FFDEAD',\n  navy: '#000080',\n  oldlace: '#FDF5E6',\n  olive: '#808000',\n  olivedrab: '#6B8E23',\n  orange: '#FFA500',\n  orangered: '#FF4500',\n  orchid: '#DA70D6',\n  palegoldenrod: '#EEE8AA',\n  palegreen: '#98FB98',\n  paleturquoise: '#AFEEEE',\n  palevioletred: '#DB7093',\n  papayawhip: '#FFEFD5',\n  peachpuff: '#FFDAB9',\n  peru: '#CD853F',\n  pink: '#FFC0CB',\n  plum: '#DDA0DD',\n  powderblue: '#B0E0E6',\n  purple: '#800080',\n  rebeccapurple: '#639',\n  red: '#F00',\n  rosybrown: '#BC8F8F',\n  royalblue: '#4169E1',\n  saddlebrown: '#8B4513',\n  salmon: '#FA8072',\n  sandybrown: '#F4A460',\n  seagreen: '#2E8B57',\n  seashell: '#FFF5EE',\n  sienna: '#A0522D',\n  silver: '#C0C0C0',\n  skyblue: '#87CEEB',\n  slateblue: '#6A5ACD',\n  slategray: '#708090',\n  slategrey: '#708090',\n  snow: '#FFFAFA',\n  springgreen: '#00FF7F',\n  steelblue: '#4682B4',\n  tan: '#D2B48C',\n  teal: '#008080',\n  thistle: '#D8BFD8',\n  tomato: '#FF6347',\n  turquoise: '#40E0D0',\n  violet: '#EE82EE',\n  wheat: '#F5DEB3',\n  white: '#FFF',\n  whitesmoke: '#F5F5F5',\n  yellow: '#FF0',\n  yellowgreen: '#9ACD32',\n};\n", "import type { TRGBAColorSource } from './typedefs';\n\n/**\n * @param {Number} p\n * @param {Number} q\n * @param {Number} t\n * @return {Number}\n */\nexport const hue2rgb = (p: number, q: number, t: number): number => {\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n};\n\n/**\n * Adapted from {@link https://gist.github.com/mjackson/5311256 https://gist.github.com/mjackson}\n * @param {Number} r Red color value\n * @param {Number} g Green color value\n * @param {Number} b Blue color value\n * @param {Number} a Alpha color value pass through\n * @return {TRGBColorSource} Hsl color\n */\nexport const rgb2Hsl = (\n  r: number,\n  g: number,\n  b: number,\n  a: number,\n): TRGBAColorSource => {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  const maxValue = Math.max(r, g, b),\n    minValue = Math.min(r, g, b);\n\n  let h!: number, s: number;\n  const l = (maxValue + minValue) / 2;\n\n  if (maxValue === minValue) {\n    h = s = 0; // achromatic\n  } else {\n    const d = maxValue - minValue;\n    s = l > 0.5 ? d / (2 - maxValue - minValue) : d / (maxValue + minValue);\n    switch (maxValue) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100), a];\n};\n\nexport const fromAlphaToFloat = (value = '1') =>\n  parseFloat(value) / (value.endsWith('%') ? 100 : 1);\n\n/**\n * Convert a value in the inclusive range [0, 255] to hex\n */\nexport const hexify = (value: number) =>\n  Math.min(Math.round(value), 255).toString(16).toUpperCase().padStart(2, '0');\n\n/**\n * Calculate the grey average value for rgb and pass through alpha\n */\nexport const greyAverage = ([\n  r,\n  g,\n  b,\n  a = 1,\n]: TRGBAColorSource): TRGBAColorSource => {\n  const avg = Math.round(r * 0.3 + g * 0.59 + b * 0.11);\n  return [avg, avg, avg, a];\n};\n", "import { radiansToDegrees } from '../util/misc/radiansDegreesConversion';\nimport { ColorNameMap } from './color_map';\nimport { reHSLa, reHex, reRGBa } from './constants';\nimport type { TRGBAColorSource, TColorArg } from './typedefs';\nimport {\n  hue2rgb,\n  hexify,\n  rgb2Hsl,\n  fromAlphaToFloat,\n  greyAverage,\n} from './util';\n\n/**\n * @class Color common color operations\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors colors}\n */\nexport class Color {\n  private declare _source: TRGBAColorSource;\n  isUnrecognised = false;\n\n  /**\n   *\n   * @param {string} [color] optional in hex or rgb(a) or hsl format or from known color list\n   */\n  constructor(color?: TColorArg) {\n    if (!color) {\n      // we default to black as canvas does\n      this.setSource([0, 0, 0, 1]);\n    } else if (color instanceof Color) {\n      this.setSource([...color._source]);\n    } else if (Array.isArray(color)) {\n      const [r, g, b, a = 1] = color;\n      this.setSource([r, g, b, a]);\n    } else {\n      this.setSource(this._tryParsingColor(color));\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} [color] Color value to parse\n   * @returns {TRGBAColorSource}\n   */\n  protected _tryParsingColor(color: string) {\n    color = color.toLowerCase();\n    if (color in ColorNameMap) {\n      color = ColorNameMap[color as keyof typeof ColorNameMap];\n    }\n    return color === 'transparent'\n      ? ([255, 255, 255, 0] as TRGBAColorSource)\n      : Color.sourceFromHex(color) ||\n          Color.sourceFromRgb(color) ||\n          Color.sourceFromHsl(color) ||\n          // color is not recognized\n          // we default to black as canvas does\n          // eslint-disable-next-line no-constant-binary-expression\n          ((this.isUnrecognised = true) && ([0, 0, 0, 1] as TRGBAColorSource));\n  }\n\n  /**\n   * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @return {TRGBAColorSource}\n   */\n  getSource() {\n    return this._source;\n  }\n\n  /**\n   * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @param {TRGBAColorSource} source\n   */\n  setSource(source: TRGBAColorSource) {\n    this._source = source;\n  }\n\n  /**\n   * Returns color representation in RGB format\n   * @return {String} ex: rgb(0-255,0-255,0-255)\n   */\n  toRgb() {\n    const [r, g, b] = this.getSource();\n    return `rgb(${r},${g},${b})`;\n  }\n\n  /**\n   * Returns color representation in RGBA format\n   * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n   */\n  toRgba() {\n    return `rgba(${this.getSource().join(',')})`;\n  }\n\n  /**\n   * Returns color representation in HSL format\n   * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n   */\n  toHsl() {\n    const [h, s, l] = rgb2Hsl(...this.getSource());\n    return `hsl(${h},${s}%,${l}%)`;\n  }\n\n  /**\n   * Returns color representation in HSLA format\n   * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n   */\n  toHsla() {\n    const [h, s, l, a] = rgb2Hsl(...this.getSource());\n    return `hsla(${h},${s}%,${l}%,${a})`;\n  }\n\n  /**\n   * Returns color representation in HEX format\n   * @return {String} ex: FF5555\n   */\n  toHex() {\n    const fullHex = this.toHexa();\n    return fullHex.slice(0, 6);\n  }\n\n  /**\n   * Returns color representation in HEXA format\n   * @return {String} ex: FF5555CC\n   */\n  toHexa() {\n    const [r, g, b, a] = this.getSource();\n    return `${hexify(r)}${hexify(g)}${hexify(b)}${hexify(Math.round(a * 255))}`;\n  }\n\n  /**\n   * Gets value of alpha channel for this color\n   * @return {Number} 0-1\n   */\n  getAlpha() {\n    return this.getSource()[3];\n  }\n\n  /**\n   * Sets value of alpha channel for this color\n   * @param {Number} alpha Alpha value 0-1\n   * @return {Color} thisArg\n   */\n  setAlpha(alpha: number) {\n    this._source[3] = alpha;\n    return this;\n  }\n\n  /**\n   * Transforms color to its grayscale representation\n   * @return {Color} thisArg\n   */\n  toGrayscale() {\n    this.setSource(greyAverage(this.getSource()));\n    return this;\n  }\n\n  /**\n   * Transforms color to its black and white representation\n   * @param {Number} threshold\n   * @return {Color} thisArg\n   */\n  toBlackWhite(threshold: number) {\n    const [average, , , a] = greyAverage(this.getSource()),\n      bOrW = average < (threshold || 127) ? 0 : 255;\n    this.setSource([bOrW, bOrW, bOrW, a]);\n    return this;\n  }\n\n  /**\n   * Overlays color with another color\n   * @param {String|Color} otherColor\n   * @return {Color} thisArg\n   */\n  overlayWith(otherColor: string | Color) {\n    if (!(otherColor instanceof Color)) {\n      otherColor = new Color(otherColor);\n    }\n\n    const source = this.getSource(),\n      otherAlpha = 0.5,\n      otherSource = otherColor.getSource(),\n      [R, G, B] = source.map((value, index) =>\n        Math.round(value * (1 - otherAlpha) + otherSource[index] * otherAlpha),\n      );\n\n    this.setSource([R, G, B, source[3]]);\n    return this;\n  }\n\n  /**\n   * Returns new color object, when given a color in RGB format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n   * @return {Color}\n   */\n  static fromRgb(color: string): Color {\n    return Color.fromRgba(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in RGBA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromRgba(color: string): Color {\n    return new Color(Color.sourceFromRgb(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromRgb(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reRGBa());\n    if (match) {\n      const [r, g, b] = match.slice(1, 4).map((value) => {\n        const parsedValue = parseFloat(value);\n        return value.endsWith('%')\n          ? Math.round(parsedValue * 2.55)\n          : parsedValue;\n      });\n      return [r, g, b, fromAlphaToFloat(match[4])];\n    }\n  }\n\n  /**\n   * Returns new color object, when given a color in HSL format\n   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n   * @memberOf Color\n   * @return {Color}\n   */\n  static fromHsl(color: string): Color {\n    return Color.fromHsla(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in HSLA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromHsla(color: string): Color {\n    return new Color(Color.sourceFromHsl(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n   * @memberOf Color\n   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n   * @return {TRGBAColorSource | undefined} source\n   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n   */\n  static sourceFromHsl(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reHSLa());\n    if (!match) {\n      return;\n    }\n    const match1degrees = Color.parseAngletoDegrees(match[1]);\n\n    const h = (((match1degrees % 360) + 360) % 360) / 360,\n      s = parseFloat(match[2]) / 100,\n      l = parseFloat(match[3]) / 100;\n    let r: number, g: number, b: number;\n\n    if (s === 0) {\n      r = g = b = l;\n    } else {\n      const q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n        p = l * 2 - q;\n\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return [\n      Math.round(r * 255),\n      Math.round(g * 255),\n      Math.round(b * 255),\n      fromAlphaToFloat(match[4]),\n    ];\n  }\n\n  /**\n   * Returns new color object, when given a color in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color Color value ex: FF5555\n   * @return {Color}\n   */\n  static fromHex(color: string): Color {\n    return new Color(Color.sourceFromHex(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color ex: FF5555 or FF5544CC (RGBa)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromHex(color: string): TRGBAColorSource | undefined {\n    if (color.match(reHex())) {\n      const value = color.slice(color.indexOf('#') + 1),\n        isShortNotation = value.length <= 4;\n      let expandedValue: string[];\n      if (isShortNotation) {\n        expandedValue = value.split('').map((hex) => hex + hex);\n      } else {\n        expandedValue = value.match(/.{2}/g)!;\n      }\n      const [r, g, b, a = 255] = expandedValue.map((hexCouple) =>\n        parseInt(hexCouple, 16),\n      );\n      return [r, g, b, a / 255];\n    }\n  }\n\n  /**\n   * Converts a string that could be any angle notation (50deg, 0.5turn, 2rad)\n   * into degrees without the 'deg' suffix\n   * @static\n   * @memberOf Color\n   * @param {String} value ex: 0deg, 0.5turn, 2rad\n   * @return {Number} number in degrees or NaN if inputs are invalid\n   */\n  static parseAngletoDegrees(value: string): number {\n    const lowercase = value.toLowerCase();\n    const numeric = parseFloat(lowercase);\n\n    if (lowercase.includes('rad')) {\n      return radiansToDegrees(numeric);\n    }\n\n    if (lowercase.includes('turn')) {\n      return numeric * 360;\n    }\n\n    // Value is probably just a number already in degrees eg '50'\n    return numeric;\n  }\n}\n", "/**\n * Regex matching color in RGB or RGBA formats (ex: `rgb(0, 0, 0)`, `rgba(255, 100, 10, 0.5)`, `rgba( 255 , 100 , 10 , 0.5 )`, `rgb(1,1,1)`, `rgba(100%, 60%, 10%, 0.5)`)\n * Also matching rgba(r g b / a) as per new specs\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb\n * Formal syntax at the time of writing:\n * <rgb()> =\n *  rgb( [ <percentage> | none ]{3} [ / [ <alpha-value> | none ] ]? )  |\n *  rgb( [ <number> | none ]{3} [ / [ <alpha-value> | none ] ]? )\n * <alpha-value> = <number> | <percentage>\n *\n * For learners this is how you can read this regex\n * Regular expression for matching an rgba or rgb CSS color value\n *\n * /^          # Beginning of the string\n * rgba?       # \"rgb\" or \"rgba\"\n * \\(\\s*       # Opening parenthesis and optional whitespace\n * (\\d{0,3}    # 0 to three digits R channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the first color component\n * %?          # Optional percent sign after the first color component\n * \\s*         # Optional whitespace\n * [\\s|,]      # Separator between color components can be a space or comma\n * \\s*         # Optional whitespace\n * (\\d{0,3}    # 0 to three digits G channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the second color component\n * %?          # Optional percent sign after the second color component\n * \\s*         # Optional whitespace\n * [\\s|,]      # Separator between color components can be a space or comma\n * \\s*         # Optional whitespace\n * (\\d{0,3}    # 0 to three digits B channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the third color component\n * %?          # Optional percent sign after the third color component\n * \\s*         # Optional whitespace\n * (?:         # Beginning of non-capturing group for alpha value\n *  \\s*        # Optional whitespace\n *  [,/]       # Comma or slash separator for alpha value\n *  \\s*        # Optional whitespace\n *  (\\d{0,3}   # Zero to three digits\n *    (?:\\.\\d+)? # Optional decimal with one or more digits\n *  )          # End of capturing group for alpha value\n *  %?         # Optional percent sign after alpha value\n *  \\s*        # Optional whitespace\n * )?          # End of non-capturing group for alpha value (optional)\n * \\)          # Closing parenthesis\n * $           # End of the string\n *\n * The alpha channel can be in the format 0.4 .7 or 1 or 73%\n *\n * WARNING this regex doesn't fail on off spec colors. it matches everything that could be a color.\n * So the spec does not allow for `rgba(30 , 45%  35, 49%)` but this will work anyways for us\n */\nexport const reRGBa = () =>\n  /^rgba?\\(\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*)?\\)$/i;\n\n/**\n * Regex matching color in HSL or HSLA formats (ex: hsl(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\n * Also matching rgba(r g b / a) as per new specs\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl\n * Formal syntax at the time of writing:\n * <hsl()> =\n *   hsl( [ <hue> | none ] [ <percentage> | none ] [ <percentage> | none ] [ / [ <alpha-value> | none ] ]? )\n *\n * <hue> =\n *   <number>  |\n *   <angle>\n *\n * <alpha-value> =\n *   <number>      |\n *   <percentage>\n *\n * For learners this is how you can read this regex\n * Regular expression for matching an hsla or hsl CSS color value\n *\n * /^hsla?\\(         // Matches the beginning of the string and the opening parenthesis of \"hsl\" or \"hsla\"\n * \\s*               // Matches any whitespace characters (space, tab, etc.) zero or more times\n * (\\d{0,3}          // Hue: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Hue: Optional (non capture group) decimal with one or more digits.\n * (?:deg|turn|rad)? // Hue: Optionally include suffix deg or turn or rad\n * )                 // Hue: End capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * [\\s|,]            // Matches a space, tab or comma\n * \\s*               // Matches any whitespace characters zero or more times\n * (\\d{0,3}          // Saturation: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Saturation: Optional decimal with one or more digits in a non-capturing group\n * %?)               // Saturation: match optional % character and end capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * [\\s|,]            // Matches a space, tab or comma\n * \\s*               // Matches any whitespace characters zero or more times\n * (\\d{0,3}          // Lightness: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Lightness: Optional decimal with one or more digits in a non-capturing group\n * %?)                // Lightness: match % character and end capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * (?:               // Alpha: Begins a non-capturing group for the alpha value\n *   \\s*             // Matches any whitespace characters zero or more times\n *   [,/]            // Matches a comma or forward slash\n *   \\s*             // Matches any whitespace characters zero or more times\n *   (\\d*(?:\\.\\d+)?%?) // Matches zero or more digits, optionally followed by a decimal point and one or more digits, followed by an optional percentage sign and captures it in a group\n *   \\s*             // Matches any whitespace characters zero or more times\n * )?                // Makes the alpha value group optional\n * \\)                // Matches the closing parenthesis\n * $/i               // Matches the end of the string and sets the regular expression to case-insensitive mode\n *\n * WARNING this regex doesn't fail on off spec colors. It matches everything that could be a color.\n * So the spec does not allow `hsl(30 , 45%  35, 49%)` but this will work anyways for us.\n */\nexport const reHSLa = () =>\n  /^hsla?\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?(?:deg|turn|rad)?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d*(?:\\.\\d+)?%?)\\s*)?\\)$/i;\n\n/**\n * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\n */\nexport const reHex = () => /^#?(([0-9a-f]){3,4}|([0-9a-f]{2}){3,4})$/i;\n", "import { Color } from '../../color/Color';\nimport { config } from '../../config';\nimport { DEFAULT_SVG_FONT_SIZE, FILL, NONE } from '../../constants';\nimport type { TBBox, SVGElementName, SupportedSVGUnit } from '../../typedefs';\nimport { toFixed } from './toFixed';\n\n/**\n * Returns array of attributes for given svg that fabric parses\n * @param {SVGElementName} type Type of svg element (eg. 'circle')\n * @return {Array} string names of supported attributes\n */\nexport const getSvgAttributes = (type: SVGElementName) => {\n  const commonAttributes = ['instantiated_by_use', 'style', 'id', 'class'];\n  switch (type) {\n    case 'linearGradient':\n      return commonAttributes.concat([\n        'x1',\n        'y1',\n        'x2',\n        'y2',\n        'gradientUnits',\n        'gradientTransform',\n      ]);\n    case 'radialGradient':\n      return commonAttributes.concat([\n        'gradientUnits',\n        'gradientTransform',\n        'cx',\n        'cy',\n        'r',\n        'fx',\n        'fy',\n        'fr',\n      ]);\n    case 'stop':\n      return commonAttributes.concat(['offset', 'stop-color', 'stop-opacity']);\n  }\n  return commonAttributes;\n};\n\n/**\n * Converts from attribute value to pixel value if applicable.\n * Returns converted pixels or original value not converted.\n * @param {string} value number to operate on\n * @param {number} fontSize\n * @return {number}\n */\nexport const parseUnit = (value: string, fontSize = DEFAULT_SVG_FONT_SIZE) => {\n  const unit = /\\D{0,2}$/.exec(value),\n    number = parseFloat(value);\n  const dpi = config.DPI;\n  switch (unit?.[0] as SupportedSVGUnit) {\n    case 'mm':\n      return (number * dpi) / 25.4;\n\n    case 'cm':\n      return (number * dpi) / 2.54;\n\n    case 'in':\n      return number * dpi;\n\n    case 'pt':\n      return (number * dpi) / 72; // or * 4 / 3\n\n    case 'pc':\n      return ((number * dpi) / 72) * 12; // or * 16\n\n    case 'em':\n      return number * fontSize;\n\n    default:\n      return number;\n  }\n};\n\nexport type MeetOrSlice = 'meet' | 'slice';\n\nexport type MinMidMax = 'Min' | 'Mid' | 'Max' | 'none';\n\nexport type TPreserveArParsed = {\n  meetOrSlice: MeetOrSlice;\n  alignX: MinMidMax;\n  alignY: MinMidMax;\n};\n\n// align can be either none or undefined or a combination of mid/max\nconst parseAlign = (align: string): MinMidMax[] => {\n  //divide align in alignX and alignY\n  if (align && align !== NONE) {\n    return [align.slice(1, 4) as MinMidMax, align.slice(5, 8) as MinMidMax];\n  } else if (align === NONE) {\n    return [align, align];\n  }\n  return ['Mid', 'Mid'];\n};\n\n/**\n * Parse preserveAspectRatio attribute from element\n * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio\n * @param {string} attribute to be parsed\n * @return {Object} an object containing align and meetOrSlice attribute\n */\nexport const parsePreserveAspectRatioAttribute = (\n  attribute: string,\n): TPreserveArParsed => {\n  const [firstPart, secondPart] = attribute.trim().split(' ') as [\n    MinMidMax,\n    MeetOrSlice | undefined,\n  ];\n  const [alignX, alignY] = parseAlign(firstPart);\n  return {\n    meetOrSlice: secondPart || 'meet',\n    alignX,\n    alignY,\n  };\n};\n\n/**\n * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\n * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\n * @param prop\n * @param value\n * @param {boolean} inlineStyle The default is inline style, the separator used is \":\", The other is \"=\"\n * @returns\n */\nexport const colorPropToSVG = (\n  prop: string,\n  value?: any,\n  inlineStyle = true,\n) => {\n  let colorValue;\n  let opacityValue;\n  if (!value) {\n    colorValue = 'none';\n  } else if (value.toLive) {\n    colorValue = `url(#SVGID_${value.id})`;\n  } else {\n    const color = new Color(value),\n      opacity = color.getAlpha();\n\n    colorValue = color.toRgb();\n    if (opacity !== 1) {\n      opacityValue = opacity.toString();\n    }\n  }\n  if (inlineStyle) {\n    return `${prop}: ${colorValue}; ${\n      opacityValue ? `${prop}-opacity: ${opacityValue}; ` : ''\n    }`;\n  } else {\n    return `${prop}=\"${colorValue}\" ${\n      opacityValue ? `${prop}-opacity=\"${opacityValue}\" ` : ''\n    }`;\n  }\n};\n\nexport const createSVGRect = (\n  color: string,\n  { left, top, width, height }: TBBox,\n  precision = config.NUM_FRACTION_DIGITS,\n) => {\n  const svgColor = colorPropToSVG(FILL, color, false);\n  const [x, y, w, h] = [left, top, width, height].map((value) =>\n    toFixed(value, precision),\n  );\n  return `<rect ${svgColor} x=\"${x}\" y=\"${y}\" width=\"${w}\" height=\"${h}\"></rect>`;\n};\n", "import type { TSVGReviver } from '../../typedefs';\nimport { uid } from '../../util/internals/uid';\nimport { colorPropToSVG } from '../../util/misc/svgParsing';\nimport { FILL, NONE, STROKE } from '../../constants';\nimport type { FabricObject } from './FabricObject';\nimport { isFiller } from '../../util/typeAssertions';\nimport { matrixToSVG } from '../../util/misc/svgExport';\n\nexport class FabricObjectSVGExportMixin {\n  /**\n   * When an object is being exported as SVG as a clippath, a reference inside the SVG is needed.\n   * This reference is a UID in the fabric namespace and is temporary stored here.\n   * @type {String}\n   */\n  declare clipPathId?: string;\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    skipShadow?: boolean,\n  ) {\n    const fillRule = this.fillRule ? this.fillRule : 'nonzero',\n      strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\n      strokeDashArray = this.strokeDashArray\n        ? this.strokeDashArray.join(' ')\n        : NONE,\n      strokeDashOffset = this.strokeDashOffset ? this.strokeDashOffset : '0',\n      strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\n      strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\n      strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\n      opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\n      visibility = this.visible ? '' : ' visibility: hidden;',\n      filter = skipShadow ? '' : this.getSvgFilter(),\n      fill = colorPropToSVG(FILL, this.fill),\n      stroke = colorPropToSVG(STROKE, this.stroke);\n\n    return [\n      stroke,\n      'stroke-width: ',\n      strokeWidth,\n      '; ',\n      'stroke-dasharray: ',\n      strokeDashArray,\n      '; ',\n      'stroke-linecap: ',\n      strokeLineCap,\n      '; ',\n      'stroke-dashoffset: ',\n      strokeDashOffset,\n      '; ',\n      'stroke-linejoin: ',\n      strokeLineJoin,\n      '; ',\n      'stroke-miterlimit: ',\n      strokeMiterLimit,\n      '; ',\n      fill,\n      'fill-rule: ',\n      fillRule,\n      '; ',\n      'opacity: ',\n      opacity,\n      ';',\n      filter,\n      visibility,\n    ].join('');\n  }\n\n  /**\n   * Returns filter for svg shadow\n   * @return {String}\n   */\n  getSvgFilter(this: FabricObjectSVGExportMixin & FabricObject) {\n    return this.shadow ? `filter: url(#SVGID_${this.shadow.id});` : '';\n  }\n\n  /**\n   * Returns id attribute for svg output\n   * @return {String}\n   */\n  getSvgCommons(\n    this: FabricObjectSVGExportMixin & FabricObject & { id?: string },\n  ) {\n    return [\n      this.id ? `id=\"${this.id}\" ` : '',\n      this.clipPath\n        ? `clip-path=\"url(#${\n            (this.clipPath as FabricObjectSVGExportMixin & FabricObject)\n              .clipPathId\n          })\" `\n        : '',\n    ].join('');\n  }\n\n  /**\n   * Returns transform-string for svg-export\n   * @param {Boolean} use the full transform or the single object one.\n   * @return {String}\n   */\n  getSvgTransform(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    full?: boolean,\n    additionalTransform = '',\n  ) {\n    const transform = full ? this.calcTransformMatrix() : this.calcOwnMatrix(),\n      svgTransform = `transform=\"${matrixToSVG(transform)}`;\n    return `${svgTransform}${additionalTransform}\" `;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * This function is implemented in each subclass\n   * This is just because typescript otherwise cryies all the time\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(_reviver?: TSVGReviver): string[] {\n    return [''];\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toSVG(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    return this._createBaseSVGMarkup(this._toSVG(reviver), {\n      reviver,\n    });\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toClipPathSVG(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    return (\n      '\\t' +\n      this._createBaseClipPathSVGMarkup(this._toSVG(reviver), {\n        reviver,\n      })\n    );\n  }\n\n  /**\n   * @private\n   */\n  _createBaseClipPathSVGMarkup(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    objectMarkup: string[],\n    {\n      reviver,\n      additionalTransform = '',\n    }: { reviver?: TSVGReviver; additionalTransform?: string } = {},\n  ) {\n    const commonPieces = [\n        this.getSvgTransform(true, additionalTransform),\n        this.getSvgCommons(),\n      ].join(''),\n      // insert commons in the markup, style and svgCommons\n      index = objectMarkup.indexOf('COMMON_PARTS');\n    objectMarkup[index] = commonPieces;\n    return reviver ? reviver(objectMarkup.join('')) : objectMarkup.join('');\n  }\n\n  /**\n   * @private\n   */\n  _createBaseSVGMarkup(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    objectMarkup: string[],\n    {\n      noStyle,\n      reviver,\n      withShadow,\n      additionalTransform,\n    }: {\n      noStyle?: boolean;\n      reviver?: TSVGReviver;\n      withShadow?: boolean;\n      additionalTransform?: string;\n    } = {},\n  ): string {\n    const styleInfo = noStyle ? '' : `style=\"${this.getSvgStyles()}\" `,\n      shadowInfo = withShadow ? `style=\"${this.getSvgFilter()}\" ` : '',\n      clipPath = this.clipPath as FabricObjectSVGExportMixin & FabricObject,\n      vectorEffect = this.strokeUniform\n        ? 'vector-effect=\"non-scaling-stroke\" '\n        : '',\n      absoluteClipPath = clipPath && clipPath.absolutePositioned,\n      stroke = this.stroke,\n      fill = this.fill,\n      shadow = this.shadow,\n      markup = [],\n      // insert commons in the markup, style and svgCommons\n      index = objectMarkup.indexOf('COMMON_PARTS');\n    let clipPathMarkup;\n    if (clipPath) {\n      clipPath.clipPathId = `CLIPPATH_${uid()}`;\n      clipPathMarkup = `<clipPath id=\"${\n        clipPath.clipPathId\n      }\" >\\n${clipPath.toClipPathSVG(reviver)}</clipPath>\\n`;\n    }\n    if (absoluteClipPath) {\n      markup.push('<g ', shadowInfo, this.getSvgCommons(), ' >\\n');\n    }\n    markup.push(\n      '<g ',\n      this.getSvgTransform(false),\n      !absoluteClipPath ? shadowInfo + this.getSvgCommons() : '',\n      ' >\\n',\n    );\n    const commonPieces = [\n      styleInfo,\n      vectorEffect,\n      noStyle ? '' : this.addPaintOrder(),\n      ' ',\n      additionalTransform ? `transform=\"${additionalTransform}\" ` : '',\n    ].join('');\n    objectMarkup[index] = commonPieces;\n    if (isFiller(fill)) {\n      markup.push(fill.toSVG(this));\n    }\n    if (isFiller(stroke)) {\n      markup.push(stroke.toSVG(this));\n    }\n    if (shadow) {\n      markup.push(shadow.toSVG(this));\n    }\n    if (clipPath) {\n      markup.push(clipPathMarkup);\n    }\n    markup.push(objectMarkup.join(''));\n    markup.push('</g>\\n');\n    absoluteClipPath && markup.push('</g>\\n');\n    return reviver ? reviver(markup.join('')) : markup.join('');\n  }\n\n  addPaintOrder(this: FabricObjectSVGExportMixin & FabricObject) {\n    return this.paintFirst !== FILL ? ` paint-order=\"${this.paintFirst}\" ` : '';\n  }\n}\n", "export function getSvgRegex(arr: string[]) {\n  return new RegExp('^(' + arr.join('|') + ')\\\\b', 'i');\n}\n", "import { getSvgRegex } from './getSvgRegex';\nimport { LEFT, TOP } from '../constants';\n\n// matches, e.g.: +14.56e-12, etc.\nexport const reNum = String.raw`[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?`;\nexport const viewportSeparator = String.raw`(?:\\s*,?\\s+|\\s*,\\s*)`;\n\nexport const svgNS = 'http://www.w3.org/2000/svg';\n\nexport const reFontDeclaration = new RegExp(\n  '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\n    '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\n    reNum +\n    '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' +\n    reNum +\n    '))?\\\\s+(.*)',\n);\n\nexport const svgValidTagNames = [\n    'path',\n    'circle',\n    'polygon',\n    'polyline',\n    'ellipse',\n    'rect',\n    'line',\n    'image',\n    'text',\n  ],\n  svgViewBoxElements = ['symbol', 'image', 'marker', 'pattern', 'view', 'svg'],\n  svgInvalidAncestors = [\n    'pattern',\n    'defs',\n    'symbol',\n    'metadata',\n    'clipPath',\n    'mask',\n    'desc',\n  ],\n  svgValidParents = ['symbol', 'g', 'a', 'svg', 'clipPath', 'defs'],\n  attributesMap = {\n    cx: LEFT,\n    x: LEFT,\n    r: 'radius',\n    cy: TOP,\n    y: TOP,\n    display: 'visible',\n    visibility: 'visible',\n    transform: 'transformMatrix',\n    'fill-opacity': 'fillOpacity',\n    'fill-rule': 'fillRule',\n    'font-family': 'fontFamily',\n    'font-size': 'fontSize',\n    'font-style': 'fontStyle',\n    'font-weight': 'fontWeight',\n    'letter-spacing': 'charSpacing',\n    'paint-order': 'paintFirst',\n    'stroke-dasharray': 'strokeDashArray',\n    'stroke-dashoffset': 'strokeDashOffset',\n    'stroke-linecap': 'strokeLineCap',\n    'stroke-linejoin': 'strokeLineJoin',\n    'stroke-miterlimit': 'strokeMiterLimit',\n    'stroke-opacity': 'strokeOpacity',\n    'stroke-width': 'strokeWidth',\n    'text-decoration': 'textDecoration',\n    'text-anchor': 'textAnchor',\n    opacity: 'opacity',\n    'clip-path': 'clipPath',\n    'clip-rule': 'clipRule',\n    'vector-effect': 'strokeUniform',\n    'image-rendering': 'imageSmoothing',\n  },\n  fSize = 'font-size',\n  cPath = 'clip-path';\n\nexport const svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);\n\nexport const svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);\n\nexport const svgValidParentsRegEx = getSvgRegex(svgValidParents);\n\n// http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\n\nexport const reViewBoxAttrValue = new RegExp(\n  String.raw`^\\s*(${reNum})${viewportSeparator}(${reNum})${viewportSeparator}(${reNum})${viewportSeparator}(${reNum})\\s*$`,\n);\n", "import type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport type { TRadian } from '../../typedefs';\n\nconst unitVectorX = new Point(1, 0);\nconst zero = new Point();\n\n/**\n * Rotates `vector` with `radians`\n * @param {Point} vector The vector to rotate (x and y)\n * @param {Number} radians The radians of the angle for the rotation\n * @return {Point} The new rotated point\n */\nexport const rotateVector = (vector: Point, radians: TRadian) =>\n  vector.rotate(radians);\n\n/**\n * Creates a vector from points represented as a point\n *\n * @param {Point} from\n * @param {Point} to\n * @returns {Point} vector\n */\nexport const createVector = (from: XY, to: XY): Point =>\n  new Point(to).subtract(from);\n\n/**\n * return the magnitude of a vector\n * @return {number}\n */\nexport const magnitude = (point: Point) => point.distanceFrom(zero);\n\n/**\n * Calculates the angle between 2 vectors\n * @param {Point} a\n * @param {Point} b\n * @returns the angle in radians from `a` to `b`\n */\nexport const calcAngleBetweenVectors = (a: Point, b: Point): TRadian =>\n  Math.atan2(crossProduct(a, b), dotProduct(a, b)) as TRadian;\n\n/**\n * Calculates the angle between the x axis and the vector\n * @param {Point} v\n * @returns the angle in radians of `v`\n */\nexport const calcVectorRotation = (v: Point) =>\n  calcAngleBetweenVectors(unitVectorX, v);\n\n/**\n * @param {Point} v\n * @returns {Point} vector representing the unit vector pointing to the direction of `v`\n */\nexport const getUnitVector = (v: Point): Point =>\n  v.eq(zero) ? v : v.scalarDivide(magnitude(v));\n\n/**\n * @param {Point} v\n * @param {Boolean} [counterClockwise] the direction of the orthogonal vector, defaults to `true`\n * @returns {Point} the unit orthogonal vector\n */\nexport const getOrthonormalVector = (\n  v: Point,\n  counterClockwise = true,\n): Point =>\n  getUnitVector(new Point(-v.y, v.x).scalarMultiply(counterClockwise ? 1 : -1));\n\n/**\n * Cross product of two vectors in 2D\n * @param {Point} a\n * @param {Point} b\n * @returns {number} the magnitude of Z vector\n */\nexport const crossProduct = (a: Point, b: Point): number =>\n  a.x * b.y - a.y * b.x;\n\n/**\n * Dot product of two vectors in 2D\n * @param {Point} a\n * @param {Point} b\n * @returns {number}\n */\nexport const dotProduct = (a: Point, b: Point): number => a.x * b.x + a.y * b.y;\n\n/**\n * Checks if the vector is between two others. It is considered\n * to be inside when the vector to be tested is between the\n * initial vector and the final vector (included) in a counterclockwise direction.\n * @param {Point} t vector to be tested\n * @param {Point} a initial vector\n * @param {Point} b final vector\n * @returns {boolean} true if the vector is among the others\n */\nexport const isBetweenVectors = (t: Point, a: Point, b: Point): boolean => {\n  if (t.eq(a) || t.eq(b)) return true;\n  const AxB = crossProduct(a, b),\n    AxT = crossProduct(a, t),\n    BxT = crossProduct(b, t);\n  return AxB >= 0 ? AxT >= 0 && BxT <= 0 : !(AxT <= 0 && BxT >= 0);\n};\n", "import { classRegistry } from './ClassRegistry';\nimport { Color } from './color/Color';\nimport { config } from './config';\nimport { reNum } from './parser/constants';\nimport { Point } from './Point';\nimport type { FabricObject } from './shapes/Object/FabricObject';\nimport type { TClassProperties } from './typedefs';\nimport { uid } from './util/internals/uid';\nimport { pickBy } from './util/misc/pick';\nimport { degreesToRadians } from './util/misc/radiansDegreesConversion';\nimport { toFixed } from './util/misc/toFixed';\nimport { rotateVector } from './util/misc/vectors';\n\n/**\n   * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\n   * - (?:\\s|^): This part captures either a whitespace character (\\s) or the beginning of a line (^). It's non-capturing (due to (?:...)), meaning it doesn't create a capturing group.\n   * - (-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?: This captures the first component of the shadow, which is the horizontal offset. Breaking it down:\n   *   - (-?\\d+): Captures an optional minus sign followed by one or more digits (integer part of the number).\n   *   - (?:\\.\\d*)?: Optionally captures a decimal point followed by zero or more digits (decimal part of the number).\n   *   - (?:px)?: Optionally captures the \"px\" unit.\n   *   - (?:\\s?|$): Captures either an optional whitespace or the end of the line. This whole part is wrapped in a non-capturing group and marked as optional with ?.\n   * - (-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?: Similar to the previous step, this captures the vertical offset.\n\n(\\d+(?:\\.\\d*)?(?:px)?)?: This captures the blur radius. It's similar to the horizontal offset but without the optional minus sign.\n\n(?:\\s+(-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?){0,1}: This captures an optional part for the color. It allows for whitespace followed by a component with an optional minus sign, digits, decimal point, and \"px\" unit.\n\n(?:$|\\s): This captures either the end of the line or a whitespace character. It ensures that the match ends either at the end of the string or with a whitespace character.\n   */\n// eslint-disable-next-line max-len\n\nconst shadowOffsetRegex = '(-?\\\\d+(?:\\\\.\\\\d*)?(?:px)?(?:\\\\s?|$))?';\n\nconst reOffsetsAndBlur = new RegExp(\n  '(?:\\\\s|^)' +\n    shadowOffsetRegex +\n    shadowOffsetRegex +\n    '(' +\n    reNum +\n    '?(?:px)?)?(?:\\\\s?|$)(?:$|\\\\s)',\n);\n\nexport const shadowDefaultValues: Partial<TClassProperties<Shadow>> = {\n  color: 'rgb(0,0,0)',\n  blur: 0,\n  offsetX: 0,\n  offsetY: 0,\n  affectStroke: false,\n  includeDefaultValues: true,\n  nonScaling: false,\n};\n\nexport type SerializedShadowOptions = {\n  color: string;\n  blur: number;\n  offsetX: number;\n  offsetY: number;\n  affectStroke: boolean;\n  nonScaling: boolean;\n  type: string;\n};\n\nexport class Shadow {\n  /**\n   * Shadow color\n   * @type String\n   * @default\n   */\n  declare color: string;\n\n  /**\n   * Shadow blur\n   * @type Number\n   */\n  declare blur: number;\n\n  /**\n   * Shadow horizontal offset\n   * @type Number\n   * @default\n   */\n  declare offsetX: number;\n\n  /**\n   * Shadow vertical offset\n   * @type Number\n   * @default\n   */\n  declare offsetY: number;\n\n  /**\n   * Whether the shadow should affect stroke operations\n   * @type Boolean\n   * @default\n   */\n  declare affectStroke: boolean;\n\n  /**\n   * Indicates whether toObject should include default values\n   * @type Boolean\n   * @default\n   */\n  declare includeDefaultValues: boolean;\n\n  /**\n   * When `false`, the shadow will scale with the object.\n   * When `true`, the shadow's offsetX, offsetY, and blur will not be affected by the object's scale.\n   * default to false\n   * @type Boolean\n   * @default\n   */\n  declare nonScaling: boolean;\n\n  declare id: number;\n\n  static ownDefaults = shadowDefaultValues;\n\n  static type = 'shadow';\n\n  /**\n   * @see {@link http://fabricjs.com/shadows|Shadow demo}\n   * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px\")\n   */\n  constructor(options: Partial<TClassProperties<Shadow>>);\n  constructor(svgAttribute: string);\n  constructor(arg0: string | Partial<TClassProperties<Shadow>>) {\n    const options: Partial<TClassProperties<Shadow>> =\n      typeof arg0 === 'string' ? Shadow.parseShadow(arg0) : arg0;\n    Object.assign(this, Shadow.ownDefaults, options);\n    this.id = uid();\n  }\n\n  /**\n   * @param {String} value Shadow value to parse\n   * @return {Object} Shadow object with color, offsetX, offsetY and blur\n   */\n  static parseShadow(value: string) {\n    const shadowStr = value.trim(),\n      [, offsetX = 0, offsetY = 0, blur = 0] = (\n        reOffsetsAndBlur.exec(shadowStr) || []\n      ).map((value) => parseFloat(value) || 0),\n      color = (shadowStr.replace(reOffsetsAndBlur, '') || 'rgb(0,0,0)').trim();\n\n    return {\n      color,\n      offsetX,\n      offsetY,\n      blur,\n    };\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\n   * @return {String} Returns CSS3 text-shadow declaration\n   */\n  toString() {\n    return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\n  }\n\n  /**\n   * Returns SVG representation of a shadow\n   * @param {FabricObject} object\n   * @return {String} SVG representation of a shadow\n   */\n  toSVG(object: FabricObject) {\n    const offset = rotateVector(\n        new Point(this.offsetX, this.offsetY),\n        degreesToRadians(-object.angle),\n      ),\n      BLUR_BOX = 20,\n      color = new Color(this.color);\n    let fBoxX = 40,\n      fBoxY = 40;\n\n    if (object.width && object.height) {\n      //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\n      // we add some extra space to filter box to contain the blur ( 20 )\n      fBoxX =\n        toFixed(\n          (Math.abs(offset.x) + this.blur) / object.width,\n          config.NUM_FRACTION_DIGITS,\n        ) *\n          100 +\n        BLUR_BOX;\n      fBoxY =\n        toFixed(\n          (Math.abs(offset.y) + this.blur) / object.height,\n          config.NUM_FRACTION_DIGITS,\n        ) *\n          100 +\n        BLUR_BOX;\n    }\n    if (object.flipX) {\n      offset.x *= -1;\n    }\n    if (object.flipY) {\n      offset.y *= -1;\n    }\n\n    return `<filter id=\"SVGID_${this.id}\" y=\"-${fBoxY}%\" height=\"${\n      100 + 2 * fBoxY\n    }%\" x=\"-${fBoxX}%\" width=\"${\n      100 + 2 * fBoxX\n    }%\" >\\n\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"${toFixed(\n      this.blur ? this.blur / 2 : 0,\n      config.NUM_FRACTION_DIGITS,\n    )}\"></feGaussianBlur>\\n\\t<feOffset dx=\"${toFixed(\n      offset.x,\n      config.NUM_FRACTION_DIGITS,\n    )}\" dy=\"${toFixed(\n      offset.y,\n      config.NUM_FRACTION_DIGITS,\n    )}\" result=\"oBlur\" ></feOffset>\\n\\t<feFlood flood-color=\"${color.toRgb()}\" flood-opacity=\"${color.getAlpha()}\"/>\\n\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n\\t<feMerge>\\n\\t\\t<feMergeNode></feMergeNode>\\n\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n\\t</feMerge>\\n</filter>\\n`;\n  }\n\n  /**\n   * Returns object representation of a shadow\n   * @return {Object} Object representation of a shadow instance\n   */\n  toObject() {\n    const data: SerializedShadowOptions = {\n      color: this.color,\n      blur: this.blur,\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      affectStroke: this.affectStroke,\n      nonScaling: this.nonScaling,\n      type: (this.constructor as typeof Shadow).type,\n    };\n    const defaults = Shadow.ownDefaults as SerializedShadowOptions;\n    return !this.includeDefaultValues\n      ? pickBy(data, (value, key) => value !== defaults[key])\n      : data;\n  }\n\n  static async fromObject(options: Partial<TClassProperties<Shadow>>) {\n    return new this(options);\n  }\n}\n\nclassRegistry.setClass(Shadow, 'shadow');\n", "export const capValue = (min: number, value: number, max: number) =>\n  Math.max(min, Math.min(value, max));\n", "import {\n  TOP,\n  LEFT,\n  SCALE_Y,\n  SCALE_X,\n  SKEW_X,\n  SKEW_Y,\n  FILL,\n  STROKE,\n} from '../../constants';\nimport type { TClassProperties } from '../../typedefs';\nimport type { InteractiveFabricObject } from './InteractiveObject';\nimport type { FabricObject } from './Object';\n\nexport const stateProperties = [\n  TOP,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  'flipX',\n  'flipY',\n  'originX',\n  'originY',\n  'angle',\n  'opacity',\n  'globalCompositeOperation',\n  'shadow',\n  'visible',\n  SKEW_X,\n  SKEW_Y,\n];\n\nexport const cacheProperties = [\n  FILL,\n  STROKE,\n  'strokeWidth',\n  'strokeDashArray',\n  'width',\n  'height',\n  'paintFirst',\n  'strokeUniform',\n  'strokeLineCap',\n  'strokeDashOffset',\n  'strokeLineJoin',\n  'strokeMiterLimit',\n  'backgroundColor',\n  'clipPath',\n];\n\nexport const fabricObjectDefaultValues: Partial<\n  TClassProperties<FabricObject>\n> = {\n  // see composeMatrix() to see order of transforms. First defaults listed based on this\n  top: 0,\n  left: 0,\n  width: 0,\n  height: 0,\n  angle: 0,\n  flipX: false,\n  flipY: false,\n  scaleX: 1,\n  scaleY: 1,\n  minScaleLimit: 0,\n  skewX: 0,\n  skewY: 0,\n  originX: LEFT,\n  originY: TOP,\n  strokeWidth: 1,\n  strokeUniform: false,\n  padding: 0,\n  opacity: 1,\n  paintFirst: FILL,\n  fill: 'rgb(0,0,0)',\n  fillRule: 'nonzero',\n  stroke: null,\n  strokeDashArray: null,\n  strokeDashOffset: 0,\n  strokeLineCap: 'butt',\n  strokeLineJoin: 'miter',\n  strokeMiterLimit: 4,\n  globalCompositeOperation: 'source-over',\n  backgroundColor: '',\n  shadow: null,\n  visible: true,\n  includeDefaultValues: true,\n  excludeFromExport: false,\n  objectCaching: true,\n  clipPath: undefined,\n  inverted: false,\n  absolutePositioned: false,\n  centeredRotation: true,\n  centeredScaling: false,\n  dirty: true,\n} as const;\n\nexport const interactiveObjectDefaultValues: Partial<\n  TClassProperties<InteractiveFabricObject>\n> = {\n  noScaleCache: true,\n  lockMovementX: false,\n  lockMovementY: false,\n  lockRotation: false,\n  lockScalingX: false,\n  lockScalingY: false,\n  lockSkewingX: false,\n  lockSkewingY: false,\n  lockScalingFlip: false,\n  cornerSize: 13,\n  touchCornerSize: 24,\n  transparentCorners: true,\n  cornerColor: 'rgb(178,204,255)',\n  cornerStrokeColor: '',\n  cornerStyle: 'rect',\n  cornerDashArray: null,\n  hasControls: true,\n  borderColor: 'rgb(178,204,255)',\n  borderDashArray: null,\n  borderOpacityWhenMoving: 0.4,\n  borderScaleFactor: 1,\n  hasBorders: true,\n  selectionBackgroundColor: '',\n  selectable: true,\n  evented: true,\n  perPixelTargetFind: false,\n  activeOn: 'down',\n  hoverCursor: null,\n  moveCursor: null,\n};\n", "/**\n * Easing functions\n * @see {@link http://gizma.com/easing/ Easing Equations by Robert Penner}\n */\n\nimport { twoMathPi, halfPI } from '../../constants';\nimport type { TEasingFunction } from './types';\n\nconst normalize = (a: number, c: number, p: number, s: number) => {\n  if (a < Math.abs(c)) {\n    a = c;\n    s = p / 4;\n  } else {\n    //handle the 0/0 case:\n    if (c === 0 && a === 0) {\n      s = (p / twoMathPi) * Math.asin(1);\n    } else {\n      s = (p / twoMathPi) * Math.asin(c / a);\n    }\n  }\n  return { a, c, p, s };\n};\n\nconst elastic = (\n  a: number,\n  s: number,\n  p: number,\n  t: number,\n  d: number,\n): number =>\n  a * Math.pow(2, 10 * (t -= 1)) * Math.sin(((t * d - s) * twoMathPi) / p);\n\n/**\n * Default sinusoidal easing\n */\nexport const defaultEasing: TEasingFunction = (t, b, c, d) =>\n  -c * Math.cos((t / d) * halfPI) + c + b;\n\n/**\n * Cubic easing in\n */\nexport const easeInCubic: TEasingFunction = (t, b, c, d) =>\n  c * (t / d) ** 3 + b;\n\n/**\n * Cubic easing out\n */\nexport const easeOutCubic: TEasingFunction = (t, b, c, d) =>\n  c * ((t / d - 1) ** 3 + 1) + b;\n\n/**\n * Cubic easing in and out\n */\nexport const easeInOutCubic: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 3 + b;\n  }\n  return (c / 2) * ((t - 2) ** 3 + 2) + b;\n};\n\n/**\n * Quartic easing in\n */\nexport const easeInQuart: TEasingFunction = (t, b, c, d) =>\n  c * (t /= d) * t ** 3 + b;\n\n/**\n * Quartic easing out\n */\nexport const easeOutQuart: TEasingFunction = (t, b, c, d) =>\n  -c * ((t = t / d - 1) * t ** 3 - 1) + b;\n\n/**\n * Quartic easing in and out\n */\nexport const easeInOutQuart: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 4 + b;\n  }\n  return (-c / 2) * ((t -= 2) * t ** 3 - 2) + b;\n};\n\n/**\n * Quintic easing in\n */\nexport const easeInQuint: TEasingFunction = (t, b, c, d) =>\n  c * (t / d) ** 5 + b;\n\n/**\n * Quintic easing out\n */\nexport const easeOutQuint: TEasingFunction = (t, b, c, d) =>\n  c * ((t / d - 1) ** 5 + 1) + b;\n\n/**\n * Quintic easing in and out\n */\nexport const easeInOutQuint: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 5 + b;\n  }\n  return (c / 2) * ((t - 2) ** 5 + 2) + b;\n};\n\n/**\n * Sinusoidal easing in\n */\nexport const easeInSine: TEasingFunction = (t, b, c, d) =>\n  -c * Math.cos((t / d) * halfPI) + c + b;\n\n/**\n * Sinusoidal easing out\n */\nexport const easeOutSine: TEasingFunction = (t, b, c, d) =>\n  c * Math.sin((t / d) * halfPI) + b;\n\n/**\n * Sinusoidal easing in and out\n */\nexport const easeInOutSine: TEasingFunction = (t, b, c, d) =>\n  (-c / 2) * (Math.cos((Math.PI * t) / d) - 1) + b;\n\n/**\n * Exponential easing in\n */\nexport const easeInExpo: TEasingFunction = (t, b, c, d) =>\n  t === 0 ? b : c * 2 ** (10 * (t / d - 1)) + b;\n\n/**\n * Exponential easing out\n */\nexport const easeOutExpo: TEasingFunction = (t, b, c, d) =>\n  t === d ? b + c : c * -(2 ** ((-10 * t) / d) + 1) + b;\n\n/**\n * Exponential easing in and out\n */\nexport const easeInOutExpo: TEasingFunction = (t, b, c, d) => {\n  if (t === 0) {\n    return b;\n  }\n  if (t === d) {\n    return b + c;\n  }\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * 2 ** (10 * (t - 1)) + b;\n  }\n  return (c / 2) * -(2 ** (-10 * --t) + 2) + b;\n};\n\n/**\n * Circular easing in\n */\nexport const easeInCirc: TEasingFunction = (t, b, c, d) =>\n  -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n\n/**\n * Circular easing out\n */\nexport const easeOutCirc: TEasingFunction = (t, b, c, d) =>\n  c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n\n/**\n * Circular easing in and out\n */\nexport const easeInOutCirc: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (-c / 2) * (Math.sqrt(1 - t ** 2) - 1) + b;\n  }\n  return (c / 2) * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n};\n\n/**\n * Elastic easing in\n */\nexport const easeInElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d;\n  if (t === 1) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * 0.3;\n  }\n  const { a: normA, s: normS, p: normP } = normalize(a, c, p, s);\n  return -elastic(normA, normS, normP, t, d) + b;\n};\n\n/**\n * Elastic easing out\n */\nexport const easeOutElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d;\n  if (t === 1) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * 0.3;\n  }\n  const { a: normA, s: normS, p: normP, c: normC } = normalize(a, c, p, s);\n  return (\n    normA * 2 ** (-10 * t) * Math.sin(((t * d - normS) * twoMathPi) / normP) +\n    normC +\n    b\n  );\n};\n\n/**\n * Elastic easing in and out\n */\nexport const easeInOutElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d / 2;\n  if (t === 2) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * (0.3 * 1.5);\n  }\n  const { a: normA, s: normS, p: normP, c: normC } = normalize(a, c, p, s);\n  if (t < 1) {\n    return -0.5 * elastic(normA, normS, normP, t, d) + b;\n  }\n  return (\n    normA *\n      Math.pow(2, -10 * (t -= 1)) *\n      Math.sin(((t * d - normS) * twoMathPi) / normP) *\n      0.5 +\n    normC +\n    b\n  );\n};\n\n/**\n * Backwards easing in\n */\nexport const easeInBack: TEasingFunction = (t, b, c, d, s = 1.70158) =>\n  c * (t /= d) * t * ((s + 1) * t - s) + b;\n\n/**\n * Backwards easing out\n */\nexport const easeOutBack: TEasingFunction = (t, b, c, d, s = 1.70158) =>\n  c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n\n/**\n * Backwards easing in and out\n */\nexport const easeInOutBack: TEasingFunction = (t, b, c, d, s = 1.70158) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\n  }\n  return (c / 2) * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n};\n\n/**\n * Bouncing easing out\n */\nexport const easeOutBounce: TEasingFunction = (t, b, c, d) => {\n  if ((t /= d) < 1 / 2.75) {\n    return c * (7.5625 * t * t) + b;\n  } else if (t < 2 / 2.75) {\n    return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;\n  } else if (t < 2.5 / 2.75) {\n    return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;\n  } else {\n    return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;\n  }\n};\n\n/**\n * Bouncing easing in\n */\nexport const easeInBounce: TEasingFunction = (t, b, c, d) =>\n  c - easeOutBounce(d - t, 0, c, d) + b;\n\n/**\n * Bouncing easing in and out\n */\nexport const easeInOutBounce: TEasingFunction = (t, b, c, d) =>\n  t < d / 2\n    ? easeInBounce(t * 2, 0, c, d) * 0.5 + b\n    : easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n\n/**\n * Quadratic easing in\n */\nexport const easeInQuad: TEasingFunction = (t, b, c, d) => c * (t /= d) * t + b;\n\n/**\n * Quadratic easing out\n */\nexport const easeOutQuad: TEasingFunction = (t, b, c, d) =>\n  -c * (t /= d) * (t - 2) + b;\n\n/**\n * Quadratic easing in and out\n */\nexport const easeInOutQuad: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 2 + b;\n  }\n  return (-c / 2) * (--t * (t - 2) - 1) + b;\n};\n", "import { noop } from '../../constants';\nimport { requestAnimFrame } from './AnimationFrameProvider';\nimport { runningAnimations } from './AnimationRegistry';\nimport { defaultEasing } from './easing';\nimport type {\n  AnimationState,\n  TAbortCallback,\n  TBaseAnimationOptions,\n  TEasingFunction,\n  TOnAnimationChangeCallback,\n} from './types';\n\nconst defaultAbort = () => false;\n\nexport abstract class AnimationBase<\n  T extends number | number[] = number | number[],\n> {\n  declare readonly startValue: T;\n  declare readonly endValue: T;\n  declare readonly duration: number;\n  declare readonly delay: number;\n\n  protected declare readonly byValue: T;\n  protected declare readonly easing: TEasingFunction<T>;\n\n  private declare readonly _onStart: VoidFunction;\n  private declare readonly _onChange: TOnAnimationChangeCallback<T, void>;\n  private declare readonly _onComplete: TOnAnimationChangeCallback<T, void>;\n  private declare readonly _abort: TAbortCallback<T>;\n\n  /**\n   * Used to register the animation to a target object\n   * so that it can be cancelled within the object context\n   */\n  declare readonly target?: unknown;\n\n  private _state: AnimationState = 'pending';\n  /**\n   * Time %, or the ratio of `timeElapsed / duration`\n   * @see tick\n   */\n  durationProgress = 0;\n  /**\n   * Value %, or the ratio of `(currentValue - startValue) / (endValue - startValue)`\n   */\n  valueProgress = 0;\n  /**\n   * Current value\n   */\n  declare value: T;\n  /**\n   * Animation start time ms\n   */\n  private declare startTime: number;\n\n  constructor({\n    startValue,\n    byValue,\n    duration = 500,\n    delay = 0,\n    easing = defaultEasing,\n    onStart = noop,\n    onChange = noop,\n    onComplete = noop,\n    abort = defaultAbort,\n    target,\n  }: TBaseAnimationOptions<T>) {\n    this.tick = this.tick.bind(this);\n\n    this.duration = duration;\n    this.delay = delay;\n    this.easing = easing;\n    this._onStart = onStart;\n    this._onChange = onChange;\n    this._onComplete = onComplete;\n    this._abort = abort;\n    this.target = target;\n\n    this.startValue = startValue;\n    this.byValue = byValue;\n    this.value = this.startValue;\n    this.endValue = Object.freeze(this.calculate(this.duration).value);\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  isDone() {\n    return this._state === 'aborted' || this._state === 'completed';\n  }\n\n  /**\n   * Calculate the current value based on the easing parameters\n   * @param timeElapsed in ms\n   * @protected\n   */\n  protected abstract calculate(timeElapsed: number): {\n    value: T;\n    valueProgress: number;\n  };\n\n  start() {\n    const firstTick: FrameRequestCallback = (timestamp) => {\n      if (this._state !== 'pending') return;\n      this.startTime = timestamp || +new Date();\n      this._state = 'running';\n      this._onStart();\n      this.tick(this.startTime);\n    };\n\n    this.register();\n\n    // setTimeout(cb, 0) will run cb on the next frame, causing a delay\n    // we don't want that\n    if (this.delay > 0) {\n      setTimeout(() => requestAnimFrame(firstTick), this.delay);\n    } else {\n      requestAnimFrame(firstTick);\n    }\n  }\n\n  private tick(t: number) {\n    const durationMs = (t || +new Date()) - this.startTime;\n    const boundDurationMs = Math.min(durationMs, this.duration);\n    this.durationProgress = boundDurationMs / this.duration;\n    const { value, valueProgress } = this.calculate(boundDurationMs);\n    this.value = Object.freeze(value);\n    this.valueProgress = valueProgress;\n\n    if (this._state === 'aborted') {\n      return;\n    } else if (\n      this._abort(this.value, this.valueProgress, this.durationProgress)\n    ) {\n      this._state = 'aborted';\n      this.unregister();\n    } else if (durationMs >= this.duration) {\n      this.durationProgress = this.valueProgress = 1;\n      this._onChange(this.endValue, this.valueProgress, this.durationProgress);\n      this._state = 'completed';\n      this._onComplete(\n        this.endValue,\n        this.valueProgress,\n        this.durationProgress,\n      );\n      this.unregister();\n    } else {\n      this._onChange(this.value, this.valueProgress, this.durationProgress);\n      requestAnimFrame(this.tick);\n    }\n  }\n\n  private register() {\n    runningAnimations.push(this as unknown as AnimationBase);\n  }\n\n  private unregister() {\n    runningAnimations.remove(this as unknown as AnimationBase);\n  }\n\n  abort() {\n    this._state = 'aborted';\n    this.unregister();\n  }\n}\n", "import { AnimationBase } from './AnimationBase';\nimport type { ValueAnimationOptions } from './types';\n\nexport class ValueAnimation extends AnimationBase<number> {\n  constructor({\n    startValue = 0,\n    endValue = 100,\n    ...otherOptions\n  }: ValueAnimationOptions) {\n    super({\n      ...otherOptions,\n      startValue,\n      byValue: endValue - startValue,\n    });\n  }\n\n  protected calculate(timeElapsed: number) {\n    const value = this.easing(\n      timeElapsed,\n      this.startValue,\n      this.byValue,\n      this.duration,\n    );\n    return {\n      value,\n      valueProgress: Math.abs((value - this.startValue) / this.byValue),\n    };\n  }\n}\n", "import { AnimationBase } from './AnimationBase';\nimport type { ArrayAnimationOptions } from './types';\n\nexport class ArrayAnimation extends AnimationBase<number[]> {\n  constructor({\n    startValue = [0],\n    endValue = [100],\n    ...options\n  }: ArrayAnimationOptions) {\n    super({\n      ...options,\n      startValue,\n      byValue: endValue.map((value, i) => value - startValue[i]),\n    });\n  }\n  protected calculate(timeElapsed: number) {\n    const values = this.startValue.map((value, i) =>\n      this.easing(timeElapsed, value, this.byValue[i], this.duration, i),\n    );\n    return {\n      value: values,\n      valueProgress: Math.abs(\n        (values[0] - this.startValue[0]) / this.byValue[0],\n      ),\n    };\n  }\n}\n", "import { Color } from '../../color/Color';\nimport type { TRGBAColorSource } from '../../color/typedefs';\nimport { halfPI } from '../../constants';\nimport { capValue } from '../misc/capValue';\nimport { AnimationBase } from './AnimationBase';\nimport type {\n  ColorAnimationOptions,\n  TEasingFunction,\n  TOnAnimationChangeCallback,\n} from './types';\n\nconst defaultColorEasing: TEasingFunction = (\n  timeElapsed,\n  startValue,\n  byValue,\n  duration,\n) => {\n  const durationProgress = 1 - Math.cos((timeElapsed / duration) * halfPI);\n  return startValue + byValue * durationProgress;\n};\n\nconst wrapColorCallback = <R>(\n  callback?: TOnAnimationChangeCallback<string, R>,\n) =>\n  callback &&\n  ((rgba: TRGBAColorSource, valueProgress: number, durationProgress: number) =>\n    callback(new Color(rgba).toRgba(), valueProgress, durationProgress));\n\nexport class ColorAnimation extends AnimationBase<TRGBAColorSource> {\n  constructor({\n    startValue,\n    endValue,\n    easing = defaultColorEasing,\n    onChange,\n    onComplete,\n    abort,\n    ...options\n  }: ColorAnimationOptions) {\n    const startColor = new Color(startValue).getSource();\n    const endColor = new Color(endValue).getSource();\n    super({\n      ...options,\n      startValue: startColor,\n      byValue: endColor.map(\n        (value, i) => value - startColor[i],\n      ) as TRGBAColorSource,\n      easing,\n      onChange: wrapColorCallback(onChange),\n      onComplete: wrapColorCallback(onComplete),\n      abort: wrapColorCallback(abort),\n    });\n  }\n  protected calculate(timeElapsed: number) {\n    const [r, g, b, a] = this.startValue.map((value, i) =>\n      this.easing(timeElapsed, value, this.byValue[i], this.duration, i),\n    ) as TRGBAColorSource;\n    const value = [\n      ...[r, g, b].map(Math.round),\n      capValue(0, a, 1),\n    ] as TRGBAColorSource;\n    return {\n      value,\n      valueProgress:\n        // to correctly calculate the change ratio we must find a changed value\n        value\n          .map((p, i) =>\n            this.byValue[i] !== 0\n              ? Math.abs((p - this.startValue[i]) / this.byValue[i])\n              : 0,\n          )\n          .find((p) => p !== 0) || 0,\n    };\n  }\n}\n", "import { ValueAnimation } from './ValueAnimation';\nimport { ArrayAnimation } from './ArrayAnimation';\nimport { ColorAnimation } from './ColorAnimation';\nimport type {\n  ValueAnimationOptions,\n  ArrayAnimationOptions,\n  ColorAnimationOptions,\n} from './types';\nimport type { TColorArg } from '../../color/typedefs';\n\nexport type TAnimation<T extends number | number[] | TColorArg> =\n  T extends TColorArg\n    ? ColorAnimation\n    : T extends number[]\n      ? ArrayAnimation\n      : ValueAnimation;\n\nconst isArrayAnimation = (\n  options: ArrayAnimationOptions | ValueAnimationOptions,\n): options is ArrayAnimationOptions => {\n  return Array.isArray(options.startValue) || Array.isArray(options.endValue);\n};\n\n/**\n * Changes value(s) from startValue to endValue within a certain period of time,\n * invoking callbacks as the value(s) change.\n *\n * @example\n * animate({\n *   startValue: 1,\n *   endValue: 0,\n *   onChange: (v) => {\n *     obj.set('opacity', v);\n *     // since we are running in a requested frame we should call `renderAll` and not `requestRenderAll`\n *     canvas.renderAll();\n *   }\n * });\n *\n * @example Using lists:\n * animate({\n *   startValue: [1, 2, 3],\n *   endValue: [2, 4, 6],\n *   onChange: ([x, y, zoom]) => {\n *     canvas.zoomToPoint(new Point(x, y), zoom);\n *     canvas.renderAll();\n *   }\n * });\n *\n */\nexport function animate(options: ArrayAnimationOptions): ArrayAnimation;\nexport function animate(options: ValueAnimationOptions): ValueAnimation;\nexport function animate<\n  T extends ValueAnimationOptions | ArrayAnimationOptions,\n>(\n  options: T,\n): T extends ArrayAnimationOptions ? ArrayAnimation : ValueAnimation;\nexport function animate<\n  T extends ValueAnimationOptions | ArrayAnimationOptions,\n  R extends T extends ArrayAnimationOptions ? ArrayAnimation : ValueAnimation,\n>(options: T): R {\n  const animation = (\n    isArrayAnimation(options)\n      ? new ArrayAnimation(options)\n      : new ValueAnimation(options)\n  ) as R;\n  animation.start();\n  return animation;\n}\n\nexport function animateColor(options: ColorAnimationOptions) {\n  const animation = new ColorAnimation(options);\n  animation.start();\n  return animation;\n}\n", "import { Point } from './Point';\nimport { createVector } from './util/misc/vectors';\n\n/* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\nexport type IntersectionType = 'Intersection' | 'Coincident' | 'Parallel';\n\nexport class Intersection {\n  declare points: Point[];\n\n  declare status?: IntersectionType;\n\n  constructor(status?: IntersectionType) {\n    this.status = status;\n    this.points = [];\n  }\n\n  /**\n   * Used to verify if a point is alredy in the collection\n   * @param {Point} point\n   * @returns {boolean}\n   */\n  private includes(point: Point): boolean {\n    return this.points.some((p) => p.eq(point));\n  }\n\n  /**\n   * Appends points of intersection\n   * @param {...Point[]} points\n   * @return {Intersection} thisArg\n   * @chainable\n   */\n  private append(...points: Point[]): Intersection {\n    this.points = this.points.concat(\n      points.filter((point) => {\n        return !this.includes(point);\n      }),\n    );\n    return this;\n  }\n\n  /**\n   * check if point T is on the segment or line defined between A and B\n   *\n   * @param {Point} T the point we are checking for\n   * @param {Point} A one extremity of the segment\n   * @param {Point} B the other extremity of the segment\n   * @param [infinite] if true checks if `T` is on the line defined by `A` and `B`\n   * @returns true if `T` is contained\n   */\n  static isPointContained(T: Point, A: Point, B: Point, infinite = false) {\n    if (A.eq(B)) {\n      // Edge case: the segment is a point, we check for coincidence,\n      // infinite param has no meaning because there are infinite lines to consider\n      return T.eq(A);\n    } else if (A.x === B.x) {\n      // Edge case: horizontal line.\n      // we first check if T.x has the same value, and then if T.y is contained between A.y and B.y\n      return (\n        T.x === A.x &&\n        (infinite || (T.y >= Math.min(A.y, B.y) && T.y <= Math.max(A.y, B.y)))\n      );\n    } else if (A.y === B.y) {\n      // Edge case: vertical line.\n      // we first check if T.y has the same value, and then if T.x is contained between A.x and B.x\n      return (\n        T.y === A.y &&\n        (infinite || (T.x >= Math.min(A.x, B.x) && T.x <= Math.max(A.x, B.x)))\n      );\n    } else {\n      // Generic case: sloped line.\n      // we check that AT has the same slope as AB\n      // for the segment case we need both the vectors to have the same direction and for AT to be lte AB in size\n      // for the infinite case we check the absolute value of the slope, since direction is meaningless\n      const AB = createVector(A, B);\n      const AT = createVector(A, T);\n      const s = AT.divide(AB);\n      return infinite\n        ? Math.abs(s.x) === Math.abs(s.y)\n        : s.x === s.y && s.x >= 0 && s.x <= 1;\n    }\n  }\n\n  /**\n   * Use the ray casting algorithm to determine if {@link Point} is in the polygon defined by [points]{@link Point}\n   * @see https://en.wikipedia.org/wiki/Point_in_polygon\n   * @param point\n   * @param points polygon points\n   * @returns\n   */\n  static isPointInPolygon(point: Point, points: Point[]) {\n    const other = new Point(point).setX(\n      Math.min(point.x - 1, ...points.map((p) => p.x)),\n    );\n    let hits = 0;\n    for (let index = 0; index < points.length; index++) {\n      const inter = this.intersectSegmentSegment(\n        // polygon side\n        points[index],\n        points[(index + 1) % points.length],\n        // ray\n        point,\n        other,\n      );\n      if (inter.includes(point)) {\n        // point is on the polygon side\n        return true;\n      }\n      hits += Number(inter.status === 'Intersection');\n    }\n    return hits % 2 === 1;\n  }\n\n  /**\n   * Checks if a line intersects another\n   * @see {@link https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection line intersection}\n   * @see {@link https://en.wikipedia.org/wiki/Cramer%27s_rule Cramer's rule}\n   * @static\n   * @param {Point} a1\n   * @param {Point} a2\n   * @param {Point} b1\n   * @param {Point} b2\n   * @param {boolean} [aInfinite=true] check segment intersection by passing `false`\n   * @param {boolean} [bInfinite=true] check segment intersection by passing `false`\n   * @return {Intersection}\n   */\n  static intersectLineLine(\n    a1: Point,\n    a2: Point,\n    b1: Point,\n    b2: Point,\n    aInfinite = true,\n    bInfinite = true,\n  ): Intersection {\n    const a2xa1x = a2.x - a1.x,\n      a2ya1y = a2.y - a1.y,\n      b2xb1x = b2.x - b1.x,\n      b2yb1y = b2.y - b1.y,\n      a1xb1x = a1.x - b1.x,\n      a1yb1y = a1.y - b1.y,\n      uaT = b2xb1x * a1yb1y - b2yb1y * a1xb1x,\n      ubT = a2xa1x * a1yb1y - a2ya1y * a1xb1x,\n      uB = b2yb1y * a2xa1x - b2xb1x * a2ya1y;\n    if (uB !== 0) {\n      const ua = uaT / uB,\n        ub = ubT / uB;\n      if (\n        (aInfinite || (0 <= ua && ua <= 1)) &&\n        (bInfinite || (0 <= ub && ub <= 1))\n      ) {\n        return new Intersection('Intersection').append(\n          new Point(a1.x + ua * a2xa1x, a1.y + ua * a2ya1y),\n        );\n      } else {\n        return new Intersection();\n      }\n    } else {\n      if (uaT === 0 || ubT === 0) {\n        const segmentsCoincide =\n          aInfinite ||\n          bInfinite ||\n          Intersection.isPointContained(a1, b1, b2) ||\n          Intersection.isPointContained(a2, b1, b2) ||\n          Intersection.isPointContained(b1, a1, a2) ||\n          Intersection.isPointContained(b2, a1, a2);\n        return new Intersection(segmentsCoincide ? 'Coincident' : undefined);\n      } else {\n        return new Intersection('Parallel');\n      }\n    }\n  }\n\n  /**\n   * Checks if a segment intersects a line\n   * @see {@link intersectLineLine} for line intersection\n   * @static\n   * @param {Point} s1 boundary point of segment\n   * @param {Point} s2 other boundary point of segment\n   * @param {Point} l1 point on line\n   * @param {Point} l2 other point on line\n   * @return {Intersection}\n   */\n  static intersectSegmentLine(\n    s1: Point,\n    s2: Point,\n    l1: Point,\n    l2: Point,\n  ): Intersection {\n    return Intersection.intersectLineLine(s1, s2, l1, l2, false, true);\n  }\n\n  /**\n   * Checks if a segment intersects another\n   * @see {@link intersectLineLine} for line intersection\n   * @static\n   * @param {Point} a1 boundary point of segment\n   * @param {Point} a2 other boundary point of segment\n   * @param {Point} b1 boundary point of segment\n   * @param {Point} b2 other boundary point of segment\n   * @return {Intersection}\n   */\n  static intersectSegmentSegment(\n    a1: Point,\n    a2: Point,\n    b1: Point,\n    b2: Point,\n  ): Intersection {\n    return Intersection.intersectLineLine(a1, a2, b1, b2, false, false);\n  }\n\n  /**\n   * Checks if line intersects polygon\n   *\n   * @todo account for stroke\n   *\n   * @static\n   * @see {@link intersectSegmentPolygon} for segment intersection\n   * @param {Point} a1 point on line\n   * @param {Point} a2 other point on line\n   * @param {Point[]} points polygon points\n   * @param {boolean} [infinite=true] check segment intersection by passing `false`\n   * @return {Intersection}\n   */\n  static intersectLinePolygon(\n    a1: Point,\n    a2: Point,\n    points: Point[],\n    infinite = true,\n  ): Intersection {\n    const result = new Intersection();\n    const length = points.length;\n\n    for (let i = 0, b1, b2, inter; i < length; i++) {\n      b1 = points[i];\n      b2 = points[(i + 1) % length];\n      inter = Intersection.intersectLineLine(a1, a2, b1, b2, infinite, false);\n      if (inter.status === 'Coincident') {\n        return inter;\n      }\n      result.append(...inter.points);\n    }\n\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if segment intersects polygon\n   * @static\n   * @see {@link intersectLinePolygon} for line intersection\n   * @param {Point} a1 boundary point of segment\n   * @param {Point} a2 other boundary point of segment\n   * @param {Point[]} points polygon points\n   * @return {Intersection}\n   */\n  static intersectSegmentPolygon(\n    a1: Point,\n    a2: Point,\n    points: Point[],\n  ): Intersection {\n    return Intersection.intersectLinePolygon(a1, a2, points, false);\n  }\n\n  /**\n   * Checks if polygon intersects another polygon\n   *\n   * @todo account for stroke\n   *\n   * @static\n   * @param {Point[]} points1\n   * @param {Point[]} points2\n   * @return {Intersection}\n   */\n  static intersectPolygonPolygon(\n    points1: Point[],\n    points2: Point[],\n  ): Intersection {\n    const result = new Intersection(),\n      length = points1.length;\n    const coincidences: Intersection[] = [];\n\n    for (let i = 0; i < length; i++) {\n      const a1 = points1[i],\n        a2 = points1[(i + 1) % length],\n        inter = Intersection.intersectSegmentPolygon(a1, a2, points2);\n      if (inter.status === 'Coincident') {\n        coincidences.push(inter);\n        result.append(a1, a2);\n      } else {\n        result.append(...inter.points);\n      }\n    }\n\n    if (coincidences.length > 0 && coincidences.length === points1.length) {\n      return new Intersection('Coincident');\n    } else if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if polygon intersects rectangle\n   * @static\n   * @see {@link intersectPolygonPolygon} for polygon intersection\n   * @param {Point[]} points polygon points\n   * @param {Point} r1 top left point of rect\n   * @param {Point} r2 bottom right point of rect\n   * @return {Intersection}\n   */\n  static intersectPolygonRectangle(\n    points: Point[],\n    r1: Point,\n    r2: Point,\n  ): Intersection {\n    const min = r1.min(r2),\n      max = r1.max(r2),\n      topRight = new Point(max.x, min.y),\n      bottomLeft = new Point(min.x, max.y);\n\n    return Intersection.intersectPolygonPolygon(points, [\n      min,\n      topRight,\n      max,\n      bottomLeft,\n    ]);\n  }\n}\n", "import type {\n  TBBox,\n  TCornerPoint,\n  TDegree,\n  TMat2D,\n  TOriginX,\n  TOriginY,\n} from '../../typedefs';\nimport { SCALE_X, SCALE_Y, iMatrix } from '../../constants';\nimport { Intersection } from '../../Intersection';\nimport { Point } from '../../Point';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport {\n  createRotateMatrix,\n  createTranslateMatrix,\n  composeMatrix,\n  invertTransform,\n  multiplyTransformMatrices,\n  transformPoint,\n  calcPlaneRotation,\n} from '../../util/misc/matrix';\nimport { radiansToDegrees } from '../../util/misc/radiansDegreesConversion';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { StaticCanvas } from '../../canvas/StaticCanvas';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type { ControlProps } from './types/ControlProps';\nimport { resolveOrigin } from '../../util/misc/resolveOrigin';\nimport type { Group } from '../Group';\nimport { calcDimensionsMatrix } from '../../util/misc/matrix';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport { CommonMethods } from '../../CommonMethods';\nimport type { BaseProps } from './types/BaseProps';\nimport type { FillStrokeProps } from './types/FillStrokeProps';\nimport { CENTER, LEFT, TOP } from '../../constants';\n\ntype TMatrixCache = {\n  key: number[];\n  value: TMat2D;\n};\n\ntype TACoords = TCornerPoint;\n\nexport class ObjectGeometry<EventSpec extends ObjectEvents = ObjectEvents>\n  extends CommonMethods<EventSpec>\n  implements\n    Pick<ControlProps, 'padding'>,\n    BaseProps,\n    Pick<FillStrokeProps, 'strokeWidth' | 'strokeUniform'>\n{\n  // #region Geometry\n\n  declare padding: number;\n\n  /**\n   * Describe object's corner position in scene coordinates.\n   * The coordinates are derived from the following:\n   * left, top, width, height, scaleX, scaleY, skewX, skewY, angle, strokeWidth.\n   * The coordinates do not depend on viewport changes.\n   * The coordinates get updated with {@link setCoords}.\n   * You can calculate them without updating with {@link calcACoords()}\n   */\n  declare aCoords: TACoords;\n\n  /**\n   * storage cache for object transform matrix\n   */\n  declare ownMatrixCache?: TMatrixCache;\n\n  /**\n   * storage cache for object full transform matrix\n   */\n  declare matrixCache?: TMatrixCache;\n\n  /**\n   * A Reference of the Canvas where the object is actually added\n   * @type StaticCanvas | Canvas;\n   * @default undefined\n   * @private\n   */\n  declare canvas?: StaticCanvas | Canvas;\n\n  /**\n   * @returns {number} x position according to object's {@link FabricObject#originX} property in canvas coordinate plane\n   */\n  getX(): number {\n    return this.getXY().x;\n  }\n\n  /**\n   * @param {number} value x position according to object's {@link FabricObject#originX} property in canvas coordinate plane\n   */\n  setX(value: number) {\n    this.setXY(this.getXY().setX(value));\n  }\n\n  /**\n   * @returns {number} y position according to object's {@link FabricObject#originY} property in canvas coordinate plane\n   */\n  getY(): number {\n    return this.getXY().y;\n  }\n\n  /**\n   * @param {number} value y position according to object's {@link FabricObject#originY} property in canvas coordinate plane\n   */\n  setY(value: number) {\n    this.setXY(this.getXY().setY(value));\n  }\n\n  /**\n   * @returns {number} x position according to object's {@link FabricObject#originX} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link getX}\n   */\n  getRelativeX(): number {\n    return this.left;\n  }\n\n  /**\n   * @param {number} value x position according to object's {@link FabricObject#originX} property in parent's coordinate plane\\\n   * if parent is canvas then this method is identical to {@link setX}\n   */\n  setRelativeX(value: number) {\n    this.left = value;\n  }\n\n  /**\n   * @returns {number} y position according to object's {@link FabricObject#originY} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link getY}\n   */\n  getRelativeY(): number {\n    return this.top;\n  }\n\n  /**\n   * @param {number} value y position according to object's {@link FabricObject#originY} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link setY}\n   */\n  setRelativeY(value: number) {\n    this.top = value;\n  }\n\n  /**\n   * @returns {Point} x position according to object's {@link FabricObject#originX} {@link FabricObject#originY} properties in canvas coordinate plane\n   */\n  getXY(): Point {\n    const relativePosition = this.getRelativeXY();\n    return this.group\n      ? transformPoint(relativePosition, this.group.calcTransformMatrix())\n      : relativePosition;\n  }\n\n  /**\n   * Set an object position to a particular point, the point is intended in absolute ( canvas ) coordinate.\n   * You can specify {@link FabricObject#originX} and {@link FabricObject#originY} values,\n   * that otherwise are the object's current values.\n   * @example <caption>Set object's bottom left corner to point (5,5) on canvas</caption>\n   * object.setXY(new Point(5, 5), 'left', 'bottom').\n   * @param {Point} point position in scene coordinate plane\n   * @param {TOriginX} [originX] Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} [originY] Vertical origin: 'top', 'center' or 'bottom'\n   */\n  setXY(point: Point, originX?: TOriginX, originY?: TOriginY) {\n    if (this.group) {\n      point = transformPoint(\n        point,\n        invertTransform(this.group.calcTransformMatrix()),\n      );\n    }\n    this.setRelativeXY(point, originX, originY);\n  }\n\n  /**\n   * @returns {Point} x,y position according to object's {@link FabricObject#originX} {@link FabricObject#originY} properties in parent's coordinate plane\n   */\n  getRelativeXY(): Point {\n    return new Point(this.left, this.top);\n  }\n\n  /**\n   * As {@link setXY}, but in current parent's coordinate plane (the current group if any or the canvas)\n   * @param {Point} point position according to object's {@link FabricObject#originX} {@link FabricObject#originY} properties in parent's coordinate plane\n   * @param {TOriginX} [originX] Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} [originY] Vertical origin: 'top', 'center' or 'bottom'\n   */\n  setRelativeXY(\n    point: Point,\n    originX: TOriginX = this.originX,\n    originY: TOriginY = this.originY,\n  ) {\n    this.setPositionByOrigin(point, originX, originY);\n  }\n\n  /**\n   * @deprecated intermidiate method to be removed, do not use\n   */\n  protected isStrokeAccountedForInDimensions() {\n    return false;\n  }\n\n  /**\n   * @return {Point[]} [tl, tr, br, bl] in the scene plane\n   */\n  getCoords(): Point[] {\n    const { tl, tr, br, bl } =\n      this.aCoords || (this.aCoords = this.calcACoords());\n    const coords = [tl, tr, br, bl];\n    if (this.group) {\n      const t = this.group.calcTransformMatrix();\n      return coords.map((p) => transformPoint(p, t));\n    }\n    return coords;\n  }\n\n  /**\n   * Checks if object intersects with the scene rect formed by TL and BR\n   * In this case the rect is meant aligned with the axis of the canvas.\n   * TL is the TOP LEFT point while br is the BOTTOM RIGHT point\n   */\n  intersectsWithRect(tl: Point, br: Point): boolean {\n    const intersection = Intersection.intersectPolygonRectangle(\n      this.getCoords(),\n      tl,\n      br,\n    );\n    return intersection.status === 'Intersection';\n  }\n\n  /**\n   * Checks if object intersects with another object\n   * @param {Object} other Object to test\n   * @return {Boolean} true if object intersects with another object\n   */\n  intersectsWithObject(other: ObjectGeometry): boolean {\n    const intersection = Intersection.intersectPolygonPolygon(\n      this.getCoords(),\n      other.getCoords(),\n    );\n\n    return (\n      intersection.status === 'Intersection' ||\n      intersection.status === 'Coincident' ||\n      other.isContainedWithinObject(this) ||\n      this.isContainedWithinObject(other)\n    );\n  }\n\n  /**\n   * Checks if object is fully contained within area of another object\n   * @param {Object} other Object to test\n   * @return {Boolean} true if object is fully contained within area of another object\n   */\n  isContainedWithinObject(other: ObjectGeometry): boolean {\n    const points = this.getCoords();\n    return points.every((point) => other.containsPoint(point));\n  }\n\n  /**\n   * Checks if object is fully contained within the scene rect formed by TL and BR\n   */\n  isContainedWithinRect(tl: Point, br: Point): boolean {\n    const { left, top, width, height } = this.getBoundingRect();\n    return (\n      left >= tl.x &&\n      left + width <= br.x &&\n      top >= tl.y &&\n      top + height <= br.y\n    );\n  }\n\n  isOverlapping<T extends ObjectGeometry>(other: T): boolean {\n    return (\n      this.intersectsWithObject(other) ||\n      this.isContainedWithinObject(other) ||\n      other.isContainedWithinObject(this)\n    );\n  }\n\n  /**\n   * Checks if point is inside the object\n   * @param {Point} point Point to check against\n   * @return {Boolean} true if point is inside the object\n   */\n  containsPoint(point: Point): boolean {\n    return Intersection.isPointInPolygon(point, this.getCoords());\n  }\n\n  /**\n   * Checks if object is contained within the canvas with current viewportTransform\n   * the check is done stopping at first point that appears on screen\n   * @return {Boolean} true if object is fully or partially contained within canvas\n   */\n  isOnScreen(): boolean {\n    if (!this.canvas) {\n      return false;\n    }\n    const { tl, br } = this.canvas.vptCoords;\n    const points = this.getCoords();\n    // if some point is on screen, the object is on screen.\n    if (\n      points.some(\n        (point) =>\n          point.x <= br.x &&\n          point.x >= tl.x &&\n          point.y <= br.y &&\n          point.y >= tl.y,\n      )\n    ) {\n      return true;\n    }\n    // no points on screen, check intersection with absolute coordinates\n    if (this.intersectsWithRect(tl, br)) {\n      return true;\n    }\n    // check if the object is so big that it contains the entire viewport\n    return this.containsPoint(tl.midPointFrom(br));\n  }\n\n  /**\n   * Checks if object is partially contained within the canvas with current viewportTransform\n   * @return {Boolean} true if object is partially contained within canvas\n   */\n  isPartiallyOnScreen(): boolean {\n    if (!this.canvas) {\n      return false;\n    }\n    const { tl, br } = this.canvas.vptCoords;\n    if (this.intersectsWithRect(tl, br)) {\n      return true;\n    }\n    const allPointsAreOutside = this.getCoords().every(\n      (point) =>\n        (point.x >= br.x || point.x <= tl.x) &&\n        (point.y >= br.y || point.y <= tl.y),\n    );\n    // check if the object is so big that it contains the entire viewport\n    return allPointsAreOutside && this.containsPoint(tl.midPointFrom(br));\n  }\n\n  /**\n   * Returns coordinates of object's bounding rectangle (left, top, width, height)\n   * the box is intended as aligned to axis of canvas.\n   * @return {Object} Object with left, top, width, height properties\n   */\n  getBoundingRect(): TBBox {\n    return makeBoundingBoxFromPoints(this.getCoords());\n  }\n\n  /**\n   * Returns width of an object's bounding box counting transformations\n   * @todo shouldn't this account for group transform and return the actual size in canvas coordinate plane?\n   * @return {Number} width value\n   */\n  getScaledWidth(): number {\n    return this._getTransformedDimensions().x;\n  }\n\n  /**\n   * Returns height of an object bounding box counting transformations\n   * @todo shouldn't this account for group transform and return the actual size in canvas coordinate plane?\n   * @return {Number} height value\n   */\n  getScaledHeight(): number {\n    return this._getTransformedDimensions().y;\n  }\n\n  /**\n   * Scales an object (equally by x and y)\n   * @param {Number} value Scale factor\n   * @return {void}\n   */\n  scale(value: number): void {\n    this._set(SCALE_X, value);\n    this._set(SCALE_Y, value);\n    this.setCoords();\n  }\n\n  /**\n   * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\n   * @param {Number} value New width value\n   * @return {void}\n   */\n  scaleToWidth(value: number) {\n    // adjust to bounding rect factor so that rotated shapes would fit as well\n    const boundingRectFactor =\n      this.getBoundingRect().width / this.getScaledWidth();\n    return this.scale(value / this.width / boundingRectFactor);\n  }\n\n  /**\n   * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\n   * @param {Number} value New height value\n   * @return {void}\n   */\n  scaleToHeight(value: number) {\n    // adjust to bounding rect factor so that rotated shapes would fit as well\n    const boundingRectFactor =\n      this.getBoundingRect().height / this.getScaledHeight();\n    return this.scale(value / this.height / boundingRectFactor);\n  }\n\n  getCanvasRetinaScaling() {\n    return this.canvas?.getRetinaScaling() || 1;\n  }\n\n  /**\n   * Returns the object angle relative to canvas counting also the group property\n   * @returns {TDegree}\n   */\n  getTotalAngle(): TDegree {\n    return this.group\n      ? radiansToDegrees(calcPlaneRotation(this.calcTransformMatrix()))\n      : this.angle;\n  }\n\n  /**\n   * Retrieves viewportTransform from Object's canvas if available\n   * @return {TMat2D}\n   */\n  getViewportTransform(): TMat2D {\n    return this.canvas?.viewportTransform || (iMatrix.concat() as TMat2D);\n  }\n\n  /**\n   * Calculates the coordinates of the 4 corner of the bbox, in absolute coordinates.\n   * those never change with zoom or viewport changes.\n   * @return {TCornerPoint}\n   */\n  calcACoords(): TCornerPoint {\n    const rotateMatrix = createRotateMatrix({ angle: this.angle }),\n      { x, y } = this.getRelativeCenterPoint(),\n      tMatrix = createTranslateMatrix(x, y),\n      finalMatrix = multiplyTransformMatrices(tMatrix, rotateMatrix),\n      dim = this._getTransformedDimensions(),\n      w = dim.x / 2,\n      h = dim.y / 2;\n    return {\n      // corners\n      tl: transformPoint({ x: -w, y: -h }, finalMatrix),\n      tr: transformPoint({ x: w, y: -h }, finalMatrix),\n      bl: transformPoint({ x: -w, y: h }, finalMatrix),\n      br: transformPoint({ x: w, y: h }, finalMatrix),\n    };\n  }\n\n  /**\n   * Sets corner and controls position coordinates based on current angle, width and height, left and top.\n   * aCoords are used to quickly find an object on the canvas.\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   */\n  setCoords(): void {\n    this.aCoords = this.calcACoords();\n  }\n\n  transformMatrixKey(skipGroup = false): number[] {\n    let prefix: number[] = [];\n    if (!skipGroup && this.group) {\n      prefix = this.group.transformMatrixKey(skipGroup);\n    }\n    prefix.push(\n      this.top,\n      this.left,\n      this.width,\n      this.height,\n      this.scaleX,\n      this.scaleY,\n      this.angle,\n      this.strokeWidth,\n      this.skewX,\n      this.skewY,\n      +this.flipX,\n      +this.flipY,\n      resolveOrigin(this.originX),\n      resolveOrigin(this.originY),\n    );\n\n    return prefix;\n  }\n\n  /**\n   * calculate transform matrix that represents the current transformations from the\n   * object's properties.\n   * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations\n   * There are some situation in which this is useful to avoid the fake rotation.\n   * @return {TMat2D} transform matrix for the object\n   */\n  calcTransformMatrix(skipGroup = false): TMat2D {\n    let matrix = this.calcOwnMatrix();\n    if (skipGroup || !this.group) {\n      return matrix;\n    }\n    const key = this.transformMatrixKey(skipGroup),\n      cache = this.matrixCache;\n    if (cache && cache.key.every((x, i) => x === key[i])) {\n      return cache.value;\n    }\n    if (this.group) {\n      matrix = multiplyTransformMatrices(\n        this.group.calcTransformMatrix(false),\n        matrix,\n      );\n    }\n    this.matrixCache = {\n      key,\n      value: matrix,\n    };\n    return matrix;\n  }\n\n  /**\n   * calculate transform matrix that represents the current transformations from the\n   * object's properties, this matrix does not include the group transformation\n   * @return {TMat2D} transform matrix for the object\n   */\n  calcOwnMatrix(): TMat2D {\n    const key = this.transformMatrixKey(true),\n      cache = this.ownMatrixCache;\n    if (cache && cache.key === key) {\n      return cache.value;\n    }\n    const center = this.getRelativeCenterPoint(),\n      options = {\n        angle: this.angle,\n        translateX: center.x,\n        translateY: center.y,\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        skewX: this.skewX,\n        skewY: this.skewY,\n        flipX: this.flipX,\n        flipY: this.flipY,\n      },\n      value = composeMatrix(options);\n    this.ownMatrixCache = {\n      key,\n      value,\n    };\n    return value;\n  }\n\n  /**\n   * Calculate object dimensions from its properties\n   * @private\n   * @returns {Point} dimensions\n   */\n  _getNonTransformedDimensions(): Point {\n    return new Point(this.width, this.height).scalarAdd(this.strokeWidth);\n  }\n\n  /**\n   * Calculate object dimensions for controls box, including padding and canvas zoom.\n   * and active selection\n   * @private\n   * @param {object} [options] transform options\n   * @returns {Point} dimensions\n   */\n  _calculateCurrentDimensions(options?: any): Point {\n    return this._getTransformedDimensions(options)\n      .transform(this.getViewportTransform(), true)\n      .scalarAdd(2 * this.padding);\n  }\n\n  // #region Origin\n\n  declare top: number;\n  declare left: number;\n  declare width: number;\n  declare height: number;\n  declare flipX: boolean;\n  declare flipY: boolean;\n  declare scaleX: number;\n  declare scaleY: number;\n  declare skewX: number;\n  declare skewY: number;\n  /**\n   * @deprecated please use 'center' as value in new projects\n   * */\n  declare originX: TOriginX;\n  /**\n   * @deprecated please use 'center' as value in new projects\n   * */\n  declare originY: TOriginY;\n  declare angle: TDegree;\n  declare strokeWidth: number;\n  declare strokeUniform: boolean;\n\n  /**\n   * Object containing this object.\n   * can influence its size and position\n   */\n  declare group?: Group;\n\n  /**\n   * Calculate object bounding box dimensions from its properties scale, skew.\n   * This bounding box is aligned with object angle and not with canvas axis or screen.\n   * @param {Object} [options]\n   * @param {Number} [options.scaleX]\n   * @param {Number} [options.scaleY]\n   * @param {Number} [options.skewX]\n   * @param {Number} [options.skewY]\n   * @private\n   * @returns {Point} dimensions\n   */\n  _getTransformedDimensions(options: any = {}): Point {\n    const dimOptions = {\n      // if scaleX or scaleY are negative numbers,\n      // this will return dimensions that are negative.\n      // and this will break assumptions around the codebase\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      skewX: this.skewX,\n      skewY: this.skewY,\n      width: this.width,\n      height: this.height,\n      strokeWidth: this.strokeWidth,\n      // TODO remove this spread. is visible in the performance inspection\n      ...options,\n    };\n    // stroke is applied before/after transformations are applied according to `strokeUniform`\n    const strokeWidth = dimOptions.strokeWidth;\n    let preScalingStrokeValue = strokeWidth,\n      postScalingStrokeValue = 0;\n\n    if (this.strokeUniform) {\n      preScalingStrokeValue = 0;\n      postScalingStrokeValue = strokeWidth;\n    }\n    const dimX = dimOptions.width + preScalingStrokeValue,\n      dimY = dimOptions.height + preScalingStrokeValue,\n      noSkew = dimOptions.skewX === 0 && dimOptions.skewY === 0;\n    let finalDimensions;\n    if (noSkew) {\n      finalDimensions = new Point(\n        dimX * dimOptions.scaleX,\n        dimY * dimOptions.scaleY,\n      );\n    } else {\n      finalDimensions = sizeAfterTransform(\n        dimX,\n        dimY,\n        calcDimensionsMatrix(dimOptions),\n      );\n    }\n\n    return finalDimensions.scalarAdd(postScalingStrokeValue);\n  }\n\n  /**\n   * Translates the coordinates from a set of origin to another (based on the object's dimensions)\n   * @param {Point} point The point which corresponds to the originX and originY params\n   * @param {TOriginX} fromOriginX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\n   * @param {TOriginX} toOriginX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} toOriginY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToGivenOrigin(\n    point: Point,\n    fromOriginX: TOriginX,\n    fromOriginY: TOriginY,\n    toOriginX: TOriginX,\n    toOriginY: TOriginY,\n  ): Point {\n    let x = point.x,\n      y = point.y;\n    const offsetX = resolveOrigin(toOriginX) - resolveOrigin(fromOriginX),\n      offsetY = resolveOrigin(toOriginY) - resolveOrigin(fromOriginY);\n\n    if (offsetX || offsetY) {\n      const dim = this._getTransformedDimensions();\n      x += offsetX * dim.x;\n      y += offsetY * dim.y;\n    }\n\n    return new Point(x, y);\n  }\n\n  /**\n   * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n   * @param {Point} point The point which corresponds to the originX and originY params\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToCenterPoint(\n    point: Point,\n    originX: TOriginX,\n    originY: TOriginY,\n  ): Point {\n    if (originX === CENTER && originY === CENTER) {\n      return point;\n    }\n    const p = this.translateToGivenOrigin(\n      point,\n      originX,\n      originY,\n      CENTER,\n      CENTER,\n    );\n    if (this.angle) {\n      return p.rotate(degreesToRadians(this.angle), point);\n    }\n    return p;\n  }\n\n  /**\n   * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\n   * @param {Point} center The point which corresponds to center of the object\n   * @param {OriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {OriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToOriginPoint(\n    center: Point,\n    originX: TOriginX,\n    originY: TOriginY,\n  ): Point {\n    const p = this.translateToGivenOrigin(\n      center,\n      CENTER,\n      CENTER,\n      originX,\n      originY,\n    );\n    if (this.angle) {\n      return p.rotate(degreesToRadians(this.angle), center);\n    }\n    return p;\n  }\n\n  /**\n   * Returns the center coordinates of the object relative to canvas\n   * @return {Point}\n   */\n  getCenterPoint(): Point {\n    const relCenter = this.getRelativeCenterPoint();\n    return this.group\n      ? transformPoint(relCenter, this.group.calcTransformMatrix())\n      : relCenter;\n  }\n\n  /**\n   * Returns the center coordinates of the object relative to it's parent\n   * @return {Point}\n   */\n  getRelativeCenterPoint(): Point {\n    return this.translateToCenterPoint(\n      new Point(this.left, this.top),\n      this.originX,\n      this.originY,\n    );\n  }\n\n  /**\n   * Returns the position of the object as if it has a different origin.\n   * Take an object that has left, top set to 100, 100 with origin 'left', 'top'.\n   * Return the values of left top ( wrapped in a point ) that you would need to keep\n   * the same position if origin where different.\n   * Alternatively you can use this to also find which point in the parent plane is a specific origin\n   * ( where is the bottom right corner of my object? )\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  getPointByOrigin(originX: TOriginX, originY: TOriginY): Point {\n    return this.translateToOriginPoint(\n      this.getRelativeCenterPoint(),\n      originX,\n      originY,\n    );\n  }\n\n  /**\n   * Sets the position of the object taking into consideration the object's origin\n   * @param {Point} pos The new position of the object\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {void}\n   */\n  setPositionByOrigin(pos: Point, originX: TOriginX, originY: TOriginY) {\n    const center = this.translateToCenterPoint(pos, originX, originY),\n      position = this.translateToOriginPoint(\n        center,\n        this.originX,\n        this.originY,\n      );\n    this.set({ left: position.x, top: position.y });\n  }\n\n  /**\n   * @private\n   */\n  _getLeftTopCoords() {\n    return this.translateToOriginPoint(\n      this.getRelativeCenterPoint(),\n      LEFT,\n      TOP,\n    );\n  }\n}\n", "import { cache } from '../../cache';\nimport { config } from '../../config';\nimport {\n  ALIASING_LIMIT,\n  CENTER,\n  iMatrix,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  STROKE,\n  FILL,\n  TOP,\n  VERSION,\n} from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport { Shadow } from '../../Shadow';\nimport type {\n  TDegree,\n  TFiller,\n  TSize,\n  TCacheCanvasDimensions,\n  Abortable,\n  TOptions,\n  ImageFormat,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { runningAnimations } from '../../util/animation/AnimationRegistry';\nimport { capValue } from '../../util/misc/capValue';\nimport {\n  createCanvasElement,\n  createCanvasElementFor,\n  toDataURL,\n  toBlob,\n} from '../../util/misc/dom';\nimport { invertTransform, qrDecompose } from '../../util/misc/matrix';\nimport { enlivenObjectEnlivables } from '../../util/misc/objectEnlive';\nimport {\n  resetObjectTransform,\n  saveObjectTransform,\n} from '../../util/misc/objectTransforms';\nimport { sendObjectToPlane } from '../../util/misc/planeChange';\nimport { pick, pickBy } from '../../util/misc/pick';\nimport { toFixed } from '../../util/misc/toFixed';\nimport type { Group } from '../Group';\nimport { StaticCanvas } from '../../canvas/StaticCanvas';\nimport { isFiller, isSerializableFiller } from '../../util/typeAssertions';\nimport type { FabricImage } from '../Image';\nimport {\n  cacheProperties,\n  fabricObjectDefaultValues,\n  stateProperties,\n} from './defaultValues';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { SerializedObjectProps } from './types/SerializedObjectProps';\nimport type { ObjectProps } from './types/ObjectProps';\nimport { getDevicePixelRatio, getEnv } from '../../env';\nimport { log } from '../../util/internals/console';\nimport type { TColorArg } from '../../color/typedefs';\nimport type { TAnimation } from '../../util/animation/animate';\nimport { animate, animateColor } from '../../util/animation/animate';\nimport type {\n  AnimationOptions,\n  ArrayAnimationOptions,\n  ColorAnimationOptions,\n  ValueAnimationOptions,\n} from '../../util/animation/types';\nimport { ObjectGeometry } from './ObjectGeometry';\n\ntype TAncestor = FabricObject;\ntype TCollection = Group;\n\nexport type Ancestors =\n  | [FabricObject | Group]\n  | [FabricObject | Group, ...Group[]]\n  | Group[];\n\nexport type AncestryComparison = {\n  /**\n   * common ancestors of `this` and`other`(may include`this` | `other`)\n   */\n  common: Ancestors;\n  /**\n   * ancestors that are of `this` only\n   */\n  fork: Ancestors;\n  /**\n   * ancestors that are of `other` only\n   */\n  otherFork: Ancestors;\n};\n\nexport type TCachedFabricObject<T extends FabricObject = FabricObject> = T &\n  Required<\n    Pick<\n      T,\n      | 'zoomX'\n      | 'zoomY'\n      | '_cacheCanvas'\n      | '_cacheContext'\n      | 'cacheTranslationX'\n      | 'cacheTranslationY'\n    >\n  > & {\n    _cacheContext: CanvasRenderingContext2D;\n  };\n\nexport type ObjectToCanvasElementOptions = {\n  format?: ImageFormat;\n  /** Multiplier to scale by */\n  multiplier?: number;\n  /** Cropping left offset. Introduced in v1.2.14 */\n  left?: number;\n  /** Cropping top offset. Introduced in v1.2.14 */\n  top?: number;\n  /** Cropping width. Introduced in v1.2.14 */\n  width?: number;\n  /** Cropping height. Introduced in v1.2.14 */\n  height?: number;\n  /** Enable retina scaling for clone image. Introduce in 1.6.4 */\n  enableRetinaScaling?: boolean;\n  /** Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4 */\n  withoutTransform?: boolean;\n  /** Remove current object shadow. Introduced in 2.4.2 */\n  withoutShadow?: boolean;\n  /** Account for canvas viewport transform */\n  viewportTransform?: boolean;\n  /** Function to create the output canvas to export onto */\n  canvasProvider?: <T extends StaticCanvas>(el?: HTMLCanvasElement) => T;\n};\n\ntype toDataURLOptions = ObjectToCanvasElementOptions & {\n  quality?: number;\n};\n\nexport type DrawContext =\n  | {\n      parentClipPaths: FabricObject[];\n      width: number;\n      height: number;\n      cacheTranslationX: number;\n      cacheTranslationY: number;\n      zoomX: number;\n      zoomY: number;\n    }\n  | Record<string, never>;\n\n/**\n * Root object class from which all 2d shape classes inherit from\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\n *\n * @fires added\n * @fires removed\n *\n * @fires selected\n * @fires deselected\n *\n * @fires rotating\n * @fires scaling\n * @fires moving\n * @fires skewing\n * @fires modified\n *\n * @fires mousedown\n * @fires mouseup\n * @fires mouseover\n * @fires mouseout\n * @fires mousewheel\n * @fires mousedblclick\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drop\n */\nexport class FabricObject<\n    Props extends TOptions<ObjectProps> = Partial<ObjectProps>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends ObjectGeometry<EventSpec>\n  implements ObjectProps\n{\n  declare minScaleLimit: number;\n\n  declare opacity: number;\n\n  declare paintFirst: 'fill' | 'stroke';\n  declare fill: string | TFiller | null;\n  declare fillRule: CanvasFillRule;\n  declare stroke: string | TFiller | null;\n  declare strokeDashArray: number[] | null;\n  declare strokeDashOffset: number;\n  declare strokeLineCap: CanvasLineCap;\n  declare strokeLineJoin: CanvasLineJoin;\n  declare strokeMiterLimit: number;\n\n  declare globalCompositeOperation: GlobalCompositeOperation;\n  declare backgroundColor: string;\n\n  declare shadow: Shadow | null;\n\n  declare visible: boolean;\n\n  declare includeDefaultValues: boolean;\n  declare excludeFromExport: boolean;\n\n  declare objectCaching: boolean;\n\n  declare clipPath?: FabricObject;\n  declare inverted: boolean;\n  declare absolutePositioned: boolean;\n  declare centeredRotation: boolean;\n  declare centeredScaling: boolean;\n\n  /**\n   * This list of properties is used to check if the state of an object is changed.\n   * This state change now is only used for children of groups to understand if a group\n   * needs its cache regenerated during a .set call\n   * @type Array\n   */\n  static stateProperties: string[] = stateProperties;\n\n  /**\n   * List of properties to consider when checking if cache needs refresh\n   * Those properties are checked by\n   * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\n   * and refreshed at the next render\n   * @type Array\n   */\n  static cacheProperties: string[] = cacheProperties;\n\n  /**\n   * When set to `true`, object's cache will be rerendered next render call.\n   * since 1.7.0\n   * @type Boolean\n   * @default true\n   */\n  declare dirty: boolean;\n\n  /**\n   * Quick access for the _cacheCanvas rendering context\n   * This is part of the objectCaching feature\n   * since 1.7.0\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  _cacheContext: CanvasRenderingContext2D | null = null;\n\n  /**\n   * A reference to the HTMLCanvasElement that is used to contain the cache of the object\n   * this canvas element is resized and cleared as needed\n   * Is marked private, you can read it, don't use it since it is handled by fabric\n   * since 1.7.0\n   * @type HTMLCanvasElement\n   * @default undefined\n   * @private\n   */\n  declare _cacheCanvas?: HTMLCanvasElement;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, X axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomX?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomY?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationX?: number;\n\n  /**\n   * translation of the cacheCanvas away from the center, for subpixel accuracy and crispness\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationY?: number;\n\n  /**\n   * A reference to the parent of the object, usually a Group\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare group?: Group;\n\n  /**\n   * Indicate if the object is sitting on a cache dedicated to it\n   * or is part of a larger cache for many object ( a group for example)\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare ownCaching?: boolean;\n\n  /**\n   * Private. indicates if the object inside a group is on a transformed context or not\n   * or is part of a larger cache for many object ( a group for example)\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  declare _transformDone?: boolean;\n\n  static ownDefaults = fabricObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return FabricObject.ownDefaults;\n  }\n\n  /**\n   * The class type.\n   * This is used for serialization and deserialization purposes and internally it can be used\n   * to identify classes.\n   * When we transform a class in a plain JS object we need a way to recognize which class it was,\n   * and the type is the way we do that. It has no other purposes and you should not give one.\n   * Hard to reach on instances and please do not use to drive instance's logic (this.constructor.type).\n   * To idenfity a class use instanceof class ( instanceof Rect ).\n   * We do not do that in fabricJS code because we want to try to have code splitting possible.\n   */\n  static type = 'FabricObject';\n\n  /**\n   * Legacy identifier of the class. Prefer using utils like isType or instanceOf\n   * Will be removed in fabric 7 or 8.\n   * The setter exists to avoid type errors in old code and possibly current deserialization code.\n   * DO NOT build new code around this type value\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    const name = (this.constructor as typeof FabricObject).type;\n    if (name === 'FabricObject') {\n      return 'object';\n    }\n    return name.toLowerCase();\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, FabricObject.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * Create a the canvas used to keep the cached copy of the object\n   * @private\n   */\n  _createCacheCanvas() {\n    this._cacheCanvas = createCanvasElement();\n    this._cacheContext = this._cacheCanvas.getContext('2d');\n    this._updateCacheCanvas();\n    // if canvas gets created, is empty, so dirty.\n    this.dirty = true;\n  }\n\n  /**\n   * Limit the cache dimensions so that X * Y do not cross config.perfLimitSizeTotal\n   * and each side do not cross fabric.cacheSideLimit\n   * those numbers are configurable so that you can get as much detail as you want\n   * making bargain with performances.\n   * @param {Object} dims\n   * @param {Object} dims.width width of canvas\n   * @param {Object} dims.height height of canvas\n   * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _limitCacheSize(\n    dims: TSize & { zoomX: number; zoomY: number; capped: boolean } & any,\n  ) {\n    const width = dims.width,\n      height = dims.height,\n      max = config.maxCacheSideLimit,\n      min = config.minCacheSideLimit;\n    if (\n      width <= max &&\n      height <= max &&\n      width * height <= config.perfLimitSizeTotal\n    ) {\n      if (width < min) {\n        dims.width = min;\n      }\n      if (height < min) {\n        dims.height = min;\n      }\n      return dims;\n    }\n    const ar = width / height,\n      [limX, limY] = cache.limitDimsByArea(ar),\n      x = capValue(min, limX, max),\n      y = capValue(min, limY, max);\n    if (width > x) {\n      dims.zoomX /= width / x;\n      dims.width = x;\n      dims.capped = true;\n    }\n    if (height > y) {\n      dims.zoomY /= height / y;\n      dims.height = y;\n      dims.capped = true;\n    }\n    return dims;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @return {Object}.x width of object to be cached\n   * @return {Object}.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const objectScale = this.getTotalObjectScaling(),\n      // calculate dimensions without skewing\n      dim = this._getTransformedDimensions({ skewX: 0, skewY: 0 }),\n      neededX = (dim.x * objectScale.x) / this.scaleX,\n      neededY = (dim.y * objectScale.y) / this.scaleY;\n    return {\n      // for sure this ALIASING_LIMIT is slightly creating problem\n      // in situation in which the cache canvas gets an upper limit\n      // also objectScale contains already scaleX and scaleY\n      width: Math.ceil(neededX + ALIASING_LIMIT),\n      height: Math.ceil(neededY + ALIASING_LIMIT),\n      zoomX: objectScale.x,\n      zoomY: objectScale.y,\n      x: neededX,\n      y: neededY,\n    };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const canvas = this._cacheCanvas!,\n      context = this._cacheContext,\n      { width, height, zoomX, zoomY, x, y } = this._limitCacheSize(\n        this._getCacheCanvasDimensions(),\n      ),\n      dimensionsChanged = width !== canvas.width || height !== canvas.height,\n      zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY;\n\n    if (!canvas || !context) {\n      return false;\n    }\n\n    const shouldRedraw = dimensionsChanged || zoomChanged;\n\n    if (shouldRedraw) {\n      if (width !== canvas.width || height !== canvas.height) {\n        canvas.width = width;\n        canvas.height = height;\n      } else {\n        context.setTransform(1, 0, 0, 1, 0, 0);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      }\n      const drawingWidth = x / 2;\n      const drawingHeight = y / 2;\n      this.cacheTranslationX =\n        Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\n      this.cacheTranslationY =\n        Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\n      context.translate(this.cacheTranslationX, this.cacheTranslationY);\n      context.scale(zoomX, zoomY);\n      this.zoomX = zoomX;\n      this.zoomY = zoomY;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Sets object's properties from options, for class constructor only.\n   * Needs to be overridden for different defaults.\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected setOptions(options: Record<string, any> = {}) {\n    this._setOptions(options);\n  }\n\n  /**\n   * Transforms context when rendering an object\n   * @param {CanvasRenderingContext2D} ctx Context\n   */\n  transform(ctx: CanvasRenderingContext2D) {\n    const needFullTransform =\n      (this.group && !this.group._transformDone) ||\n      (this.group && this.canvas && ctx === (this.canvas as Canvas).contextTop);\n    const m = this.calcTransformMatrix(!needFullTransform);\n    ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling\n   * @return {Point}\n   */\n  getObjectScaling() {\n    // if the object is a top level one, on the canvas, we go for simple aritmetic\n    // otherwise the complex method with angles will return approximations and decimals\n    // and will likely kill the cache when not needed\n    // https://github.com/fabricjs/fabric.js/issues/7157\n    if (!this.group) {\n      return new Point(Math.abs(this.scaleX), Math.abs(this.scaleY));\n    }\n    // if we are inside a group total zoom calculation is complex, we defer to generic matrices\n    const options = qrDecompose(this.calcTransformMatrix());\n    return new Point(Math.abs(options.scaleX), Math.abs(options.scaleY));\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling, zoom and retina\n   * @return {Object} object with scaleX and scaleY properties\n   */\n  getTotalObjectScaling() {\n    const scale = this.getObjectScaling();\n    if (this.canvas) {\n      const zoom = this.canvas.getZoom();\n      const retina = this.getCanvasRetinaScaling();\n      return scale.scalarMultiply(zoom * retina);\n    }\n    return scale;\n  }\n\n  /**\n   * Return the object opacity counting also the group property\n   * @return {Number}\n   */\n  getObjectOpacity() {\n    let opacity = this.opacity;\n    if (this.group) {\n      opacity *= this.group.getObjectOpacity();\n    }\n    return opacity;\n  }\n\n  /**\n   * Makes sure the scale is valid and modifies it if necessary\n   * @todo: this is a control action issue, not a geometry one\n   * @private\n   * @param {Number} value, unconstrained\n   * @return {Number} constrained value;\n   */\n  _constrainScale(value: number): number {\n    if (Math.abs(value) < this.minScaleLimit) {\n      if (value < 0) {\n        return -this.minScaleLimit;\n      } else {\n        return this.minScaleLimit;\n      }\n    } else if (value === 0) {\n      return 0.0001;\n    }\n    return value;\n  }\n\n  /**\n   * Handles setting values on the instance and handling internal side effects\n   * @protected\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    if (key === SCALE_X || key === SCALE_Y) {\n      value = this._constrainScale(value);\n    }\n    if (key === SCALE_X && value < 0) {\n      this.flipX = !this.flipX;\n      value *= -1;\n    } else if (key === 'scaleY' && value < 0) {\n      this.flipY = !this.flipY;\n      value *= -1;\n      // i don't like this automatic initialization here\n    } else if (key === 'shadow' && value && !(value instanceof Shadow)) {\n      value = new Shadow(value);\n    }\n\n    const isChanged = this[key as keyof this] !== value;\n    this[key as keyof this] = value;\n\n    // invalidate caches\n    if (\n      isChanged &&\n      (this.constructor as typeof FabricObject).cacheProperties.includes(key)\n    ) {\n      this.dirty = true;\n    }\n    // a dirty child makes the parent dirty.\n    // but a non dirty child does not make the parent not dirty.\n    // the parent could be dirty for some other reason.\n    this.parent &&\n      (this.dirty ||\n        (isChanged &&\n          (this.constructor as typeof FabricObject).stateProperties.includes(\n            key,\n          ))) &&\n      this.parent._set('dirty', true);\n\n    return this;\n  }\n\n  /*\n   * @private\n   * return if the object would be visible in rendering\n   * @memberOf FabricObject.prototype\n   * @return {Boolean}\n   */\n  isNotVisible() {\n    return (\n      this.opacity === 0 ||\n      (!this.width && !this.height && this.strokeWidth === 0) ||\n      !this.visible\n    );\n  }\n\n  /**\n   * Renders an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    // do not render if width/height are zeros or object is not visible\n    if (this.isNotVisible()) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    ctx.save();\n    this._setupCompositeOperation(ctx);\n    this.drawSelectionBackground(ctx);\n    this.transform(ctx);\n    this._setOpacity(ctx);\n    this._setShadow(ctx);\n    if (this.shouldCache()) {\n      (this as TCachedFabricObject).renderCache();\n      (this as TCachedFabricObject).drawCacheOnCanvas(ctx);\n    } else {\n      this._removeCacheCanvas();\n      this.drawObject(ctx, false, {});\n      this.dirty = false;\n    }\n    ctx.restore();\n  }\n\n  drawSelectionBackground(_ctx: CanvasRenderingContext2D) {\n    /* no op */\n  }\n\n  renderCache(this: TCachedFabricObject, options?: any) {\n    options = options || {};\n    if (!this._cacheCanvas || !this._cacheContext) {\n      this._createCacheCanvas();\n    }\n    if (this.isCacheDirty() && this._cacheContext) {\n      const { zoomX, zoomY, cacheTranslationX, cacheTranslationY } = this;\n      const { width, height } = this._cacheCanvas;\n      this.drawObject(this._cacheContext, options.forClipping, {\n        zoomX,\n        zoomY,\n        cacheTranslationX,\n        cacheTranslationY,\n        width,\n        height,\n        parentClipPaths: [],\n      });\n      this.dirty = false;\n    }\n  }\n\n  /**\n   * Remove cacheCanvas and its dimensions from the objects\n   */\n  _removeCacheCanvas() {\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  /**\n   * return true if the object will draw a stroke\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when stroke happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the stroke is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasStroke() {\n    return (\n      this.stroke && this.stroke !== 'transparent' && this.strokeWidth !== 0\n    );\n  }\n\n  /**\n   * return true if the object will draw a fill\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when fill happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the fill is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasFill() {\n    return this.fill && this.fill !== 'transparent';\n  }\n\n  /**\n   * When returns `true`, force the object to have its own cache, even if it is inside a group\n   * it may be needed when your object behave in a particular way on the cache and always needs\n   * its own isolated canvas to render correctly.\n   * Created to be overridden\n   * since 1.7.12\n   * @returns Boolean\n   */\n  needsItsOwnCache() {\n    // TODO re-evaluate this shadow condition\n    if (\n      this.paintFirst === STROKE &&\n      this.hasFill() &&\n      this.hasStroke() &&\n      !!this.shadow\n    ) {\n      return true;\n    }\n    if (this.clipPath) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Decide if the object should cache or not. Create its own cache level\n   * objectCaching is a global flag, wins over everything\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * Read as: cache if is needed, or if the feature is enabled but we are not already caching.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    this.ownCaching =\n      (this.objectCaching && (!this.parent || !this.parent.isOnACache())) ||\n      this.needsItsOwnCache();\n    return this.ownCaching;\n  }\n\n  /**\n   * Check if this object will cast a shadow with an offset.\n   * used by Group.shouldCache to know if child has a shadow recursively\n   * @return {Boolean}\n   * @deprecated\n   */\n  willDrawShadow() {\n    return (\n      !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0)\n    );\n  }\n\n  /**\n   * Execute the drawing operation for an object clipPath\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {FabricObject} clipPath\n   */\n  drawClipPathOnCache(\n    ctx: CanvasRenderingContext2D,\n    clipPath: FabricObject,\n    canvasWithClipPath: HTMLCanvasElement,\n  ) {\n    ctx.save();\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4\n    if (clipPath.inverted) {\n      ctx.globalCompositeOperation = 'destination-out';\n    } else {\n      ctx.globalCompositeOperation = 'destination-in';\n    }\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.drawImage(canvasWithClipPath, 0, 0);\n    ctx.restore();\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {boolean} forClipping apply clipping styles\n   * @param {DrawContext} context additional context for rendering\n   */\n  drawObject(\n    ctx: CanvasRenderingContext2D,\n    forClipping: boolean | undefined,\n    context: DrawContext,\n  ) {\n    const originalFill = this.fill,\n      originalStroke = this.stroke;\n    if (forClipping) {\n      this.fill = 'black';\n      this.stroke = '';\n      this._setClippingProperties(ctx);\n    } else {\n      this._renderBackground(ctx);\n    }\n    this._render(ctx);\n    this._drawClipPath(ctx, this.clipPath, context);\n    this.fill = originalFill;\n    this.stroke = originalStroke;\n  }\n\n  private createClipPathLayer(\n    this: TCachedFabricObject,\n    clipPath: FabricObject,\n    context: DrawContext,\n  ) {\n    const canvas = createCanvasElementFor(context as TSize);\n    const ctx = canvas.getContext('2d')!;\n    ctx.translate(context.cacheTranslationX, context.cacheTranslationY);\n    ctx.scale(context.zoomX, context.zoomY);\n    clipPath._cacheCanvas = canvas;\n    context.parentClipPaths.forEach((prevClipPath) => {\n      prevClipPath.transform(ctx);\n    });\n    context.parentClipPaths.push(clipPath);\n    if (clipPath.absolutePositioned) {\n      const m = invertTransform(this.calcTransformMatrix());\n      ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    }\n    clipPath.transform(ctx);\n    clipPath.drawObject(ctx, true, context);\n    return canvas;\n  }\n\n  /**\n   * Prepare clipPath state and cache and draw it on instance's cache\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {FabricObject} clipPath\n   */\n  _drawClipPath(\n    ctx: CanvasRenderingContext2D,\n    clipPath: FabricObject | undefined,\n    context: DrawContext,\n  ) {\n    if (!clipPath) {\n      return;\n    }\n    // needed to setup _transformDone\n    // TODO find a better solution?\n    clipPath._transformDone = true;\n    const canvas = (this as TCachedFabricObject).createClipPathLayer(\n      clipPath,\n      context,\n    );\n    this.drawClipPathOnCache(ctx, clipPath, canvas);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(this: TCachedFabricObject, ctx: CanvasRenderingContext2D) {\n    ctx.scale(1 / this.zoomX, 1 / this.zoomY);\n    ctx.drawImage(\n      this._cacheCanvas,\n      -this.cacheTranslationX,\n      -this.cacheTranslationY,\n    );\n  }\n\n  /**\n   * Check if cache is dirty and if is dirty clear the context.\n   * This check has a big side effect, it changes the underlying cache canvas if necessary.\n   * Do not call this method on your own to check if the cache is dirty, because if it is,\n   * it is also going to wipe the cache. This is badly designed and needs to be fixed.\n   * @param {Boolean} skipCanvas skip canvas checks because this object is painted\n   * on parent canvas.\n   */\n  isCacheDirty(skipCanvas = false) {\n    if (this.isNotVisible()) {\n      return false;\n    }\n    const canvas = this._cacheCanvas;\n    const ctx = this._cacheContext;\n    if (canvas && ctx && !skipCanvas && this._updateCacheCanvas()) {\n      // in this case the context is already cleared.\n      return true;\n    } else {\n      if (this.dirty || (this.clipPath && this.clipPath.absolutePositioned)) {\n        if (canvas && ctx && !skipCanvas) {\n          ctx.save();\n          ctx.setTransform(1, 0, 0, 1, 0, 0);\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.restore();\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Draws a background for the object big as its untransformed dimensions\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.backgroundColor) {\n      return;\n    }\n    const dim = this._getNonTransformedDimensions();\n    ctx.fillStyle = this.backgroundColor;\n\n    ctx.fillRect(-dim.x / 2, -dim.y / 2, dim.x, dim.y);\n    // if there is background color no other shadows\n    // should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setOpacity(ctx: CanvasRenderingContext2D) {\n    if (this.group && !this.group._transformDone) {\n      ctx.globalAlpha = this.getObjectOpacity();\n    } else {\n      ctx.globalAlpha *= this.opacity;\n    }\n  }\n\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    decl: Pick<\n      this,\n      | 'stroke'\n      | 'strokeWidth'\n      | 'strokeLineCap'\n      | 'strokeDashOffset'\n      | 'strokeLineJoin'\n      | 'strokeMiterLimit'\n    >,\n  ) {\n    const stroke = decl.stroke;\n    if (stroke) {\n      ctx.lineWidth = decl.strokeWidth;\n      ctx.lineCap = decl.strokeLineCap;\n      ctx.lineDashOffset = decl.strokeDashOffset;\n      ctx.lineJoin = decl.strokeLineJoin;\n      ctx.miterLimit = decl.strokeMiterLimit;\n      if (isFiller(stroke)) {\n        if (\n          (stroke as Gradient<'linear'>).gradientUnits === 'percentage' ||\n          (stroke as Gradient<'linear'>).gradientTransform ||\n          (stroke as Pattern).patternTransform\n        ) {\n          // need to transform gradient in a pattern.\n          // this is a slow process. If you are hitting this codepath, and the object\n          // is not using caching, you should consider switching it on.\n          // we need a canvas as big as the current object caching canvas.\n          this._applyPatternForTransformedGradient(ctx, stroke);\n        } else {\n          // is a simple gradient or pattern\n          ctx.strokeStyle = stroke.toLive(ctx)!;\n          this._applyPatternGradientTransform(ctx, stroke);\n        }\n      } else {\n        // is a color\n        ctx.strokeStyle = decl.stroke as string;\n      }\n    }\n  }\n\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    if (fill) {\n      if (isFiller(fill)) {\n        ctx.fillStyle = fill.toLive(ctx)!;\n        this._applyPatternGradientTransform(ctx, fill);\n      } else {\n        ctx.fillStyle = fill;\n      }\n    }\n  }\n\n  _setClippingProperties(ctx: CanvasRenderingContext2D) {\n    ctx.globalAlpha = 1;\n    ctx.strokeStyle = 'transparent';\n    ctx.fillStyle = '#000000';\n  }\n\n  /**\n   * @private\n   * Sets line dash\n   * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\n   * @param {Array} dashArray array representing dashes\n   */\n  _setLineDash(ctx: CanvasRenderingContext2D, dashArray?: number[] | null) {\n    if (!dashArray || dashArray.length === 0) {\n      return;\n    }\n    ctx.setLineDash(dashArray);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    const shadow = this.shadow,\n      canvas = this.canvas,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      [sx, , , sy] = canvas?.viewportTransform || iMatrix,\n      multX = sx * retinaScaling,\n      multY = sy * retinaScaling,\n      scaling = shadow.nonScaling ? new Point(1, 1) : this.getObjectScaling();\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur =\n      (shadow.blur *\n        config.browserShadowBlurConstant *\n        (multX + multY) *\n        (scaling.x + scaling.y)) /\n      4;\n    ctx.shadowOffsetX = shadow.offsetX * multX * scaling.x;\n    ctx.shadowOffsetY = shadow.offsetY * multY * scaling.y;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _removeShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TFiller} filler {@link Pattern} or {@link Gradient}\n   */\n  _applyPatternGradientTransform(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller,\n  ) {\n    if (!isFiller(filler)) {\n      return { offsetX: 0, offsetY: 0 };\n    }\n    const t =\n      (filler as Gradient<'linear'>).gradientTransform ||\n      (filler as Pattern).patternTransform;\n    const offsetX = -this.width / 2 + filler.offsetX || 0,\n      offsetY = -this.height / 2 + filler.offsetY || 0;\n\n    if ((filler as Gradient<'linear'>).gradientUnits === 'percentage') {\n      ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);\n    } else {\n      ctx.transform(1, 0, 0, 1, offsetX, offsetY);\n    }\n    if (t) {\n      ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n    }\n    return { offsetX: offsetX, offsetY: offsetY };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderPaintInOrder(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === STROKE) {\n      this._renderStroke(ctx);\n      this._renderFill(ctx);\n    } else {\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * function that actually render something on the context.\n   * empty here to allow Obects to work on tests to benchmark fabric functionalites\n   * not related to rendering\n   * @param {CanvasRenderingContext2D} _ctx Context to render on\n   */\n  _render(_ctx: CanvasRenderingContext2D) {\n    // placeholder to be overridden\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill) {\n      return;\n    }\n\n    ctx.save();\n    this._setFillStyles(ctx, this);\n    if (this.fillRule === 'evenodd') {\n      ctx.fill('evenodd');\n    } else {\n      ctx.fill();\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderStroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    if (this.strokeUniform) {\n      const scaling = this.getObjectScaling();\n      ctx.scale(1 / scaling.x, 1 / scaling.y);\n    }\n    this._setLineDash(ctx, this.strokeDashArray);\n    this._setStrokeStyles(ctx, this);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Gradient} filler\n   */\n  _applyPatternForTransformedGradient(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller,\n  ) {\n    const dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n      retinaScaling = this.getCanvasRetinaScaling(),\n      width = dims.x / this.scaleX / retinaScaling,\n      height = dims.y / this.scaleY / retinaScaling,\n      pCanvas = createCanvasElementFor({\n        // in case width and height are less than 1px, we have to round up.\n        // since the pattern is no-repeat, this is fine\n        width: Math.ceil(width),\n        height: Math.ceil(height),\n      });\n\n    const pCtx = pCanvas.getContext('2d');\n    if (!pCtx) {\n      return;\n    }\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.scale(\n      dims.zoomX / this.scaleX / retinaScaling,\n      dims.zoomY / this.scaleY / retinaScaling,\n    );\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fillStyle = filler.toLive(ctx)!;\n    pCtx.fill();\n    ctx.translate(\n      -this.width / 2 - this.strokeWidth / 2,\n      -this.height / 2 - this.strokeWidth / 2,\n    );\n    ctx.scale(\n      (retinaScaling * this.scaleX) / dims.zoomX,\n      (retinaScaling * this.scaleY) / dims.zoomY,\n    );\n    ctx.strokeStyle = pCtx.createPattern(pCanvas, 'no-repeat') ?? '';\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement() {\n    return new Point(this.left + this.width / 2, this.top + this.height / 2);\n  }\n\n  /**\n   * Clones an instance.\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {Promise<FabricObject>}\n   */\n  clone(propertiesToInclude?: string[]): Promise<this> {\n    const objectForm = this.toObject(propertiesToInclude);\n    return (this.constructor as typeof FabricObject).fromObject(\n      objectForm,\n    ) as unknown as Promise<this>;\n  }\n\n  /**\n   * Creates an instance of Image out of an object\n   * makes use of toCanvasElement.\n   * Once this method was based on toDataUrl and loadImage, so it also had a quality\n   * and format option. toCanvasElement is faster and produce no loss of quality.\n   * If you need to get a real Jpeg or Png from an object, using toDataURL is the right way to do it.\n   * toCanvasElement and then toBlob from the obtained canvas is also a good option.\n   * @todo fix the export type, it could not be Image but the type that getClass return for 'image'.\n   * @param {ObjectToCanvasElementOptions} [options] for clone as image, passed to toDataURL\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {FabricImage} Object cloned as image.\n   */\n  cloneAsImage(options: ObjectToCanvasElementOptions): FabricImage {\n    const canvasEl = this.toCanvasElement(options);\n    // TODO: how to import Image w/o an import cycle?\n    const ImageClass = classRegistry.getClass<typeof FabricImage>('image');\n    return new ImageClass(canvasEl);\n  }\n\n  /**\n   * Converts an object into a HTMLCanvas element\n   * @param {ObjectToCanvasElementOptions} options Options object\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @param {Boolean} [options.viewportTransform] Account for canvas viewport transform\n   * @param {(el?: HTMLCanvasElement) => StaticCanvas} [options.canvasProvider] Create the output canvas\n   * @return {HTMLCanvasElement} Returns DOM element <canvas> with the FabricObject\n   */\n  toCanvasElement(options: ObjectToCanvasElementOptions = {}) {\n    const origParams = saveObjectTransform(this),\n      originalGroup = this.group,\n      originalShadow = this.shadow,\n      abs = Math.abs,\n      retinaScaling = options.enableRetinaScaling ? getDevicePixelRatio() : 1,\n      multiplier = (options.multiplier || 1) * retinaScaling,\n      canvasProvider: (el: HTMLCanvasElement) => StaticCanvas =\n        options.canvasProvider ||\n        ((el: HTMLCanvasElement) =>\n          new StaticCanvas(el, {\n            enableRetinaScaling: false,\n            renderOnAddRemove: false,\n            skipOffscreen: false,\n          }));\n    delete this.group;\n    if (options.withoutTransform) {\n      resetObjectTransform(this);\n    }\n    if (options.withoutShadow) {\n      this.shadow = null;\n    }\n    if (options.viewportTransform) {\n      sendObjectToPlane(this, this.getViewportTransform());\n    }\n\n    this.setCoords();\n    const el = createCanvasElement(),\n      boundingRect = this.getBoundingRect(),\n      shadow = this.shadow,\n      shadowOffset = new Point();\n\n    if (shadow) {\n      const shadowBlur = shadow.blur;\n      const scaling = shadow.nonScaling\n        ? new Point(1, 1)\n        : this.getObjectScaling();\n      // consider non scaling shadow.\n      shadowOffset.x =\n        2 * Math.round(abs(shadow.offsetX) + shadowBlur) * abs(scaling.x);\n      shadowOffset.y =\n        2 * Math.round(abs(shadow.offsetY) + shadowBlur) * abs(scaling.y);\n    }\n    const width = boundingRect.width + shadowOffset.x,\n      height = boundingRect.height + shadowOffset.y;\n    // if the current width/height is not an integer\n    // we need to make it so.\n    el.width = Math.ceil(width);\n    el.height = Math.ceil(height);\n    const canvas = canvasProvider(el);\n    if (options.format === 'jpeg') {\n      canvas.backgroundColor = '#fff';\n    }\n    this.setPositionByOrigin(\n      new Point(canvas.width / 2, canvas.height / 2),\n      CENTER,\n      CENTER,\n    );\n    const originalCanvas = this.canvas;\n    // static canvas and canvas have both an array of InteractiveObjects\n    // @ts-expect-error this needs to be fixed somehow, or ignored globally\n    canvas._objects = [this];\n    this.set('canvas', canvas);\n    this.setCoords();\n    const canvasEl = canvas.toCanvasElement(multiplier || 1, options);\n    this.set('canvas', originalCanvas);\n    this.shadow = originalShadow;\n    if (originalGroup) {\n      this.group = originalGroup;\n    }\n    this.set(origParams);\n    this.setCoords();\n    // canvas.dispose will call image.dispose that will nullify the elements\n    // since this canvas is a simple element for the process, we remove references\n    // to objects in this way in order to avoid object trashing.\n    canvas._objects = [];\n    // since render has settled it is safe to destroy canvas\n    canvas.destroy();\n    return canvasEl;\n  }\n\n  /**\n   * Converts an object into a data-url-like string\n   * @param {Object} options Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   */\n  toDataURL(options: toDataURLOptions = {}) {\n    return toDataURL(\n      this.toCanvasElement(options),\n      options.format || 'png',\n      options.quality || 1,\n    );\n  }\n  toBlob(options: toDataURLOptions = {}) {\n    return toBlob(\n      this.toCanvasElement(options),\n      options.format || 'png',\n      options.quality || 1,\n    );\n  }\n\n  /**\n   * Returns true if any of the specified types is identical to the type of an instance\n   * @param {String} type Type to check against\n   * @return {Boolean}\n   */\n  isType(...types: string[]) {\n    return (\n      types.includes((this.constructor as typeof FabricObject).type) ||\n      types.includes(this.type)\n    );\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance (is 1 unless subclassed)\n   */\n  complexity() {\n    return 1;\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  /**\n   * Sets \"angle\" of an instance with centered rotation\n   * @param {TDegree} angle Angle value (in degrees)\n   */\n  rotate(angle: TDegree) {\n    const { centeredRotation, originX, originY } = this;\n\n    if (centeredRotation) {\n      const { x, y } = this.getRelativeCenterPoint();\n      this.originX = CENTER;\n      this.originY = CENTER;\n      this.left = x;\n      this.top = y;\n    }\n\n    this.set('angle', angle);\n\n    if (centeredRotation) {\n      const { x, y } = this.translateToOriginPoint(\n        this.getRelativeCenterPoint(),\n        originX,\n        originY,\n      );\n      this.left = x;\n      this.top = y;\n      this.originX = originX;\n      this.originY = originY;\n    }\n  }\n\n  /**\n   * This callback function is called by the parent group of an object every\n   * time a non-delegated property changes on the group. It is passed the key\n   * and value as parameters. Not adding in this function's signature to avoid\n   * Travis build error about unused variables.\n   */\n  setOnGroup() {\n    // implemented by sub-classes, as needed.\n  }\n\n  /**\n   * Sets canvas globalCompositeOperation for specific object\n   * custom composition operation for the particular object can be specified using globalCompositeOperation property\n   * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n   */\n  _setupCompositeOperation(ctx: CanvasRenderingContext2D) {\n    if (this.globalCompositeOperation) {\n      ctx.globalCompositeOperation = this.globalCompositeOperation;\n    }\n  }\n\n  /**\n   * cancel instance's running animations\n   * override if necessary to dispose artifacts such as `clipPath`\n   */\n  dispose() {\n    runningAnimations.cancelByTarget(this);\n    this.off();\n    this._set('canvas', undefined);\n    // clear caches\n    this._cacheCanvas && getEnv().dispose(this._cacheCanvas);\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  // #region Animation methods\n  /**\n   * List of properties to consider for animating colors.\n   * @type String[]\n   */\n  static colorProperties: string[] = [FILL, STROKE, 'backgroundColor'];\n\n  /**\n   * Animates object's properties\n   * @param {Record<string, number | number[] | TColorArg>} animatable map of keys and end values\n   * @param {Partial<AnimationOptions<T>>} options\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\n   * @return {Record<string, TAnimation<T>>} map of animation contexts\n   *\n   * As object — multiple properties\n   *\n   * object.animate({ left: ..., top: ... });\n   * object.animate({ left: ..., top: ... }, { duration: ... });\n   */\n  animate<T extends number | number[] | TColorArg>(\n    animatable: Record<string, T>,\n    options?: Partial<AnimationOptions<T>>,\n  ): Record<string, TAnimation<T>> {\n    return Object.entries(animatable).reduce(\n      (acc, [key, endValue]) => {\n        acc[key] = this._animate(key, endValue, options);\n        return acc;\n      },\n      {} as Record<string, TAnimation<T>>,\n    );\n  }\n\n  /**\n   * @private\n   * @param {String} key Property to animate\n   * @param {String} to Value to animate to\n   * @param {Object} [options] Options object\n   */\n  _animate<T extends number | number[] | TColorArg>(\n    key: string,\n    endValue: T,\n    options: Partial<AnimationOptions<T>> = {},\n  ): TAnimation<T> {\n    const path = key.split('.');\n    const propIsColor = (\n      this.constructor as typeof FabricObject\n    ).colorProperties.includes(path[path.length - 1]);\n    const { abort, startValue, onChange, onComplete } = options;\n    const animationOptions = {\n      ...options,\n      target: this,\n      // path.reduce... is the current value in case start value isn't provided\n      startValue:\n        startValue ?? path.reduce((deep: any, key) => deep[key], this),\n      endValue,\n      abort: abort?.bind(this),\n      onChange: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number,\n      ) => {\n        path.reduce((deep: Record<string, any>, key, index) => {\n          if (index === path.length - 1) {\n            deep[key] = value;\n          }\n          return deep[key];\n        }, this);\n        onChange &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onChange(value, valueProgress, durationProgress);\n      },\n      onComplete: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number,\n      ) => {\n        this.setCoords();\n        onComplete &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onComplete(value, valueProgress, durationProgress);\n      },\n    } as AnimationOptions<T>;\n\n    return (\n      propIsColor\n        ? animateColor(animationOptions as ColorAnimationOptions)\n        : animate(\n            animationOptions as ValueAnimationOptions | ArrayAnimationOptions,\n          )\n    ) as TAnimation<T>;\n  }\n\n  // #region Object stacking methods\n\n  /**\n   * A reference to the parent of the object\n   * Used to keep the original parent ref when the object has been added to an ActiveSelection, hence loosing the `group` ref\n   */\n  declare parent?: Group;\n\n  /**\n   * Checks if object is descendant of target\n   * Should be used instead of {@link Group.contains} or {@link StaticCanvas.contains} for performance reasons\n   * @param {TAncestor} target\n   * @returns {boolean}\n   */\n  isDescendantOf(target: TAncestor): boolean {\n    const { parent, group } = this;\n    return (\n      parent === target ||\n      group === target ||\n      // walk up\n      (!!parent && parent.isDescendantOf(target)) ||\n      (!!group && group !== parent && group.isDescendantOf(target))\n    );\n  }\n\n  /**\n   * @returns {Ancestors} ancestors (excluding `ActiveSelection`) from bottom to top\n   */\n  getAncestors(): Ancestors {\n    const ancestors: TAncestor[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let parent: TAncestor | undefined = this;\n    do {\n      parent = parent.parent;\n      parent && ancestors.push(parent);\n    } while (parent);\n    return ancestors as Ancestors;\n  }\n\n  /**\n   * Compare ancestors\n   *\n   * @param {StackedObject} other\n   * @returns {AncestryComparison} an object that represent the ancestry situation.\n   */\n  findCommonAncestors<T extends this>(other: T): AncestryComparison {\n    if (this === other) {\n      return {\n        fork: [],\n        otherFork: [],\n        common: [this, ...this.getAncestors()],\n      } as AncestryComparison;\n    }\n    const ancestors = this.getAncestors();\n    const otherAncestors = other.getAncestors();\n    //  if `this` has no ancestors and `this` is top ancestor of `other` we must handle the following case\n    if (\n      ancestors.length === 0 &&\n      otherAncestors.length > 0 &&\n      this === otherAncestors[otherAncestors.length - 1]\n    ) {\n      return {\n        fork: [],\n        otherFork: [\n          other,\n          ...otherAncestors.slice(0, otherAncestors.length - 1),\n        ],\n        common: [this],\n      } as AncestryComparison;\n    }\n    //  compare ancestors\n    for (let i = 0, ancestor; i < ancestors.length; i++) {\n      ancestor = ancestors[i];\n      if (ancestor === other) {\n        return {\n          fork: [this, ...ancestors.slice(0, i)],\n          otherFork: [],\n          common: ancestors.slice(i),\n        } as AncestryComparison;\n      }\n      for (let j = 0; j < otherAncestors.length; j++) {\n        if (this === otherAncestors[j]) {\n          return {\n            fork: [],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: [this, ...ancestors],\n          } as AncestryComparison;\n        }\n        if (ancestor === otherAncestors[j]) {\n          return {\n            fork: [this, ...ancestors.slice(0, i)],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: ancestors.slice(i),\n          } as AncestryComparison;\n        }\n      }\n    }\n    // nothing shared\n    return {\n      fork: [this, ...ancestors],\n      otherFork: [other, ...otherAncestors],\n      common: [],\n    } as AncestryComparison;\n  }\n\n  /**\n   *\n   * @param {StackedObject} other\n   * @returns {boolean}\n   */\n  hasCommonAncestors<T extends this>(other: T): boolean {\n    const commonAncestors = this.findCommonAncestors(other);\n    return commonAncestors && !!commonAncestors.common.length;\n  }\n\n  /**\n   *\n   * @param {FabricObject} other object to compare against\n   * @returns {boolean | undefined} if objects do not share a common ancestor or they are strictly equal it is impossible to determine which is in front of the other; in such cases the function returns `undefined`\n   */\n  isInFrontOf<T extends this>(other: T): boolean | undefined {\n    if (this === other) {\n      return undefined;\n    }\n    const ancestorData = this.findCommonAncestors(other);\n\n    if (ancestorData.fork.includes(other as any)) {\n      return true;\n    }\n    if (ancestorData.otherFork.includes(this as any)) {\n      return false;\n    }\n    // if there isn't a common ancestor, we take the canvas.\n    // if there is no canvas, there is nothing to compare\n    const firstCommonAncestor = ancestorData.common[0] || this.canvas;\n    if (!firstCommonAncestor) {\n      return undefined;\n    }\n    const headOfFork = ancestorData.fork.pop(),\n      headOfOtherFork = ancestorData.otherFork.pop(),\n      thisIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfFork as any,\n      ),\n      otherIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfOtherFork as any,\n      );\n    return thisIndex > -1 && thisIndex > otherIndex;\n  }\n\n  // #region Serialization\n  /**\n   * Define a list of custom properties that will be serialized when\n   * instance.toObject() gets called\n   */\n  static customProperties: string[] = [];\n\n  /**\n   * Returns an object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject(propertiesToInclude: any[] = []): any {\n    const propertiesToSerialize = propertiesToInclude.concat(\n      FabricObject.customProperties,\n      (this.constructor as typeof FabricObject).customProperties || [],\n    );\n    let clipPathData: Partial<SerializedObjectProps> | undefined;\n    const NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS;\n    const {\n      clipPath,\n      fill,\n      stroke,\n      shadow,\n      strokeDashArray,\n      left,\n      top,\n      originX,\n      originY,\n      width,\n      height,\n      strokeWidth,\n      strokeLineCap,\n      strokeDashOffset,\n      strokeLineJoin,\n      strokeUniform,\n      strokeMiterLimit,\n      scaleX,\n      scaleY,\n      angle,\n      flipX,\n      flipY,\n      opacity,\n      visible,\n      backgroundColor,\n      fillRule,\n      paintFirst,\n      globalCompositeOperation,\n      skewX,\n      skewY,\n    } = this;\n    if (clipPath && !clipPath.excludeFromExport) {\n      clipPathData = clipPath.toObject(\n        propertiesToSerialize.concat('inverted', 'absolutePositioned'),\n      );\n    }\n    const toFixedBound = (val: number) => toFixed(val, NUM_FRACTION_DIGITS);\n    const object = {\n      ...pick(this, propertiesToSerialize as (keyof this)[]),\n      type: (this.constructor as typeof FabricObject).type,\n      version: VERSION,\n      originX,\n      originY,\n      left: toFixedBound(left),\n      top: toFixedBound(top),\n      width: toFixedBound(width),\n      height: toFixedBound(height),\n      fill: isSerializableFiller(fill) ? fill.toObject() : fill,\n      stroke: isSerializableFiller(stroke) ? stroke.toObject() : stroke,\n      strokeWidth: toFixedBound(strokeWidth),\n      strokeDashArray: strokeDashArray\n        ? strokeDashArray.concat()\n        : strokeDashArray,\n      strokeLineCap,\n      strokeDashOffset,\n      strokeLineJoin,\n      strokeUniform,\n      strokeMiterLimit: toFixedBound(strokeMiterLimit),\n      scaleX: toFixedBound(scaleX),\n      scaleY: toFixedBound(scaleY),\n      angle: toFixedBound(angle),\n      flipX,\n      flipY,\n      opacity: toFixedBound(opacity),\n      shadow: shadow ? shadow.toObject() : shadow,\n      visible,\n      backgroundColor,\n      fillRule,\n      paintFirst,\n      globalCompositeOperation,\n      skewX: toFixedBound(skewX),\n      skewY: toFixedBound(skewY),\n      ...(clipPathData ? { clipPath: clipPathData } : null),\n    };\n\n    return !this.includeDefaultValues\n      ? this._removeDefaultValues(object)\n      : object;\n  }\n\n  /**\n   * Returns (dataless) object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: any[]): any {\n    // will be overwritten by subclasses\n    return this.toObject(propertiesToInclude);\n  }\n\n  /**\n   * @private\n   * @param {Object} object\n   */\n  _removeDefaultValues<T extends object>(object: T): Partial<T> {\n    // getDefaults() ( get from static ownDefaults ) should win over prototype since anyway they get assigned to instance\n    // ownDefault vs prototype is swappable only if you change all the fabric objects consistently.\n    const defaults = (this.constructor as typeof FabricObject).getDefaults();\n    const hasStaticDefaultValues = Object.keys(defaults).length > 0;\n    const baseValues = hasStaticDefaultValues\n      ? defaults\n      : Object.getPrototypeOf(this);\n\n    return pickBy(object, (value, key) => {\n      if (key === LEFT || key === TOP || key === 'type') {\n        return true;\n      }\n      const baseValue = baseValues[key];\n      return (\n        value !== baseValue &&\n        // basically a check for [] === []\n        !(\n          Array.isArray(value) &&\n          Array.isArray(baseValue) &&\n          value.length === 0 &&\n          baseValue.length === 0\n        )\n      );\n    });\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String}\n   */\n  toString() {\n    return `#<${(this.constructor as typeof FabricObject).type}>`;\n  }\n\n  /**\n   *\n   * @param {Function} klass\n   * @param {object} object\n   * @param {object} [options]\n   * @param {string} [options.extraParam] property to pass as first argument to the constructor\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static _fromObject<S extends FabricObject>(\n    { type, ...serializedObjectOptions }: Record<string, unknown>,\n    { extraParam, ...options }: Abortable & { extraParam?: string } = {},\n  ): Promise<S> {\n    return enlivenObjectEnlivables<any>(serializedObjectOptions, options).then(\n      (enlivedObjectOptions) => {\n        // from the resulting enlived options, extract options.extraParam to arg0\n        // to avoid accidental overrides later\n        if (extraParam) {\n          delete enlivedObjectOptions[extraParam];\n          return new this(\n            serializedObjectOptions[extraParam],\n            // @ts-expect-error different signature\n            enlivedObjectOptions,\n          );\n        } else {\n          return new this(enlivedObjectOptions);\n        }\n      },\n    ) as Promise<S>;\n  }\n\n  /**\n   *\n   * @param {object} object\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static fromObject<T extends TOptions<SerializedObjectProps>>(\n    object: T,\n    options?: Abortable,\n  ) {\n    return this._fromObject(object, options);\n  }\n}\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n", "import type {\n  TModificationEvents,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo } from './util';\n\n/**\n * Wrap an action handler with firing an event if the action is performed\n * @param {TModificationEvents} eventName the event we want to fire\n * @param {TransformActionHandler<T>} actionHandler the function to wrap\n * @param {object} extraEventInfo extra information to pas to the event handler\n * @return {TransformActionHandler<T>} a function with an action handler signature\n */\nexport const wrapWithFireEvent = <\n  T extends Transform,\n  P extends object = Record<string, never>,\n>(\n  eventName: TModificationEvents,\n  actionHandler: TransformActionHandler<T>,\n  extraEventInfo?: P,\n) => {\n  return ((eventData, transform, x, y) => {\n    const actionPerformed = actionHandler(eventData, transform, x, y);\n    if (actionPerformed) {\n      fireEvent(eventName, {\n        ...commonEventInfo(eventData, transform, x, y),\n        ...extraEventInfo,\n      });\n    }\n    return actionPerformed;\n  }) as TransformActionHandler<T>;\n};\n", "import type { Transform, TransformActionHandler } from '../EventTypeDefs';\n\n/**\n * Wrap an action handler with saving/restoring object position on the transform.\n * this is the code that permits to objects to keep their position while transforming.\n * @param {Function} actionHandler the function to wrap\n * @return {Function} a function with an action handler signature\n */\nexport function wrapWithFixedAnchor<T extends Transform>(\n  actionHandler: TransformActionHandler<T>,\n) {\n  return ((eventData, transform, x, y) => {\n    const { target, originX, originY } = transform,\n      centerPoint = target.getRelativeCenterPoint(),\n      constraint = target.translateToOriginPoint(centerPoint, originX, originY),\n      actionPerformed = actionHandler(eventData, transform, x, y);\n    // flipping requires to change the transform origin, so we read from the mutated transform\n    // instead of leveraging the one destructured before\n    target.setPositionByOrigin(\n      constraint,\n      transform.originX,\n      transform.originY,\n    );\n    return actionPerformed;\n  }) as TransformActionHandler<T>;\n}\n", "import type { TransformActionHandler } from '../EventTypeDefs';\nimport { CENTER, LEFT, RESIZING, RIGHT } from '../constants';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { getLocalPoint, isTransformCentered } from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\n\n/**\n * Action handler to change object's width\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const changeObjectWidth: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const localPoint = getLocalPoint(\n    transform,\n    transform.originX,\n    transform.originY,\n    x,\n    y,\n  );\n  //  make sure the control changes width ONLY from it's side of target\n  if (\n    resolveOrigin(transform.originX) === resolveOrigin(CENTER) ||\n    (resolveOrigin(transform.originX) === resolveOrigin(RIGHT) &&\n      localPoint.x < 0) ||\n    (resolveOrigin(transform.originX) === resolveOrigin(LEFT) &&\n      localPoint.x > 0)\n  ) {\n    const { target } = transform,\n      strokePadding =\n        target.strokeWidth / (target.strokeUniform ? target.scaleX : 1),\n      multiplier = isTransformCentered(transform) ? 2 : 1,\n      oldWidth = target.width,\n      newWidth =\n        Math.abs((localPoint.x * multiplier) / target.scaleX) - strokePadding;\n    target.set('width', Math.max(newWidth, 1));\n    //  check against actual target width in case `newWidth` was rejected\n    return oldWidth !== target.width;\n  }\n  return false;\n};\n\nexport const changeWidth = wrapWithFireEvent(\n  RESIZING,\n  wrapWithFixedAnchor(changeObjectWidth),\n);\n", "import { FILL, STROKE, twoMathPi } from '../constants';\nimport type { InteractiveFabricObject } from '../shapes/Object/InteractiveObject';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\n\nexport type ControlRenderingStyleOverride = Partial<\n  Pick<\n    InteractiveFabricObject,\n    | 'cornerStyle'\n    | 'cornerSize'\n    | 'cornerColor'\n    | 'cornerStrokeColor'\n    | 'cornerDashArray'\n    | 'transparentCorners'\n  >\n>;\n\nexport type ControlRenderer<\n  O extends InteractiveFabricObject = InteractiveFabricObject,\n> = (\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: O,\n) => void;\n\n/**\n * Render a round control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderCircleControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor);\n  let myLeft = left,\n    myTop = top,\n    size;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  // TODO: use proper ellipse code.\n  if (xSize > ySize) {\n    size = xSize;\n    ctx.scale(1.0, ySize / xSize);\n    myTop = (top * xSize) / ySize;\n  } else if (ySize > xSize) {\n    size = ySize;\n    ctx.scale(xSize / ySize, 1.0);\n    myLeft = (left * ySize) / xSize;\n  } else {\n    size = xSize;\n  }\n  ctx.beginPath();\n  ctx.arc(myLeft, myTop, size / 2, 0, twoMathPi, false);\n  ctx[methodName]();\n  if (stroke) {\n    ctx.stroke();\n  }\n  ctx.restore();\n}\n\n/**\n * Render a square control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderSquareControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor),\n    xSizeBy2 = xSize / 2,\n    ySizeBy2 = ySize / 2;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  ctx.translate(left, top);\n  //  angle is relative to canvas plane\n  const angle = fabricObject.getTotalAngle();\n  ctx.rotate(degreesToRadians(angle));\n  // this does not work, and fixed with ( && ) does not make sense.\n  // to have real transparent corners we need the controls on upperCanvas\n  // transparentCorners || ctx.clearRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  ctx[`${methodName}Rect`](-xSizeBy2, -ySizeBy2, xSize, ySize);\n  if (stroke) {\n    ctx.strokeRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  }\n  ctx.restore();\n}\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type {\n  ControlActionHandler,\n  TPointerEvent,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { Intersection } from '../Intersection';\nimport { Point } from '../Point';\nimport { SCALE } from '../constants';\nimport type { InteractiveFabricObject } from '../shapes/Object/InteractiveObject';\nimport type { TCornerPoint, TDegree, TMat2D } from '../typedefs';\nimport {\n  createRotateMatrix,\n  createScaleMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrixArray,\n} from '../util/misc/matrix';\nimport type { ControlRenderingStyleOverride } from './controlRendering';\nimport { renderCircleControl, renderSquareControl } from './controlRendering';\n\nexport class Control {\n  /**\n   * keep track of control visibility.\n   * mainly for backward compatibility.\n   * if you do not want to see a control, you can remove it\n   * from the control set.\n   * @type {Boolean}\n   * @default true\n   */\n  visible = true;\n\n  /**\n   * Name of the action that the control will likely execute.\n   * This is optional. FabricJS uses to identify what the user is doing for some\n   * extra optimizations. If you are writing a custom control and you want to know\n   * somewhere else in the code what is going on, you can use this string here.\n   * you can also provide a custom getActionName if your control run multiple actions\n   * depending on some external state.\n   * default to scale since is the most common, used on 4 corners by default\n   * @type {String}\n   * @default 'scale'\n   */\n  actionName = SCALE;\n\n  /**\n   * Drawing angle of the control.\n   * NOT used for now, but name marked as needed for internal logic\n   * example: to reuse the same drawing function for different rotated controls\n   * @type {Number}\n   * @default 0\n   */\n  angle = 0;\n\n  /**\n   * Relative position of the control. X\n   * 0,0 is the center of the Object, while -0.5 (left) or 0.5 (right) are the extremities\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  x = 0;\n\n  /**\n   * Relative position of the control. Y\n   * 0,0 is the center of the Object, while -0.5 (top) or 0.5 (bottom) are the extremities\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  y = 0;\n\n  /**\n   * Horizontal offset of the control from the defined position. In pixels\n   * Positive offset moves the control to the right, negative to the left.\n   * It used when you want to have position of control that does not scale with\n   * the bounding box. Example: rotation control is placed at x:0, y: 0.5 on\n   * the boundind box, with an offset of 30 pixels vertically. Those 30 pixels will\n   * stay 30 pixels no matter how the object is big. Another example is having 2\n   * controls in the corner, that stay in the same position when the object scale.\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  offsetX = 0;\n\n  /**\n   * Vertical offset of the control from the defined position. In pixels\n   * Positive offset moves the control to the bottom, negative to the top.\n   * @type {Number}\n   * @default 0\n   */\n  offsetY = 0;\n\n  /**\n   * Sets the length of the control. If null, defaults to object's cornerSize.\n   * Expects both sizeX and sizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  sizeX = 0;\n\n  /**\n   * Sets the height of the control. If null, defaults to object's cornerSize.\n   * Expects both sizeX and sizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  sizeY = 0;\n\n  /**\n   * Sets the length of the touch area of the control. If null, defaults to object's touchCornerSize.\n   * Expects both touchSizeX and touchSizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  touchSizeX = 0;\n\n  /**\n   * Sets the height of the touch area of the control. If null, defaults to object's touchCornerSize.\n   * Expects both touchSizeX and touchSizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  touchSizeY = 0;\n\n  /**\n   * Css cursor style to display when the control is hovered.\n   * if the method `cursorStyleHandler` is provided, this property is ignored.\n   * @type {String}\n   * @default 'crosshair'\n   */\n  cursorStyle = 'crosshair';\n\n  /**\n   * If controls has an offsetY or offsetX, draw a line that connects\n   * the control to the bounding box\n   * @type {Boolean}\n   * @default false\n   */\n  withConnection = false;\n\n  constructor(options?: Partial<Control>) {\n    Object.assign(this, options);\n  }\n\n  /**\n   * The control actionHandler, provide one to handle action ( control being moved )\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare actionHandler: TransformActionHandler;\n\n  /**\n   * The control handler for mouse down, provide one to handle mouse down on control\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare mouseDownHandler?: ControlActionHandler;\n\n  /**\n   * The control mouseUpHandler, provide one to handle an effect on mouse up.\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare mouseUpHandler?: ControlActionHandler;\n\n  shouldActivate(\n    controlKey: string,\n    fabricObject: InteractiveFabricObject,\n    pointer: Point,\n    { tl, tr, br, bl }: TCornerPoint,\n  ) {\n    // TODO: locking logic can be handled here instead of in the control handler logic\n    return (\n      fabricObject.canvas?.getActiveObject() === fabricObject &&\n      fabricObject.isControlVisible(controlKey) &&\n      Intersection.isPointInPolygon(pointer, [tl, tr, br, bl])\n    );\n  }\n\n  /**\n   * Returns control actionHandler\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getActionHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): TransformActionHandler | undefined {\n    return this.actionHandler;\n  }\n\n  /**\n   * Returns control mouseDown handler\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getMouseDownHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): ControlActionHandler | undefined {\n    return this.mouseDownHandler;\n  }\n\n  /**\n   * Returns control mouseUp handler.\n   * During actions the fabricObject or the control can be of different obj\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getMouseUpHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): ControlActionHandler | undefined {\n    return this.mouseUpHandler;\n  }\n\n  /**\n   * Returns control cursorStyle for css using cursorStyle. If you need a more elaborate\n   * function you can pass one in the constructor\n   * the cursorStyle property\n   * @param {Event} eventData the native mouse event\n   * @param {Control} control the current control ( likely this)\n   * @param {FabricObject} object on which the control is displayed\n   * @return {String}\n   */\n  cursorStyleHandler(\n    eventData: TPointerEvent,\n    control: Control,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    return control.cursorStyle;\n  }\n\n  /**\n   * Returns the action name. The basic implementation just return the actionName property.\n   * @param {Event} eventData the native mouse event\n   * @param {Control} control the current control ( likely this)\n   * @param {FabricObject} object on which the control is displayed\n   * @return {String}\n   */\n  getActionName(\n    eventData: TPointerEvent,\n    control: Control,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    return control.actionName;\n  }\n\n  /**\n   * Returns controls visibility\n   * @param {FabricObject} object on which the control is displayed\n   * @param {String} controlKey key where the control is memorized on the\n   * @return {Boolean}\n   */\n  getVisibility(fabricObject: InteractiveFabricObject, controlKey: string) {\n    return fabricObject._controlsVisibility?.[controlKey] ?? this.visible;\n  }\n\n  /**\n   * Sets controls visibility\n   * @param {Boolean} visibility for the object\n   * @return {Void}\n   */\n  setVisibility(\n    visibility: boolean,\n    name: string,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    this.visible = visibility;\n  }\n\n  positionHandler(\n    dim: Point,\n    finalMatrix: TMat2D,\n    fabricObject: InteractiveFabricObject,\n    currentControl: Control,\n  ) {\n    return new Point(\n      this.x * dim.x + this.offsetX,\n      this.y * dim.y + this.offsetY,\n    ).transform(finalMatrix);\n  }\n\n  /**\n   * Returns the coords for this control based on object values.\n   * @param {Number} objectAngle angle from the fabric object holding the control\n   * @param {Number} objectCornerSize cornerSize from the fabric object holding the control (or touchCornerSize if\n   *   isTouch is true)\n   * @param {Number} centerX x coordinate where the control center should be\n   * @param {Number} centerY y coordinate where the control center should be\n   * @param {boolean} isTouch true if touch corner, false if normal corner\n   */\n  calcCornerCoords(\n    angle: TDegree,\n    objectCornerSize: number,\n    centerX: number,\n    centerY: number,\n    isTouch: boolean,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    const t = multiplyTransformMatrixArray([\n      createTranslateMatrix(centerX, centerY),\n      createRotateMatrix({ angle }),\n      createScaleMatrix(\n        (isTouch ? this.touchSizeX : this.sizeX) || objectCornerSize,\n        (isTouch ? this.touchSizeY : this.sizeY) || objectCornerSize,\n      ),\n    ]);\n    return {\n      tl: new Point(-0.5, -0.5).transform(t),\n      tr: new Point(0.5, -0.5).transform(t),\n      br: new Point(0.5, 0.5).transform(t),\n      bl: new Point(-0.5, 0.5).transform(t),\n    };\n  }\n\n  /**\n   * Render function for the control.\n   * When this function runs the context is unscaled. unrotate. Just retina scaled.\n   * all the functions will have to translate to the point left,top before starting Drawing\n   * if they want to draw a control where the position is detected.\n   * left and top are the result of the positionHandler function\n   * @param {RenderingContext2D} ctx the context where the control will be drawn\n   * @param {Number} left position of the canvas where we are about to render the control.\n   * @param {Number} top position of the canvas where we are about to render the control.\n   * @param {Object} styleOverride\n   * @param {FabricObject} fabricObject the object where the control is about to be rendered\n   */\n  render(\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    styleOverride = styleOverride || {};\n    switch (styleOverride.cornerStyle || fabricObject.cornerStyle) {\n      case 'circle':\n        renderCircleControl.call(\n          this,\n          ctx,\n          left,\n          top,\n          styleOverride,\n          fabricObject,\n        );\n        break;\n      default:\n        renderSquareControl.call(\n          this,\n          ctx,\n          left,\n          top,\n          styleOverride,\n          fabricObject,\n        );\n    }\n  }\n}\n", "import type {\n  ControlCursorCallback,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { ROTATING } from '../constants';\nimport { radiansToDegrees } from '../util/misc/radiansDegreesConversion';\nimport { isLocked, NOT_ALLOWED_CURSOR } from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\n\n/**\n * Find the correct style for the control that is used for rotation.\n * this function is very simple and it just take care of not-allowed or standard cursor\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const rotationStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  if (fabricObject.lockRotation) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  return control.cursorStyle;\n};\n\n/**\n * Action handler for rotation and snapping, without anchor point.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n * @private\n */\nconst rotateObjectWithSnapping: TransformActionHandler = (\n  eventData,\n  { target, ex, ey, theta, originX, originY },\n  x,\n  y,\n) => {\n  const pivotPoint = target.translateToOriginPoint(\n    target.getRelativeCenterPoint(),\n    originX,\n    originY,\n  );\n\n  if (isLocked(target, 'lockRotation')) {\n    return false;\n  }\n\n  const lastAngle = Math.atan2(ey - pivotPoint.y, ex - pivotPoint.x),\n    curAngle = Math.atan2(y - pivotPoint.y, x - pivotPoint.x);\n  let angle = radiansToDegrees(curAngle - lastAngle + theta);\n\n  if (target.snapAngle && target.snapAngle > 0) {\n    const snapAngle = target.snapAngle,\n      snapThreshold = target.snapThreshold || snapAngle,\n      rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,\n      leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\n\n    if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\n      angle = leftAngleLocked;\n    } else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\n      angle = rightAngleLocked;\n    }\n  }\n\n  // normalize angle to positive value\n  if (angle < 0) {\n    angle = 360 + angle;\n  }\n  angle %= 360;\n\n  const hasRotated = target.angle !== angle;\n  // TODO: why aren't we using set?\n  target.angle = angle;\n  return hasRotated;\n};\n\nexport const rotationWithSnapping = wrapWithFireEvent(\n  ROTATING,\n  wrapWithFixedAnchor(rotateObjectWithSnapping),\n);\n", "import type {\n  ControlCursorCallback,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TAxis } from '../typedefs';\nimport type { Canvas } from '../canvas/Canvas';\nimport {\n  findCornerQuadrant,\n  getLocalPoint,\n  invertOrigin,\n  isLocked,\n  isTransformCentered,\n  NOT_ALLOWED_CURSOR,\n} from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\nimport { SCALE_X, SCALE_Y, SCALING } from '../constants';\n\ntype ScaleTransform = Transform & {\n  gestureScale?: number;\n  signX?: number;\n  signY?: number;\n};\n\ntype ScaleBy = TAxis | 'equally' | '' | undefined;\n\n/**\n * Inspect event and fabricObject properties to understand if the scaling action\n * @param {Event} eventData from the user action\n * @param {FabricObject} fabricObject the fabric object about to scale\n * @return {Boolean} true if scale is proportional\n */\nexport function scaleIsProportional(\n  eventData: TPointerEvent,\n  fabricObject: FabricObject,\n): boolean {\n  const canvas = fabricObject.canvas as Canvas,\n    uniformIsToggled = eventData[canvas.uniScaleKey!];\n  return (\n    (canvas.uniformScaling && !uniformIsToggled) ||\n    (!canvas.uniformScaling && uniformIsToggled)\n  );\n}\n\n/**\n * Inspect fabricObject to understand if the current scaling action is allowed\n * @param {FabricObject} fabricObject the fabric object about to scale\n * @param {String} by 'x' or 'y' or ''\n * @param {Boolean} scaleProportionally true if we are trying to scale proportionally\n * @return {Boolean} true if scaling is not allowed at current conditions\n */\nexport function scalingIsForbidden(\n  fabricObject: FabricObject,\n  by: ScaleBy,\n  scaleProportionally: boolean,\n) {\n  const lockX = isLocked(fabricObject, 'lockScalingX'),\n    lockY = isLocked(fabricObject, 'lockScalingY');\n  if (lockX && lockY) {\n    return true;\n  }\n  if (!by && (lockX || lockY) && scaleProportionally) {\n    return true;\n  }\n  if (lockX && by === 'x') {\n    return true;\n  }\n  if (lockY && by === 'y') {\n    return true;\n  }\n  // code crashes because of a division by 0 if a 0 sized object is scaled\n  // forbid to prevent scaling to happen. ISSUE-9475\n  const { width, height, strokeWidth } = fabricObject;\n  if (width === 0 && strokeWidth === 0 && by !== 'y') {\n    return true;\n  }\n  if (height === 0 && strokeWidth === 0 && by !== 'x') {\n    return true;\n  }\n  return false;\n}\n\nconst scaleMap = ['e', 'se', 's', 'sw', 'w', 'nw', 'n', 'ne', 'e'];\n\n/**\n * return the correct cursor style for the scale action\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const scaleCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  const scaleProportionally = scaleIsProportional(eventData, fabricObject),\n    by =\n      control.x !== 0 && control.y === 0\n        ? 'x'\n        : control.x === 0 && control.y !== 0\n          ? 'y'\n          : '';\n  if (scalingIsForbidden(fabricObject, by, scaleProportionally)) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  const n = findCornerQuadrant(fabricObject, control);\n  return `${scaleMap[n]}-resize`;\n};\n\n/**\n * Basic scaling logic, reused with different constrain for scaling X,Y, freely or equally.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @param {Object} options additional information for scaling\n * @param {String} options.by 'x', 'y', 'equally' or '' to indicate type of scaling\n * @return {Boolean} true if some change happened\n * @private\n */\nfunction scaleObject(\n  eventData: TPointerEvent,\n  transform: ScaleTransform,\n  x: number,\n  y: number,\n  options: { by?: ScaleBy } = {},\n) {\n  const target = transform.target,\n    by = options.by,\n    scaleProportionally = scaleIsProportional(eventData, target),\n    forbidScaling = scalingIsForbidden(target, by, scaleProportionally);\n  let newPoint, scaleX, scaleY, dim, signX, signY;\n\n  if (forbidScaling) {\n    return false;\n  }\n  if (transform.gestureScale) {\n    scaleX = transform.scaleX * transform.gestureScale;\n    scaleY = transform.scaleY * transform.gestureScale;\n  } else {\n    newPoint = getLocalPoint(\n      transform,\n      transform.originX,\n      transform.originY,\n      x,\n      y,\n    );\n    // use of sign: We use sign to detect change of direction of an action. sign usually change when\n    // we cross the origin point with the mouse. So a scale flip for example. There is an issue when scaling\n    // by center and scaling using one middle control ( default: mr, mt, ml, mb), the mouse movement can easily\n    // cross many time the origin point and flip the object. so we need a way to filter out the noise.\n    // This ternary here should be ok to filter out X scaling when we want Y only and vice versa.\n    signX = by !== 'y' ? Math.sign(newPoint.x || transform.signX || 1) : 1;\n    signY = by !== 'x' ? Math.sign(newPoint.y || transform.signY || 1) : 1;\n    if (!transform.signX) {\n      transform.signX = signX;\n    }\n    if (!transform.signY) {\n      transform.signY = signY;\n    }\n\n    if (\n      isLocked(target, 'lockScalingFlip') &&\n      (transform.signX !== signX || transform.signY !== signY)\n    ) {\n      return false;\n    }\n\n    dim = target._getTransformedDimensions();\n    // missing detection of flip and logic to switch the origin\n    if (scaleProportionally && !by) {\n      // uniform scaling\n      const distance = Math.abs(newPoint.x) + Math.abs(newPoint.y),\n        { original } = transform,\n        originalDistance =\n          Math.abs((dim.x * original.scaleX) / target.scaleX) +\n          Math.abs((dim.y * original.scaleY) / target.scaleY),\n        scale = distance / originalDistance;\n      scaleX = original.scaleX * scale;\n      scaleY = original.scaleY * scale;\n    } else {\n      scaleX = Math.abs((newPoint.x * target.scaleX) / dim.x);\n      scaleY = Math.abs((newPoint.y * target.scaleY) / dim.y);\n    }\n    // if we are scaling by center, we need to double the scale\n    if (isTransformCentered(transform)) {\n      scaleX *= 2;\n      scaleY *= 2;\n    }\n    if (transform.signX !== signX && by !== 'y') {\n      transform.originX = invertOrigin(transform.originX);\n      scaleX *= -1;\n      transform.signX = signX;\n    }\n    if (transform.signY !== signY && by !== 'x') {\n      transform.originY = invertOrigin(transform.originY);\n      scaleY *= -1;\n      transform.signY = signY;\n    }\n  }\n  // minScale is taken care of in the setter.\n  const oldScaleX = target.scaleX,\n    oldScaleY = target.scaleY;\n  if (!by) {\n    !isLocked(target, 'lockScalingX') && target.set(SCALE_X, scaleX);\n    !isLocked(target, 'lockScalingY') && target.set(SCALE_Y, scaleY);\n  } else {\n    // forbidden cases already handled on top here.\n    by === 'x' && target.set(SCALE_X, scaleX);\n    by === 'y' && target.set(SCALE_Y, scaleY);\n  }\n  return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;\n}\n\n/**\n * Generic scaling logic, to scale from corners either equally or freely.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scaleObjectFromCorner: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scaleObject(eventData, transform, x, y);\n};\n\n/**\n * Scaling logic for the X axis.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nconst scaleObjectX: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scaleObject(eventData, transform, x, y, { by: 'x' });\n};\n\n/**\n * Scaling logic for the Y axis.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nconst scaleObjectY: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scaleObject(eventData, transform, x, y, { by: 'y' });\n};\n\nexport const scalingEqually = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectFromCorner),\n);\n\nexport const scalingX = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectX),\n);\n\nexport const scalingY = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectY),\n);\n", "import type {\n  ControlCursorCallback,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { Point } from '../Point';\nimport type { TAxis, TAxisKey } from '../typedefs';\nimport {\n  degreesToRadians,\n  radiansToDegrees,\n} from '../util/misc/radiansDegreesConversion';\nimport {\n  findCornerQuadrant,\n  getLocalPoint,\n  isLocked,\n  NOT_ALLOWED_CURSOR,\n} from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\nimport {\n  CENTER,\n  SCALE_X,\n  SCALE_Y,\n  SKEWING,\n  SKEW_X,\n  SKEW_Y,\n} from '../constants';\n\nexport type SkewTransform = Transform & { skewingSide: -1 | 1 };\n\nconst AXIS_KEYS: Record<\n  TAxis,\n  {\n    counterAxis: TAxis;\n    scale: TAxisKey<'scale'>;\n    skew: TAxisKey<'skew'>;\n    lockSkewing: TAxisKey<'lockSkewing'>;\n    origin: TAxisKey<'origin'>;\n    flip: TAxisKey<'flip'>;\n  }\n> = {\n  x: {\n    counterAxis: 'y',\n    scale: SCALE_X,\n    skew: SKEW_X,\n    lockSkewing: 'lockSkewingX',\n    origin: 'originX',\n    flip: 'flipX',\n  },\n  y: {\n    counterAxis: 'x',\n    scale: SCALE_Y,\n    skew: SKEW_Y,\n    lockSkewing: 'lockSkewingY',\n    origin: 'originY',\n    flip: 'flipY',\n  },\n};\n\nconst skewMap = ['ns', 'nesw', 'ew', 'nwse'];\n\n/**\n * return the correct cursor style for the skew action\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const skewCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  if (control.x !== 0 && isLocked(fabricObject, 'lockSkewingY')) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  if (control.y !== 0 && isLocked(fabricObject, 'lockSkewingX')) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  const n = findCornerQuadrant(fabricObject, control) % 4;\n  return `${skewMap[n]}-resize`;\n};\n\n/**\n * Since skewing is applied before scaling, calculations are done in a scaleless plane\n * @see https://github.com/fabricjs/fabric.js/pull/8380\n */\nfunction skewObject(\n  axis: TAxis,\n  { target, ex, ey, skewingSide, ...transform }: SkewTransform,\n  pointer: Point,\n) {\n  const { skew: skewKey } = AXIS_KEYS[axis],\n    offset = pointer\n      .subtract(new Point(ex, ey))\n      .divide(new Point(target.scaleX, target.scaleY))[axis],\n    skewingBefore = target[skewKey],\n    skewingStart = transform[skewKey],\n    shearingStart = Math.tan(degreesToRadians(skewingStart)),\n    // let a, b be the size of target\n    // let a' be the value of a after applying skewing\n    // then:\n    // a' = a + b * skewA => skewA = (a' - a) / b\n    // the value b is tricky since skewY is applied before skewX\n    b =\n      axis === 'y'\n        ? target._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1,\n            // since skewY is applied before skewX, b (=width) is not affected by skewX\n            skewX: 0,\n          }).x\n        : target._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1,\n          }).y;\n\n  const shearing =\n    (2 * offset * skewingSide) /\n      // we max out fractions to safeguard from asymptotic behavior\n      Math.max(b, 1) +\n    // add starting state\n    shearingStart;\n\n  const skewing = radiansToDegrees(Math.atan(shearing));\n\n  target.set(skewKey, skewing);\n  const changed = skewingBefore !== target[skewKey];\n\n  if (changed && axis === 'y') {\n    // we don't want skewing to affect scaleX\n    // so we factor it by the inverse skewing diff to make it seem unchanged to the viewer\n    const { skewX, scaleX } = target,\n      dimBefore = target._getTransformedDimensions({ skewY: skewingBefore }),\n      dimAfter = target._getTransformedDimensions(),\n      compensationFactor = skewX !== 0 ? dimBefore.x / dimAfter.x : 1;\n    compensationFactor !== 1 &&\n      target.set(SCALE_X, compensationFactor * scaleX);\n  }\n\n  return changed;\n}\n\n/**\n * Wrapped Action handler for skewing on a given axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nfunction skewHandler(\n  axis: TAxis,\n  eventData: TPointerEvent,\n  transform: Transform,\n  x: number,\n  y: number,\n) {\n  const { target } = transform,\n    {\n      counterAxis,\n      origin: originKey,\n      lockSkewing: lockSkewingKey,\n      skew: skewKey,\n      flip: flipKey,\n    } = AXIS_KEYS[axis];\n  if (isLocked(target, lockSkewingKey)) {\n    return false;\n  }\n\n  const { origin: counterOriginKey, flip: counterFlipKey } =\n      AXIS_KEYS[counterAxis],\n    counterOriginFactor =\n      resolveOrigin(transform[counterOriginKey]) *\n      (target[counterFlipKey] ? -1 : 1),\n    // if the counter origin is top/left (= -0.5) then we are skewing x/y values on the bottom/right side of target respectively.\n    // if the counter origin is bottom/right (= 0.5) then we are skewing x/y values on the top/left side of target respectively.\n    // skewing direction on the top/left side of target is OPPOSITE to the direction of the movement of the pointer,\n    // so we factor skewing direction by this value.\n    skewingSide = (-Math.sign(counterOriginFactor) *\n      (target[flipKey] ? -1 : 1)) as 1 | -1,\n    skewingDirection =\n      ((target[skewKey] === 0 &&\n        // in case skewing equals 0 we use the pointer offset from target center to determine the direction of skewing\n        getLocalPoint(transform, CENTER, CENTER, x, y)[axis] > 0) ||\n      // in case target has skewing we use that as the direction\n      target[skewKey] > 0\n        ? 1\n        : -1) * skewingSide,\n    // anchor to the opposite side of the skewing direction\n    // normalize value from [-1, 1] to origin value [0, 1]\n    origin = -skewingDirection * 0.5 + 0.5;\n\n  const finalHandler = wrapWithFireEvent<SkewTransform>(\n    SKEWING,\n    wrapWithFixedAnchor((eventData, transform, x, y) =>\n      skewObject(axis, transform, new Point(x, y)),\n    ),\n  );\n\n  return finalHandler(\n    eventData,\n    {\n      ...transform,\n      [originKey]: origin,\n      skewingSide,\n    },\n    x,\n    y,\n  );\n}\n\n/**\n * Wrapped Action handler for skewing on the X axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const skewHandlerX: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return skewHandler('x', eventData, transform, x, y);\n};\n\n/**\n * Wrapped Action handler for skewing on the Y axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const skewHandlerY: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return skewHandler('y', eventData, transform, x, y);\n};\n", "import type {\n  ControlCallback,\n  ControlCursorCallback,\n  TPointerEvent,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { SCALE_X, SCALE_Y, SKEW_X, SKEW_Y } from '../constants';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TAxisKey } from '../typedefs';\nimport { scaleCursorStyleHandler, scalingX, scalingY } from './scale';\nimport { skewCursorStyleHandler, skewHandlerX, skewHandlerY } from './skew';\n\nfunction isAltAction(eventData: TPointerEvent, target: FabricObject) {\n  return eventData[target.canvas!.altActionKey!];\n}\n\n/**\n * Inspect event, control and fabricObject to return the correct action name\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} an action name\n */\nexport const scaleOrSkewActionName: ControlCallback<\n  TAxisKey<'skew' | 'scale'> | ''\n> = (eventData, control, fabricObject) => {\n  const isAlternative = isAltAction(eventData, fabricObject);\n  if (control.x === 0) {\n    // then is scaleY or skewX\n    return isAlternative ? SKEW_X : SCALE_Y;\n  }\n  if (control.y === 0) {\n    // then is scaleY or skewX\n    return isAlternative ? SKEW_Y : SCALE_X;\n  }\n  return '';\n};\n\n/**\n * Combine skew and scale style handlers to cover fabric standard use case\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const scaleSkewCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  return isAltAction(eventData, fabricObject)\n    ? skewCursorStyleHandler(eventData, control, fabricObject)\n    : scaleCursorStyleHandler(eventData, control, fabricObject);\n};\n/**\n * Composed action handler to either scale X or skew Y\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scalingXOrSkewingY: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return isAltAction(eventData, transform.target)\n    ? skewHandlerY(eventData, transform, x, y)\n    : scalingX(eventData, transform, x, y);\n};\n\n/**\n * Composed action handler to either scale Y or skew X\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scalingYOrSkewingX: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return isAltAction(eventData, transform.target)\n    ? skewHandlerX(eventData, transform, x, y)\n    : scalingY(eventData, transform, x, y);\n};\n", "import { RESIZING, ROTATE } from '../constants';\nimport { changeWidth } from './changeWidth';\nimport { Control } from './Control';\nimport { rotationStyleHandler, rotationWithSnapping } from './rotate';\nimport { scaleCursorStyleHandler, scalingEqually } from './scale';\nimport {\n  scaleOrSkewActionName,\n  scaleSkewCursorStyleHandler,\n  scalingXOrSkewingY,\n  scalingYOrSkewingX,\n} from './scaleSkew';\n\n// use this function if you want to generate new controls for every instance\nexport const createObjectDefaultControls = () => ({\n  ml: new Control({\n    x: -0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mr: new Control({\n    x: 0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mb: new Control({\n    x: 0,\n    y: 0.5,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mt: new Control({\n    x: 0,\n    y: -0.5,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  tl: new Control({\n    x: -0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  tr: new Control({\n    x: 0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  bl: new Control({\n    x: -0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  br: new Control({\n    x: 0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  mtr: new Control({\n    x: 0,\n    y: -0.5,\n    actionHandler: rotationWithSnapping,\n    cursorStyleHandler: rotationStyleHandler,\n    offsetY: -40,\n    withConnection: true,\n    actionName: ROTATE,\n  }),\n});\n\nexport const createResizeControls = () => ({\n  mr: new Control({\n    x: 0.5,\n    y: 0,\n    actionHandler: changeWidth,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionName: RESIZING,\n  }),\n  ml: new Control({\n    x: -0.5,\n    y: 0,\n    actionHandler: changeWidth,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionName: RESIZING,\n  }),\n});\n\nexport const createTextboxDefaultControls = () => ({\n  ...createObjectDefaultControls(),\n  ...createResizeControls(),\n});\n", "import { Point, ZERO } from '../../Point';\nimport type { TCornerPoint, TDegree } from '../../typedefs';\nimport { FabricObject } from './Object';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport type { TQrDecomposeOut } from '../../util/misc/matrix';\nimport {\n  calcDimensionsMatrix,\n  createRotateMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../../util/misc/matrix';\nimport type { Control } from '../../controls/Control';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport type { ObjectEvents, TPointerEvent } from '../../EventTypeDefs';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { ControlRenderingStyleOverride } from '../../controls/controlRendering';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { createObjectDefaultControls } from '../../controls/commonControls';\nimport { interactiveObjectDefaultValues } from './defaultValues';\nimport { SCALE } from '../../constants';\n\nexport type TOCoord = Point & {\n  corner: TCornerPoint;\n  touchCorner: TCornerPoint;\n};\n\nexport type TControlSet = Record<string, Control>;\n\nexport type TBorderRenderingStyleOverride = Partial<\n  Pick<InteractiveFabricObject, 'borderColor' | 'borderDashArray'>\n>;\n\nexport type TStyleOverride = ControlRenderingStyleOverride &\n  TBorderRenderingStyleOverride &\n  Partial<\n    Pick<InteractiveFabricObject, 'hasBorders' | 'hasControls'> & {\n      forActiveSelection: boolean;\n    }\n  >;\n\nexport class InteractiveFabricObject<\n    Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  declare noScaleCache: boolean;\n\n  declare snapAngle?: TDegree;\n  declare snapThreshold?: TDegree;\n\n  declare lockMovementX: boolean;\n  declare lockMovementY: boolean;\n  declare lockRotation: boolean;\n  declare lockScalingX: boolean;\n  declare lockScalingY: boolean;\n  declare lockSkewingX: boolean;\n  declare lockSkewingY: boolean;\n  declare lockScalingFlip: boolean;\n\n  declare cornerSize: number;\n  declare touchCornerSize: number;\n  declare transparentCorners: boolean;\n  declare cornerColor: string;\n  declare cornerStrokeColor: string;\n  declare cornerStyle: 'rect' | 'circle';\n  declare cornerDashArray: number[] | null;\n  declare hasControls: boolean;\n\n  declare borderColor: string;\n  declare borderDashArray: number[] | null;\n  declare borderOpacityWhenMoving: number;\n  declare borderScaleFactor: number;\n  declare hasBorders: boolean;\n  declare selectionBackgroundColor: string;\n\n  declare selectable: boolean;\n  declare evented: boolean;\n  declare perPixelTargetFind: boolean;\n  declare activeOn: 'down' | 'up';\n\n  declare hoverCursor: CSSStyleDeclaration['cursor'] | null;\n  declare moveCursor: CSSStyleDeclaration['cursor'] | null;\n\n  /**\n   * The object's controls' position in viewport coordinates\n   * Calculated by {@link Control#positionHandler} and {@link Control#calcCornerCoords}, depending on {@link padding}.\n   * `corner/touchCorner` describe the 4 points forming the interactive area of the corner.\n   * Used to draw and locate controls.\n   */\n  declare oCoords: Record<string, TOCoord>;\n\n  /**\n   * keeps the value of the last hovered corner during mouse move.\n   * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\n   * It should be private, but there is no harm in using it as\n   * a read-only property.\n   * this isn't cleaned automatically. Non selected objects may have wrong values\n   * @type [string]\n   */\n  declare __corner?: string;\n\n  /**\n   * a map of control visibility for this object.\n   * this was left when controls were introduced to not break the api too much\n   * this takes priority over the generic control visibility\n   */\n  declare _controlsVisibility: Record<string, boolean>;\n\n  /**\n   * holds the controls for the object.\n   * controls are added by default_controls.js\n   */\n  declare controls: TControlSet;\n\n  /**\n   * internal boolean to signal the code that the object is\n   * part of the move action.\n   */\n  declare isMoving?: boolean;\n\n  /**\n   * A boolean used from the gesture module to keep tracking of a scaling\n   * action when there is no scaling transform in place.\n   * This is an edge case and is used twice in all codebase.\n   * Probably added to keep track of some performance issues\n   * @TODO use git blame to investigate why it was added\n   * DON'T USE IT. WE WILL TRY TO REMOVE IT\n   */\n  declare _scaling?: boolean;\n\n  declare canvas?: Canvas;\n\n  static ownDefaults = interactiveObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...InteractiveFabricObject.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof InteractiveFabricObject).createControls(),\n      InteractiveFabricObject.ownDefaults,\n    );\n    this.setOptions(options);\n  }\n\n  /**\n   * Creates the default control object.\n   * If you prefer to have on instance of controls shared among all objects\n   * make this function return an empty object and add controls to the ownDefaults\n   * @param {Object} [options] Options object\n   */\n  static createControls(): { controls: Record<string, Control> } {\n    return { controls: createObjectDefaultControls() };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const targetCanvas = this.canvas;\n    if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\n      const transform = targetCanvas._currentTransform,\n        target = transform.target,\n        action = transform.action;\n      if (\n        this === (target as unknown as this) &&\n        action &&\n        action.startsWith(SCALE)\n      ) {\n        return false;\n      }\n    }\n    return super._updateCacheCanvas();\n  }\n\n  getActiveControl() {\n    const key = this.__corner;\n    return key\n      ? {\n          key,\n          control: this.controls[key],\n          coord: this.oCoords[key],\n        }\n      : undefined;\n  }\n\n  /**\n   * Determines which corner is under the mouse cursor, represented by `pointer`.\n   * This function is return a corner only if the object is the active one.\n   * This is done to avoid selecting corner of non active object and activating transformations\n   * rather than drag action. The default behavior of fabricJS is that if you want to transform\n   * an object, first you select it to show the control set\n   * @private\n   * @param {Object} pointer The pointer indicating the mouse position\n   * @param {boolean} forTouch indicates if we are looking for interaction area with a touch action\n   * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or 0 if nothing is found.\n   */\n  findControl(\n    pointer: Point,\n    forTouch = false,\n  ): { key: string; control: Control; coord: TOCoord } | undefined {\n    if (!this.hasControls || !this.canvas) {\n      return undefined;\n    }\n\n    this.__corner = undefined;\n    const cornerEntries = Object.entries(this.oCoords);\n    for (let i = cornerEntries.length - 1; i >= 0; i--) {\n      const [key, corner] = cornerEntries[i];\n      const control = this.controls[key];\n\n      if (\n        control.shouldActivate(\n          key,\n          this,\n          pointer,\n          forTouch ? corner.touchCorner : corner.corner,\n        )\n      ) {\n        // this.canvas.contextTop.fillRect(pointer.x - 1, pointer.y - 1, 2, 2);\n        this.__corner = key;\n\n        return { key, control, coord: this.oCoords[key] };\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Calculates the coordinates of the center of each control plus the corners of the control itself\n   * This basically just delegates to each control positionHandler\n   * WARNING: changing what is passed to positionHandler is a breaking change, since position handler\n   * is a public api and should be done just if extremely necessary\n   * @return {Record<string, TOCoord>}\n   */\n  calcOCoords(): Record<string, TOCoord> {\n    const vpt = this.getViewportTransform(),\n      center = this.getCenterPoint(),\n      tMatrix = createTranslateMatrix(center.x, center.y),\n      rMatrix = createRotateMatrix({\n        angle: this.getTotalAngle() - (!!this.group && this.flipX ? 180 : 0),\n      }),\n      positionMatrix = multiplyTransformMatrices(tMatrix, rMatrix),\n      startMatrix = multiplyTransformMatrices(vpt, positionMatrix),\n      finalMatrix = multiplyTransformMatrices(startMatrix, [\n        1 / vpt[0],\n        0,\n        0,\n        1 / vpt[3],\n        0,\n        0,\n      ]),\n      transformOptions = this.group\n        ? qrDecompose(this.calcTransformMatrix())\n        : undefined;\n    // decomposing could bring negative scaling and `_calculateCurrentDimensions` can't take it\n    if (transformOptions) {\n      transformOptions.scaleX = Math.abs(transformOptions.scaleX);\n      transformOptions.scaleY = Math.abs(transformOptions.scaleY);\n    }\n    const dim = this._calculateCurrentDimensions(transformOptions),\n      coords: Record<string, TOCoord> = {};\n\n    this.forEachControl((control, key) => {\n      const position = control.positionHandler(dim, finalMatrix, this, control);\n      // coords[key] are sometimes used as points. Those are points to which we add\n      // the property corner and touchCorner from `_calcCornerCoords`.\n      // don't remove this assign for an object spread.\n      coords[key] = Object.assign(\n        position,\n        this._calcCornerCoords(control, position),\n      );\n    });\n\n    // debug code\n    /*\n      const canvas = this.canvas;\n      setTimeout(function () {\n      if (!canvas) return;\n        canvas.contextTop.clearRect(0, 0, 700, 700);\n        canvas.contextTop.fillStyle = 'green';\n        Object.keys(coords).forEach(function(key) {\n          const control = coords[key];\n          canvas.contextTop.fillRect(control.x, control.y, 3, 3);\n        });\n      } 50);\n    */\n    return coords;\n  }\n\n  /**\n   * Sets the coordinates that determine the interaction area of each control\n   * note: if we would switch to ROUND corner area, all of this would disappear.\n   * everything would resolve to a single point and a pythagorean theorem for the distance\n   * @todo evaluate simplification of code switching to circle interaction area at runtime\n   * @private\n   */\n  private _calcCornerCoords(control: Control, position: Point) {\n    const angle = this.getTotalAngle();\n    const corner = control.calcCornerCoords(\n      angle,\n      this.cornerSize,\n      position.x,\n      position.y,\n      false,\n      this,\n    );\n    const touchCorner = control.calcCornerCoords(\n      angle,\n      this.touchCornerSize,\n      position.x,\n      position.y,\n      true,\n      this,\n    );\n    return { corner, touchCorner };\n  }\n\n  /**\n   * @override set controls' coordinates as well\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   * @return {void}\n   */\n  setCoords(): void {\n    super.setCoords();\n    this.canvas && (this.oCoords = this.calcOCoords());\n  }\n\n  /**\n   * Calls a function for each control. The function gets called,\n   * with the control, the control's key and the object that is calling the iterator\n   * @param {Function} fn function to iterate over the controls over\n   */\n  forEachControl(\n    fn: (\n      control: Control,\n      key: string,\n      fabricObject: InteractiveFabricObject,\n    ) => any,\n  ) {\n    for (const i in this.controls) {\n      fn(this.controls[i], i, this);\n    }\n  }\n\n  /**\n   * Draws a colored layer behind the object, inside its selection borders.\n   * Requires public options: padding, selectionBackgroundColor\n   * this function is called when the context is transformed\n   * has checks to be skipped when the object is on a staticCanvas\n   * @todo evaluate if make this disappear in favor of a pre-render hook for objects\n   * this was added by Andrea Bogazzi to make possible some feature for work reasons\n   * it seemed a good option, now is an edge case\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   */\n  drawSelectionBackground(ctx: CanvasRenderingContext2D): void {\n    if (\n      !this.selectionBackgroundColor ||\n      (this.canvas && (this.canvas._activeObject as unknown as this) !== this)\n    ) {\n      return;\n    }\n    ctx.save();\n    const center = this.getRelativeCenterPoint(),\n      wh = this._calculateCurrentDimensions(),\n      vpt = this.getViewportTransform();\n    ctx.translate(center.x, center.y);\n    ctx.scale(1 / vpt[0], 1 / vpt[3]);\n    ctx.rotate(degreesToRadians(this.angle));\n    ctx.fillStyle = this.selectionBackgroundColor;\n    ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\n    ctx.restore();\n  }\n\n  /**\n   * @public override this function in order to customize the drawing of the control box, e.g. rounded corners, different border style.\n   * @param {CanvasRenderingContext2D} ctx ctx is rotated and translated so that (0,0) is at object's center\n   * @param {Point} size the control box size used\n   */\n  strokeBorders(ctx: CanvasRenderingContext2D, size: Point): void {\n    ctx.strokeRect(-size.x / 2, -size.y / 2, size.x, size.y);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size\n   * @param {TStyleOverride} styleOverride object to override the object style\n   */\n  _drawBorders(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n    styleOverride: TStyleOverride = {},\n  ): void {\n    const options = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      borderDashArray: this.borderDashArray,\n      ...styleOverride,\n    };\n    ctx.save();\n    ctx.strokeStyle = options.borderColor;\n    this._setLineDash(ctx, options.borderDashArray);\n    this.strokeBorders(ctx, size);\n    options.hasControls && this.drawControlsConnectingLines(ctx, size);\n    ctx.restore();\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * the context here is not transformed\n   * @todo move to interactivity\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TStyleOverride} [styleOverride] properties to override the object style\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: TStyleOverride = {},\n  ) {\n    const { hasBorders, hasControls } = this;\n    const styleOptions = {\n      hasBorders,\n      hasControls,\n      ...styleOverride,\n    };\n    const vpt = this.getViewportTransform(),\n      shouldDrawBorders = styleOptions.hasBorders,\n      shouldDrawControls = styleOptions.hasControls;\n    const matrix = multiplyTransformMatrices(vpt, this.calcTransformMatrix());\n    const options = qrDecompose(matrix);\n    ctx.save();\n    ctx.translate(options.translateX, options.translateY);\n    ctx.lineWidth = this.borderScaleFactor; // 1 * this.borderScaleFactor;\n    // since interactive groups have been introduced, an object could be inside a group and needing controls\n    // the following equality check `this.group === this.parent` covers:\n    // object without a group ( undefined === undefined )\n    // object inside a group\n    // excludes object inside a group but multi selected since group and parent will differ in value\n    if (this.group === this.parent) {\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    }\n    if (this.flipX) {\n      options.angle -= 180;\n    }\n    ctx.rotate(degreesToRadians(this.group ? options.angle : this.angle));\n    shouldDrawBorders && this.drawBorders(ctx, options, styleOverride);\n    shouldDrawControls && this.drawControls(ctx, styleOverride);\n    ctx.restore();\n  }\n\n  /**\n   * Draws borders of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {object} options object representing current object parameters\n   * @param {TStyleOverride} [styleOverride] object to override the object style\n   */\n  drawBorders(\n    ctx: CanvasRenderingContext2D,\n    options: TQrDecomposeOut,\n    styleOverride: TStyleOverride,\n  ): void {\n    let size;\n    if ((styleOverride && styleOverride.forActiveSelection) || this.group) {\n      const bbox = sizeAfterTransform(\n          this.width,\n          this.height,\n          calcDimensionsMatrix(options),\n        ),\n        stroke = !this.isStrokeAccountedForInDimensions()\n          ? (this.strokeUniform\n              ? new Point().scalarAdd(this.canvas ? this.canvas.getZoom() : 1)\n              : // this is extremely confusing. options comes from the upper function\n                // and is the qrDecompose of a matrix that takes in account zoom too\n                new Point(options.scaleX, options.scaleY)\n            ).scalarMultiply(this.strokeWidth)\n          : ZERO;\n      size = bbox\n        .add(stroke)\n        .scalarAdd(this.borderScaleFactor)\n        .scalarAdd(this.padding * 2);\n    } else {\n      size = this._calculateCurrentDimensions().scalarAdd(\n        this.borderScaleFactor,\n      );\n    }\n    this._drawBorders(ctx, size, styleOverride);\n  }\n\n  /**\n   * Draws lines from a borders of an object's bounding box to controls that have `withConnection` property set.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size object size x = width, y = height\n   */\n  drawControlsConnectingLines(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n  ): void {\n    let shouldStroke = false;\n\n    ctx.beginPath();\n    this.forEachControl((control, key) => {\n      // in this moment, the ctx is centered on the object.\n      // width and height of the above function are the size of the bbox.\n      if (control.withConnection && control.getVisibility(this, key)) {\n        // reset movement for each control\n        shouldStroke = true;\n        ctx.moveTo(control.x * size.x, control.y * size.y);\n        ctx.lineTo(\n          control.x * size.x + control.offsetX,\n          control.y * size.y + control.offsetY,\n        );\n      }\n    });\n    shouldStroke && ctx.stroke();\n  }\n\n  /**\n   * Draws corners of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: cornerSize, padding\n   * Be aware that since fabric 6.0 this function does not call setCoords anymore.\n   * setCoords needs to be called manually if the object of which we are rendering controls\n   * is outside the standard selection and transform process.\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {ControlRenderingStyleOverride} styleOverride object to override the object style\n   */\n  drawControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: ControlRenderingStyleOverride = {},\n  ) {\n    ctx.save();\n    const retinaScaling = this.getCanvasRetinaScaling();\n    const { cornerStrokeColor, cornerDashArray, cornerColor } = this;\n    const options = {\n      cornerStrokeColor,\n      cornerDashArray,\n      cornerColor,\n      ...styleOverride,\n    };\n    ctx.setTransform(retinaScaling, 0, 0, retinaScaling, 0, 0);\n    ctx.strokeStyle = ctx.fillStyle = options.cornerColor;\n    if (!this.transparentCorners) {\n      ctx.strokeStyle = options.cornerStrokeColor;\n    }\n    this._setLineDash(ctx, options.cornerDashArray);\n    this.forEachControl((control, key) => {\n      if (control.getVisibility(this, key)) {\n        const p = this.oCoords[key];\n        control.render(ctx, p.x, p.y, options, this);\n      }\n    });\n    ctx.restore();\n  }\n\n  /**\n   * Returns true if the specified control is visible, false otherwise.\n   * @param {string} controlKey The key of the control. Possible values are usually 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr',\n   * but since the control api allow for any control name, can be any string.\n   * @returns {boolean} true if the specified control is visible, false otherwise\n   */\n  isControlVisible(controlKey: string): boolean {\n    return (\n      this.controls[controlKey] &&\n      this.controls[controlKey].getVisibility(this, controlKey)\n    );\n  }\n\n  /**\n   * Sets the visibility of the specified control.\n   * please do not use.\n   * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n   * but since the control api allow for any control name, can be any string.\n   * @param {Boolean} visible true to set the specified control visible, false otherwise\n   * @todo discuss this overlap of priority here with the team. Andrea Bogazzi for details\n   */\n  setControlVisible(controlKey: string, visible: boolean) {\n    if (!this._controlsVisibility) {\n      this._controlsVisibility = {};\n    }\n    this._controlsVisibility[controlKey] = visible;\n  }\n\n  /**\n   * Sets the visibility state of object controls, this is just a bulk option for setControlVisible;\n   * @param {Record<string, boolean>} [options] with an optional key per control\n   * example: {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n   */\n  setControlsVisibility(options: Record<string, boolean> = {}) {\n    Object.entries(options).forEach(([controlKey, visibility]) =>\n      this.setControlVisible(controlKey, visibility),\n    );\n  }\n\n  /**\n   * Clears the canvas.contextTop in a specific area that corresponds to the object's bounding box\n   * that is in the canvas.contextContainer.\n   * This function is used to clear pieces of contextTop where we render ephemeral effects on top of the object.\n   * Example: blinking cursor text selection, drag effects.\n   * @todo discuss swapping restoreManually with a renderCallback, but think of async issues\n   * @param {Boolean} [restoreManually] When true won't restore the context after clear, in order to draw something else.\n   * @return {CanvasRenderingContext2D|undefined} canvas.contextTop that is either still transformed\n   * with the object transformMatrix, or restored to neutral transform\n   */\n  clearContextTop(\n    restoreManually?: boolean,\n  ): CanvasRenderingContext2D | undefined {\n    if (!this.canvas) {\n      return;\n    }\n    const ctx = this.canvas.contextTop;\n    if (!ctx) {\n      return;\n    }\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this.transform(ctx);\n    // we add 4 pixel, to be sure to do not leave any pixel out\n    const width = this.width + 4,\n      height = this.height + 4;\n    ctx.clearRect(-width / 2, -height / 2, width, height);\n\n    restoreManually || ctx.restore();\n    return ctx;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to deselect this object. If the function returns true, the process is cancelled\n   * @param {Object} [_options] options sent from the upper functions\n   * @param {TPointerEvent} [options.e] event if the process is generated by an event\n   * @param {FabricObject} [options.object] next object we are setting as active, and reason why\n   * this is being deselected\n   */\n  onDeselect(_options?: {\n    e?: TPointerEvent;\n    object?: InteractiveFabricObject;\n  }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to select this object. If the function returns true, the process is cancelled\n   * @param {Object} [_options] options sent from the upper functions\n   * @param {Event} [_options.e] event if the process is generated by an event\n   */\n  onSelect(_options?: { e?: TPointerEvent }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\n   * Fired from {@link Canvas#_onMouseMove}\n   * @returns true in order for the window to start a drag session\n   */\n  shouldStartDragging(_e: TPointerEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\\\n   * Fired once a drag session has started\n   * @returns true to handle the drag event\n   */\n  onDragStart(_e: DragEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * @public\n   * @param {DragEvent} _e\n   * @returns {boolean} true if the object currently dragged can be dropped on the target\n   */\n  canDrop(_e: DragEvent): boolean {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the source of a drag event\n   * example: render the selection status for the part of text that is being dragged from a text object\n   * @public\n   * @param {DragEvent} _e\n   */\n  renderDragSourceEffect(_e: DragEvent) {\n    // for subclasses\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the target of a drag event\n   * used to show that the underly object can receive a drop, or to show how the\n   * object will change when dropping. example: show the cursor where the text is about to be dropped\n   * @public\n   * @param {DragEvent} _e\n   */\n  renderDropTargetEffect(_e: DragEvent) {\n    // for subclasses\n  }\n}\n", "import type { Constructor } from '../typedefs';\n\n/***\n * https://www.typescriptlang.org/docs/handbook/mixins.html#alternative-pattern\n */\nexport function applyMixins<T extends Constructor, S extends Constructor>(\n  derivedCtor: T,\n  constructors: S[],\n) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      name !== 'constructor' &&\n        Object.defineProperty(\n          derivedCtor.prototype,\n          name,\n          Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n            Object.create(null),\n        );\n    });\n  });\n  return derivedCtor as T & { prototype: InstanceType<T & S> };\n}\n", "import type { ObjectEvents } from '../../EventTypeDefs';\nimport { FabricObjectSVGExportMixin } from './FabricObjectSVGExportMixin';\nimport { InteractiveFabricObject } from './InteractiveObject';\nimport { applyMixins } from '../../util/applyMixins';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { classRegistry } from '../../ClassRegistry';\n\n// TODO somehow we have to make a tree-shakeable import\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface FabricObject<\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObjectSVGExportMixin {}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport class FabricObject<\n  Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends InteractiveFabricObject<Props, SProps, EventSpec> {}\n\napplyMixins(FabricObject, [FabricObjectSVGExportMixin]);\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n\nexport { cacheProperties } from './defaultValues';\n", "/**\n * Returns true if context has transparent pixel\n * at specified location (taking tolerance into account)\n * @param {CanvasRenderingContext2D} ctx context\n * @param {Number} x x coordinate in canvasElementCoordinate, not fabric space. integer\n * @param {Number} y y coordinate in canvasElementCoordinate, not fabric space. integer\n * @param {Number} tolerance Tolerance pixels around the point, not alpha tolerance, integer\n * @return {boolean} true if transparent\n */\nexport const isTransparent = (\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  tolerance: number,\n): boolean => {\n  tolerance = Math.round(tolerance);\n  const size = tolerance * 2 + 1;\n  const { data } = ctx.getImageData(x - tolerance, y - tolerance, size, size);\n\n  // Split image data - for tolerance > 1, pixelDataSize = 4;\n  for (let i = 3; i < data.length; i += 4) {\n    const alphaChannel = data[i];\n    if (alphaChannel > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n", "import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { degreesToRadians } from '../radiansDegreesConversion';\nimport { createVector } from '../vectors';\nimport type { TProjectStrokeOnPointsOptions, TProjection } from './types';\n\n/**\n * @see https://github.com/fabricjs/fabric.js/pull/8344\n * @todo consider removing skewing from points before calculating stroke projection,\n * see https://github.com/fabricjs/fabric.js/commit/494a10ee2f8c2278ae9a55b20bf50cf6ee25b064#commitcomment-94751537\n */\nexport abstract class StrokeProjectionsBase {\n  declare options: TProjectStrokeOnPointsOptions;\n  declare scale: Point;\n  declare strokeUniformScalar: Point;\n  declare strokeProjectionMagnitude: number;\n\n  constructor(options: TProjectStrokeOnPointsOptions) {\n    this.options = options;\n    this.strokeProjectionMagnitude = this.options.strokeWidth / 2;\n    this.scale = new Point(this.options.scaleX, this.options.scaleY);\n    this.strokeUniformScalar = this.options.strokeUniform\n      ? new Point(1 / this.options.scaleX, 1 / this.options.scaleY)\n      : new Point(1, 1);\n  }\n\n  /**\n   * When the stroke is uniform, scaling affects the arrangement of points. So we must take it into account.\n   */\n  protected createSideVector(from: XY, to: XY) {\n    const v = createVector(from, to);\n    return this.options.strokeUniform ? v.multiply(this.scale) : v;\n  }\n\n  protected abstract calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude?: number,\n  ): Point;\n\n  protected projectOrthogonally(from: Point, to: Point, magnitude?: number) {\n    return this.applySkew(\n      from.add(this.calcOrthogonalProjection(from, to, magnitude)),\n    );\n  }\n\n  protected isSkewed() {\n    return this.options.skewX !== 0 || this.options.skewY !== 0;\n  }\n\n  protected applySkew(point: Point) {\n    const p = new Point(point);\n    // skewY must be applied before skewX as this distortion affects skewX calculation\n    p.y += p.x * Math.tan(degreesToRadians(this.options.skewY));\n    p.x += p.y * Math.tan(degreesToRadians(this.options.skewX));\n    return p;\n  }\n\n  protected scaleUnitVector(unitVector: Point, scalar: number) {\n    return unitVector.multiply(this.strokeUniformScalar).scalarMultiply(scalar);\n  }\n\n  protected abstract projectPoints(): Point[];\n\n  public abstract project(): TProjection[];\n}\n", "import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { halfPI, twoMathPi } from '../../../constants';\nimport type { TRadian } from '../../../typedefs';\nimport { degreesToRadians } from '../radiansDegreesConversion';\nimport {\n  calcAngleBetweenVectors,\n  calcVectorRotation,\n  crossProduct,\n  getOrthonormalVector,\n  getUnitVector,\n  isBetweenVectors,\n  magnitude,\n  rotateVector,\n} from '../vectors';\nimport { StrokeProjectionsBase } from './StrokeProjectionsBase';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\nconst zeroVector = new Point();\n\n/**\n * class in charge of finding projections for each type of line join\n * @see {@link [Closed path projections at #8344](https://github.com/fabricjs/fabric.js/pull/8344#2-closed-path)}\n *\n * - MDN:\n *   - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin\n *   - https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linejoin\n * - Spec: https://svgwg.org/svg2-draft/painting.html#StrokeLinejoinProperty\n * - Playground to understand how the line joins works: https://hypertolosana.github.io/efficient-webgl-stroking/index.html\n * - View the calculated projections for each of the control points: https://codesandbox.io/s/project-stroke-points-with-context-to-trace-b8jc4j?file=/src/index.js\n *\n */\nexport class StrokeLineJoinProjections extends StrokeProjectionsBase {\n  /**\n   * The point being projected (the angle ∠BAC)\n   */\n  declare A: Point;\n  /**\n   * The point before A\n   */\n  declare B: Point;\n  /**\n   * The point after A\n   */\n  declare C: Point;\n  /**\n   * The AB vector\n   */\n  AB: Point;\n  /**\n   * The AC vector\n   */\n  AC: Point;\n  /**\n   * The angle of A (∠BAC)\n   */\n  alpha: TRadian;\n  /**\n   * The bisector of A (∠BAC)\n   */\n  bisector: Point;\n\n  static getOrthogonalRotationFactor(vector1: Point, vector2?: Point) {\n    const angle = vector2\n      ? calcAngleBetweenVectors(vector1, vector2)\n      : calcVectorRotation(vector1);\n    return Math.abs(angle) < halfPI ? -1 : 1;\n  }\n\n  constructor(A: XY, B: XY, C: XY, options: TProjectStrokeOnPointsOptions) {\n    super(options);\n    this.A = new Point(A);\n    this.B = new Point(B);\n    this.C = new Point(C);\n    this.AB = this.createSideVector(this.A, this.B);\n    this.AC = this.createSideVector(this.A, this.C);\n    this.alpha = calcAngleBetweenVectors(this.AB, this.AC);\n    this.bisector = getUnitVector(\n      // if AC is also the zero vector nothing will be projected\n      // in that case the next point will handle the projection\n      rotateVector(this.AB.eq(zeroVector) ? this.AC : this.AB, this.alpha / 2),\n    );\n  }\n\n  calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude: number = this.strokeProjectionMagnitude,\n  ) {\n    const vector = this.createSideVector(from, to);\n    const orthogonalProjection = getOrthonormalVector(vector);\n    const correctSide = StrokeLineJoinProjections.getOrthogonalRotationFactor(\n      orthogonalProjection,\n      this.bisector,\n    );\n    return this.scaleUnitVector(orthogonalProjection, magnitude * correctSide);\n  }\n\n  /**\n   * BEVEL\n   * Calculation: the projection points are formed by the vector orthogonal to the vertex.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-2-bevel\n   */\n  projectBevel() {\n    const projections: Point[] = [];\n    // if `alpha` equals 0 or 2*PI, the projections are the same for `B` and `C`\n    (this.alpha % twoMathPi === 0 ? [this.B] : [this.B, this.C]).forEach(\n      (to) => {\n        projections.push(this.projectOrthogonally(this.A, to));\n        projections.push(\n          this.projectOrthogonally(this.A, to, -this.strokeProjectionMagnitude),\n        );\n      },\n    );\n    return projections;\n  }\n\n  /**\n   * MITER\n   * Calculation: the corner is formed by extending the outer edges of the stroke\n   * at the tangents of the path segments until they intersect.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-1-miter\n   */\n  projectMiter() {\n    const projections: Point[] = [],\n      alpha = Math.abs(this.alpha),\n      hypotUnitScalar = 1 / Math.sin(alpha / 2),\n      miterVector = this.scaleUnitVector(\n        this.bisector,\n        -this.strokeProjectionMagnitude * hypotUnitScalar,\n      );\n\n    // When two line segments meet at a sharp angle, it is possible for the join to extend,\n    // far beyond the thickness of the line stroking the path. The stroke-miterlimit imposes\n    // a limit on the extent of the line join.\n    // MDN: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit\n    // When the stroke is uniform, scaling changes the arrangement of points, this changes the miter-limit\n    const strokeMiterLimit = this.options.strokeUniform\n      ? magnitude(\n          this.scaleUnitVector(this.bisector, this.options.strokeMiterLimit),\n        )\n      : this.options.strokeMiterLimit;\n\n    if (\n      magnitude(miterVector) / this.strokeProjectionMagnitude <=\n      strokeMiterLimit\n    ) {\n      projections.push(this.applySkew(this.A.add(miterVector)));\n    }\n    /* when the miter-limit is reached, the stroke line join becomes of type bevel.\n      We always need two orthogonal projections which are basically bevel-type projections,\n      so regardless of whether the miter-limit was reached or not, we include these projections.\n    */\n    projections.push(...this.projectBevel());\n\n    return projections;\n  }\n\n  /**\n   * ROUND (without skew)\n   * Calculation: the projections are the two vectors parallel to X and Y axes\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-3-1-round-without-skew\n   */\n  private projectRoundNoSkew(startCircle: Point, endCircle: Point) {\n    const projections: Point[] = [],\n      // correctSide is used to only consider projecting for the outer side\n      correctSide = new Point(\n        StrokeLineJoinProjections.getOrthogonalRotationFactor(this.bisector),\n        StrokeLineJoinProjections.getOrthogonalRotationFactor(\n          new Point(this.bisector.y, this.bisector.x),\n        ),\n      ),\n      radiusOnAxisX = new Point(1, 0)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar)\n        .multiply(correctSide),\n      radiusOnAxisY = new Point(0, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar)\n        .multiply(correctSide);\n\n    [radiusOnAxisX, radiusOnAxisY].forEach((vector) => {\n      if (isBetweenVectors(vector, startCircle, endCircle)) {\n        projections.push(this.A.add(vector));\n      }\n    });\n    return projections;\n  }\n\n  /**\n   * ROUND (with skew)\n   * Calculation: the projections are the points furthest from the vertex in\n   * the direction of the X and Y axes after distortion.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-3-2-round-skew\n   */\n  private projectRoundWithSkew(startCircle: Point, endCircle: Point) {\n    const projections: Point[] = [];\n\n    const { skewX, skewY, scaleX, scaleY, strokeUniform } = this.options,\n      shearing = new Point(\n        Math.tan(degreesToRadians(skewX)),\n        Math.tan(degreesToRadians(skewY)),\n      );\n    // The points furthest from the vertex in the direction of the X and Y axes after distortion\n    const circleRadius = this.strokeProjectionMagnitude,\n      newY = strokeUniform\n        ? circleRadius /\n          scaleY /\n          Math.sqrt(1 / scaleY ** 2 + (1 / scaleX ** 2) * shearing.y ** 2)\n        : circleRadius / Math.sqrt(1 + shearing.y ** 2),\n      furthestY = new Point(\n        // Safe guard due to floating point precision. In some situations the square root\n        // was returning NaN because of a negative number close to zero.\n        Math.sqrt(Math.max(circleRadius ** 2 - newY ** 2, 0)),\n        newY,\n      ),\n      newX = strokeUniform\n        ? circleRadius /\n          Math.sqrt(\n            1 +\n              (shearing.x ** 2 * (1 / scaleY) ** 2) /\n                (1 / scaleX + (1 / scaleX) * shearing.x * shearing.y) ** 2,\n          )\n        : circleRadius /\n          Math.sqrt(1 + shearing.x ** 2 / (1 + shearing.x * shearing.y) ** 2),\n      furthestX = new Point(\n        newX,\n        Math.sqrt(Math.max(circleRadius ** 2 - newX ** 2, 0)),\n      );\n\n    [\n      furthestX,\n      furthestX.scalarMultiply(-1),\n      furthestY,\n      furthestY.scalarMultiply(-1),\n    ]\n      // We need to skew the vector here as this information is used to check if\n      // it is between the start and end of the circle segment\n      .map((vector) =>\n        this.applySkew(\n          strokeUniform ? vector.multiply(this.strokeUniformScalar) : vector,\n        ),\n      )\n      .forEach((vector) => {\n        if (isBetweenVectors(vector, startCircle, endCircle)) {\n          projections.push(this.applySkew(this.A).add(vector));\n        }\n      });\n\n    return projections;\n  }\n\n  projectRound() {\n    const projections: Point[] = [];\n    /* Include the start and end points of the circle segment, so that only\n      the projections contained within it are included */\n    // add the orthogonal projections (start and end points of circle segment)\n    projections.push(...this.projectBevel());\n    // let's determines which one of the orthogonal projection is the beginning and end of the circle segment.\n    // when `alpha` equals 0 or 2*PI, we have a straight line, so the way to find the start/end is different.\n    const isStraightLine = this.alpha % twoMathPi === 0,\n      // change the origin of the projections to point A\n      // so that the cross product calculation is correct\n      newOrigin = this.applySkew(this.A),\n      proj0 = projections[isStraightLine ? 0 : 2].subtract(newOrigin),\n      proj1 = projections[isStraightLine ? 1 : 0].subtract(newOrigin),\n      // when `isStraightLine` === true, we compare with the vector opposite AB, otherwise we compare with the bisector.\n      comparisonVector = isStraightLine\n        ? this.applySkew(this.AB.scalarMultiply(-1))\n        : this.applySkew(\n            this.bisector.multiply(this.strokeUniformScalar).scalarMultiply(-1),\n          ),\n      // the beginning of the circle segment is always to the right of the comparison vector (cross product > 0)\n      isProj0Start = crossProduct(proj0, comparisonVector) > 0,\n      startCircle = isProj0Start ? proj0 : proj1,\n      endCircle = isProj0Start ? proj1 : proj0;\n    if (!this.isSkewed()) {\n      projections.push(...this.projectRoundNoSkew(startCircle, endCircle));\n    } else {\n      projections.push(...this.projectRoundWithSkew(startCircle, endCircle));\n    }\n    return projections;\n  }\n\n  /**\n   * Project stroke width on points returning projections for each point as follows:\n   * - `miter`: 1 point corresponding to the outer boundary. If the miter limit is exceeded, it will be 2 points (becomes bevel)\n   * - `bevel`: 2 points corresponding to the bevel possible boundaries, orthogonal to the stroke.\n   * - `round`: same as `bevel` when it has no skew, with skew are 4 points.\n   */\n  protected projectPoints() {\n    switch (this.options.strokeLineJoin) {\n      case 'miter':\n        return this.projectMiter();\n      case 'round':\n        return this.projectRound();\n      default:\n        return this.projectBevel();\n    }\n  }\n\n  public project(): TProjection[] {\n    return this.projectPoints().map((point) => ({\n      originPoint: this.A,\n      projectedPoint: point,\n      angle: this.alpha,\n      bisector: this.bisector,\n    }));\n  }\n}\n", "import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { getOrthonormalVector, getUnitVector } from '../vectors';\nimport { StrokeLineJoinProjections } from './StrokeLineJoinProjections';\nimport { StrokeProjectionsBase } from './StrokeProjectionsBase';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\n/**\n * class in charge of finding projections for each type of line cap for start/end of an open path\n * @see {@link [Open path projections at #8344](https://github.com/fabricjs/fabric.js/pull/8344#1-open-path)}\n *\n * Reference:\n * - MDN:\n *   - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap\n *   - https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\n * - Spec: https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-linecap-dev\n * - Playground to understand how the line joins works: https://hypertolosana.github.io/efficient-webgl-stroking/index.html\n * - View the calculated projections for each of the control points: https://codesandbox.io/s/project-stroke-points-with-context-to-trace-b8jc4j?file=/src/index.js\n */\nexport class StrokeLineCapProjections extends StrokeProjectionsBase {\n  /**\n   * edge point\n   */\n  declare A: Point;\n  /**\n   * point next to edge point\n   */\n  declare T: Point;\n\n  constructor(A: XY, T: XY, options: TProjectStrokeOnPointsOptions) {\n    super(options);\n    this.A = new Point(A);\n    this.T = new Point(T);\n  }\n\n  calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude: number = this.strokeProjectionMagnitude,\n  ) {\n    const vector = this.createSideVector(from, to);\n    return this.scaleUnitVector(getOrthonormalVector(vector), magnitude);\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Butt\n   * Calculation: to find the projections, just find the points orthogonal to the stroke\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-1-butt\n   */\n  projectButt() {\n    return [\n      this.projectOrthogonally(this.A, this.T, this.strokeProjectionMagnitude),\n      this.projectOrthogonally(this.A, this.T, -this.strokeProjectionMagnitude),\n    ];\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Round\n   * Calculation: same as stroke line join `round`\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-2-round\n   */\n  projectRound() {\n    const projections: Point[] = [];\n\n    if (!this.isSkewed() && this.A.eq(this.T)) {\n      /* 1 point case without `skew`\n        When `strokeUniform` is true, scaling has no effect.\n        So we divide by scale, to remove its effect.\n      */\n      const projection = new Point(1, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar);\n      projections.push(\n        this.applySkew(this.A.add(projection)),\n        this.applySkew(this.A.subtract(projection)),\n      );\n    } else {\n      projections.push(\n        ...new StrokeLineJoinProjections(\n          this.A,\n          this.T,\n          this.T,\n          this.options,\n        ).projectRound(),\n      );\n    }\n\n    return projections;\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Square\n   * Calculation: project a rectangle of points on the stroke in the opposite direction of the vector `AT`\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-3-square\n   */\n  projectSquare() {\n    const projections: Point[] = [];\n\n    if (this.A.eq(this.T)) {\n      /* 1 point case without `skew`\n        When `strokeUniform` is true, scaling has no effect.\n        So we divide by scale, to remove its effect.\n      */\n      const projection = new Point(1, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar);\n      projections.push(this.A.add(projection), this.A.subtract(projection));\n    } else {\n      const orthogonalProjection = this.calcOrthogonalProjection(\n        this.A,\n        this.T,\n        this.strokeProjectionMagnitude,\n      );\n      const strokePointingOut = this.scaleUnitVector(\n        getUnitVector(this.createSideVector(this.A, this.T)),\n        -this.strokeProjectionMagnitude,\n      );\n      const projectedA = this.A.add(strokePointingOut);\n      projections.push(\n        projectedA.add(orthogonalProjection),\n        projectedA.subtract(orthogonalProjection),\n      );\n    }\n\n    return projections.map((p) => this.applySkew(p));\n  }\n\n  protected projectPoints() {\n    switch (this.options.strokeLineCap) {\n      case 'round':\n        return this.projectRound();\n      case 'square':\n        return this.projectSquare();\n      default:\n        return this.projectButt();\n    }\n  }\n\n  public project(): TProjection[] {\n    return this.projectPoints().map((point) => ({\n      originPoint: this.A,\n      projectedPoint: point,\n    }));\n  }\n}\n", "import { Point, type XY } from '../../../Point';\nimport { findIndexRight } from '../../internals/findRight';\nimport { StrokeLineCapProjections } from './StrokeLineCapProjections';\nimport { StrokeLineJoinProjections } from './StrokeLineJoinProjections';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\nexport * from './types';\n\n/**\n *\n * Used to calculate object's bounding box\n *\n * @see https://github.com/fabricjs/fabric.js/pull/8344\n *\n */\nexport const projectStrokeOnPoints = (\n  points: XY[],\n  options: TProjectStrokeOnPointsOptions,\n  openPath = false,\n): TProjection[] => {\n  const projections: TProjection[] = [];\n\n  if (points.length === 0) {\n    return projections;\n  }\n\n  // first we remove duplicate neighboring points\n  const reduced = points.reduce(\n    (reduced, point) => {\n      if (!reduced[reduced.length - 1].eq(point)) {\n        reduced.push(new Point(point));\n      }\n      return reduced;\n    },\n    [new Point(points[0])],\n  );\n\n  if (reduced.length === 1) {\n    openPath = true;\n  } else if (!openPath) {\n    // remove points from end in case they equal the first point\n    // in order to correctly project the first point\n    const start = reduced[0];\n    const index = findIndexRight(reduced, (point) => !point.eq(start));\n    reduced.splice(index + 1);\n  }\n\n  reduced.forEach((A, index, points) => {\n    let B: XY, C: XY;\n    if (index === 0) {\n      C = points[1];\n      B = openPath ? A : points[points.length - 1];\n    } else if (index === points.length - 1) {\n      B = points[index - 1];\n      C = openPath ? A : points[0];\n    } else {\n      B = points[index - 1];\n      C = points[index + 1];\n    }\n\n    if (openPath && points.length === 1) {\n      projections.push(\n        ...new StrokeLineCapProjections(A, A, options).project(),\n      );\n    } else if (openPath && (index === 0 || index === points.length - 1)) {\n      projections.push(\n        ...new StrokeLineCapProjections(\n          A,\n          index === 0 ? C : B,\n          options,\n        ).project(),\n      );\n    } else {\n      projections.push(\n        ...new StrokeLineJoinProjections(A, B, C, options).project(),\n      );\n    }\n  });\n\n  return projections;\n};\n", "export const findIndexRight = <T>(\n  array: T[],\n  predicate: (value: T, index: number, array: T[]) => boolean,\n) => {\n  for (let index = array.length - 1; index >= 0; index--) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n};\n", "import type { TextStyle } from '../../shapes/Text/StyledText';\n\nexport const cloneStyles = (style: TextStyle): TextStyle => {\n  const newObj: TextStyle = {};\n  Object.keys(style).forEach((key) => {\n    newObj[key] = {};\n    Object.keys(style[key]).forEach((keyInner) => {\n      newObj[key][keyInner] = { ...style[key][keyInner] };\n    });\n  });\n  return newObj;\n};\n", "import { getFabricWindow } from '../env';\n\n/**\n * Capitalizes a string\n * @param {String} string String to capitalize\n * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\n * and other letters stay untouched, if false first letter is capitalized\n * and other letters are converted to lowercase.\n * @return {String} Capitalized version of a string\n */\nexport const capitalize = (string: string, firstLetterOnly = false): string =>\n  `${string.charAt(0).toUpperCase()}${\n    firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase()\n  }`;\n\n/**\n * Escapes XML in a string\n * @param {String} string String to escape\n * @return {String} Escaped version of a string\n */\nexport const escapeXml = (string: string): string =>\n  string\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&apos;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n\nlet segmenter: Intl.Segmenter | false;\n\nconst getSegmenter = () => {\n  if (!segmenter) {\n    segmenter =\n      'Intl' in getFabricWindow() &&\n      'Segmenter' in Intl &&\n      new Intl.Segmenter(undefined, {\n        granularity: 'grapheme',\n      });\n  }\n  return segmenter;\n};\n\n/**\n * Divide a string in the user perceived single units\n * @param {String} textstring String to escape\n * @return {Array} array containing the graphemes\n */\nexport const graphemeSplit = (textstring: string): string[] => {\n  segmenter || getSegmenter();\n  if (segmenter) {\n    const segments = segmenter.segment(textstring);\n    return Array.from(segments).map(({ segment }) => segment);\n  }\n\n  //Fallback\n  return graphemeSplitImpl(textstring);\n};\n\nconst graphemeSplitImpl = (textstring: string): string[] => {\n  const graphemes: string[] = [];\n  for (let i = 0, chr; i < textstring.length; i++) {\n    if ((chr = getWholeChar(textstring, i)) === false) {\n      continue;\n    }\n    graphemes.push(chr as string);\n  }\n  return graphemes;\n};\n\n// taken from mdn in the charAt doc page.\nconst getWholeChar = (str: string, i: number): string | false => {\n  const code = str.charCodeAt(i);\n  if (isNaN(code)) {\n    return ''; // Position not found\n  }\n  if (code < 0xd800 || code > 0xdfff) {\n    return str.charAt(i);\n  }\n\n  // High surrogate (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xd800 <= code && code <= 0xdbff) {\n    if (str.length <= i + 1) {\n      throw 'High surrogate without following low surrogate';\n    }\n    const next = str.charCodeAt(i + 1);\n    if (0xdc00 > next || next > 0xdfff) {\n      throw 'High surrogate without following low surrogate';\n    }\n    return str.charAt(i) + str.charAt(i + 1);\n  }\n  // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n  if (i === 0) {\n    throw 'Low surrogate without preceding high surrogate';\n  }\n  const prev = str.charCodeAt(i - 1);\n\n  // (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xd800 > prev || prev > 0xdbff) {\n    throw 'Low surrogate without preceding high surrogate';\n  }\n  // We can pass over low surrogates now as the second component\n  // in a pair which we have already processed\n  return false;\n};\n", "import { reNewline } from '../../constants';\nimport type {\n  TextStyle,\n  TextStyleDeclaration,\n} from '../../shapes/Text/StyledText';\nimport { cloneStyles } from '../internals/cloneStyles';\nimport { graphemeSplit } from '../lang_string';\n\nexport type TextStyleArray = {\n  start: number;\n  end: number;\n  style: TextStyleDeclaration;\n}[];\n\n/**\n * @param {Object} prevStyle first style to compare\n * @param {Object} thisStyle second style to compare\n * @param {boolean} forTextSpans whether to check overline, underline, and line-through properties\n * @return {boolean} true if the style changed\n */\nexport const hasStyleChanged = (\n  prevStyle: TextStyleDeclaration,\n  thisStyle: TextStyleDeclaration,\n  forTextSpans = false,\n) =>\n  prevStyle.fill !== thisStyle.fill ||\n  prevStyle.stroke !== thisStyle.stroke ||\n  prevStyle.strokeWidth !== thisStyle.strokeWidth ||\n  prevStyle.fontSize !== thisStyle.fontSize ||\n  prevStyle.fontFamily !== thisStyle.fontFamily ||\n  prevStyle.fontWeight !== thisStyle.fontWeight ||\n  prevStyle.fontStyle !== thisStyle.fontStyle ||\n  prevStyle.textBackgroundColor !== thisStyle.textBackgroundColor ||\n  prevStyle.deltaY !== thisStyle.deltaY ||\n  (forTextSpans &&\n    (prevStyle.overline !== thisStyle.overline ||\n      prevStyle.underline !== thisStyle.underline ||\n      prevStyle.linethrough !== thisStyle.linethrough));\n\n/**\n * Returns the array form of a text object's inline styles property with styles grouped in ranges\n * rather than per character. This format is less verbose, and is better suited for storage\n * so it is used in serialization (not during runtime).\n * @param {object} styles per character styles for a text object\n * @param {String} text the text string that the styles are applied to\n * @return {{start: number, end: number, style: object}[]}\n */\nexport const stylesToArray = (\n  styles: TextStyle,\n  text: string,\n): TextStyleArray => {\n  const textLines = text.split('\\n'),\n    stylesArray = [];\n  let charIndex = -1,\n    prevStyle = {};\n  // clone style structure to prevent mutation\n  styles = cloneStyles(styles);\n\n  //loop through each textLine\n  for (let i = 0; i < textLines.length; i++) {\n    const chars = graphemeSplit(textLines[i]);\n    if (!styles[i]) {\n      //no styles exist for this line, so add the line's length to the charIndex total and reset prevStyle\n      charIndex += chars.length;\n      prevStyle = {};\n      continue;\n    }\n    //loop through each character of the current line\n    for (let c = 0; c < chars.length; c++) {\n      charIndex++;\n      const thisStyle = styles[i][c];\n      //check if style exists for this character\n      if (thisStyle && Object.keys(thisStyle).length > 0) {\n        if (hasStyleChanged(prevStyle, thisStyle, true)) {\n          stylesArray.push({\n            start: charIndex,\n            end: charIndex + 1,\n            style: thisStyle,\n          });\n        } else {\n          //if style is the same as previous character, increase end index\n          stylesArray[stylesArray.length - 1].end++;\n        }\n      }\n      prevStyle = thisStyle || {};\n    }\n  }\n  return stylesArray;\n};\n\n/**\n * Returns the object form of the styles property with styles that are assigned per\n * character rather than grouped by range. This format is more verbose, and is\n * only used during runtime (not for serialization/storage)\n * @param {Array} styles the serialized form of a text object's styles\n * @param {String} text the text string that the styles are applied to\n * @return {Object}\n */\nexport const stylesFromArray = (\n  styles: TextStyleArray | TextStyle,\n  text: string,\n): TextStyle => {\n  if (!Array.isArray(styles)) {\n    // clone to prevent mutation\n    return cloneStyles(styles);\n  }\n  const textLines = text.split(reNewline),\n    stylesObject: TextStyle = {};\n  let charIndex = -1,\n    styleIndex = 0;\n  //loop through each textLine\n  for (let i = 0; i < textLines.length; i++) {\n    const chars = graphemeSplit(textLines[i]);\n\n    //loop through each character of the current line\n    for (let c = 0; c < chars.length; c++) {\n      charIndex++;\n      //check if there's a style collection that includes the current character\n      if (\n        styles[styleIndex] &&\n        styles[styleIndex].start <= charIndex &&\n        charIndex < styles[styleIndex].end\n      ) {\n        //create object for line index if it doesn't exist\n        stylesObject[i] = stylesObject[i] || {};\n        //assign a style at this character's index\n        stylesObject[i][c] = { ...styles[styleIndex].style };\n        //if character is at the end of the current style collection, move to the next\n        if (charIndex === styles[styleIndex].end - 1) {\n          styleIndex++;\n        }\n      }\n    }\n  }\n  return stylesObject;\n};\n", "import { FILL, STROKE } from '../constants';\n\n/**\n * Attributes parsed from all SVG elements\n * @type array\n */\nexport const SHARED_ATTRIBUTES = [\n  'display',\n  'transform',\n  FILL,\n  'fill-opacity',\n  'fill-rule',\n  'opacity',\n  STROKE,\n  'stroke-dasharray',\n  'stroke-linecap',\n  'stroke-dashoffset',\n  'stroke-linejoin',\n  'stroke-miterlimit',\n  'stroke-opacity',\n  'stroke-width',\n  'id',\n  'paint-order',\n  'vector-effect',\n  'instantiated_by_use',\n  'clip-path',\n];\n", "export function selectorMatches(element: HTMLElement, selector: string) {\n  const nodeName = element.nodeName;\n  const classNames = element.getAttribute('class');\n  const id = element.getAttribute('id');\n  const azAz = '(?![a-zA-Z\\\\-]+)';\n  let matcher;\n  // i check if a selector matches slicing away part from it.\n  // if i get empty string i should match\n  matcher = new RegExp('^' + nodeName, 'i');\n  selector = selector.replace(matcher, '');\n  if (id && selector.length) {\n    matcher = new RegExp('#' + id + azAz, 'i');\n    selector = selector.replace(matcher, '');\n  }\n  if (classNames && selector.length) {\n    const splitClassNames = classNames.split(' ');\n    for (let i = splitClassNames.length; i--; ) {\n      matcher = new RegExp('\\\\.' + splitClassNames[i] + azAz, 'i');\n      selector = selector.replace(matcher, '');\n    }\n  }\n  return selector.length === 0;\n}\n", "import { selectorMatches } from './selectorMatches';\nimport { doesSomeParentMatch } from './doesSomeParentMatch';\n\n/**\n * @private\n */\n\nexport function elementMatchesRule(element: HTMLElement, selectors: string[]) {\n  let parentMatching = true;\n  // start from rightmost selector.\n  const firstMatching = selectorMatches(element, selectors.pop()!);\n  if (firstMatching && selectors.length) {\n    parentMatching = doesSomeParentMatch(element, selectors);\n  }\n  return firstMatching && parentMatching && selectors.length === 0;\n}\n", "import { selectorMatches } from './selectorMatches';\n\nexport function doesSomeParentMatch(element: HTMLElement, selectors: string[]) {\n  let selector: string,\n    parentMatching = true;\n  while (\n    element.parentElement &&\n    element.parentElement.nodeType === 1 &&\n    selectors.length\n  ) {\n    if (parentMatching) {\n      selector = selectors.pop()!;\n    }\n    element = element.parentElement;\n    parentMatching = selectorMatches(element, selector!);\n  }\n  return selectors.length === 0;\n}\n", "import { attributesMap } from './constants';\n\nexport const normalizeAttr = (\n  attr: keyof typeof attributesMap | string,\n): string => attributesMap[attr as keyof typeof attributesMap] ?? attr;\n", "import { reNum } from '../../parser/constants';\n\nconst regex = new RegExp(`(${reNum})`, 'gi');\n\nexport const cleanupSvgAttribute = (attributeValue: string) =>\n  attributeValue\n    .replace(regex, ' $1 ')\n    // replace annoying commas and arbitrary whitespace with single spaces\n    .replace(/,/gi, ' ')\n    .replace(/\\s+/gi, ' ');\n", "import { ROTATE, SCALE, SKEW_X, SKEW_Y, iMatrix } from '../constants';\nimport { reNum } from './constants';\nimport type { TMat2D } from '../typedefs';\nimport { cleanupSvgAttribute } from '../util/internals/cleanupSvgAttribute';\nimport {\n  createRotateMatrix,\n  createScaleMatrix,\n  createSkewXMatrix,\n  createSkewYMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrixArray,\n} from '../util/misc/matrix';\n\n// == begin transform regexp\nconst p = `(${reNum})`;\nconst skewX = String.raw`(skewX)\\(${p}\\)`;\nconst skewY = String.raw`(skewY)\\(${p}\\)`;\nconst rotate = String.raw`(rotate)\\(${p}(?: ${p} ${p})?\\)`;\nconst scale = String.raw`(scale)\\(${p}(?: ${p})?\\)`;\nconst translate = String.raw`(translate)\\(${p}(?: ${p})?\\)`;\nconst matrix = String.raw`(matrix)\\(${p} ${p} ${p} ${p} ${p} ${p}\\)`;\nconst transform = `(?:${matrix}|${translate}|${rotate}|${scale}|${skewX}|${skewY})`;\nconst transforms = `(?:${transform}*)`;\nconst transformList = String.raw`^\\s*(?:${transforms}?)\\s*$`;\n// http://www.w3.org/TR/SVG/coords.html#TransformAttribute\nconst reTransformList = new RegExp(transformList);\nconst reTransform = new RegExp(transform);\nconst reTransformAll = new RegExp(transform, 'g');\n// == end transform regexp\n\n/**\n * Parses \"transform\" attribute, returning an array of values\n * @static\n * @function\n * @memberOf fabric\n * @param {String} attributeValue String containing attribute value\n * @return {TTransformMatrix} Array of 6 elements representing transformation matrix\n */\nexport function parseTransformAttribute(attributeValue: string): TMat2D {\n  // first we clean the string\n  attributeValue = cleanupSvgAttribute(attributeValue)\n    // remove spaces around front parentheses\n    .replace(/\\s*([()])\\s*/gi, '$1');\n\n  // start with identity matrix\n  const matrices: TMat2D[] = [];\n\n  // return if no argument was given or\n  // an argument does not match transform attribute regexp\n  if (\n    !attributeValue ||\n    (attributeValue && !reTransformList.test(attributeValue))\n  ) {\n    return [...iMatrix];\n  }\n\n  for (const match of attributeValue.matchAll(reTransformAll)) {\n    const transformMatch = reTransform.exec(match[0]);\n    if (!transformMatch) {\n      continue;\n    }\n    let matrix: TMat2D = iMatrix;\n    const matchedParams = transformMatch.filter((m) => !!m);\n    const [, operation, ...rawArgs] = matchedParams;\n    const [arg0, arg1, arg2, arg3, arg4, arg5] = rawArgs.map((arg) =>\n      parseFloat(arg),\n    );\n\n    switch (operation) {\n      case 'translate':\n        matrix = createTranslateMatrix(arg0, arg1);\n        break;\n      case ROTATE:\n        matrix = createRotateMatrix({ angle: arg0 }, { x: arg1, y: arg2 });\n        break;\n      case SCALE:\n        matrix = createScaleMatrix(arg0, arg1);\n        break;\n      case SKEW_X:\n        matrix = createSkewXMatrix(arg0);\n        break;\n      case SKEW_Y:\n        matrix = createSkewYMatrix(arg0);\n        break;\n      case 'matrix':\n        matrix = [arg0, arg1, arg2, arg3, arg4, arg5];\n        break;\n    }\n\n    // snapshot current matrix into matrices array\n    matrices.push(matrix);\n  }\n\n  return multiplyTransformMatrixArray(matrices);\n}\n", "import { multiplyTransformMatrices } from '../util/misc/matrix';\nimport { parseUnit } from '../util/misc/svgParsing';\nimport { parseTransformAttribute } from './parseTransformAttribute';\nimport { CENTER, LEFT, RIGHT, NONE, FILL, STROKE } from '../constants';\n\nexport function normalizeValue(\n  attr: string,\n  value: any,\n  parentAttributes: Record<string, any>,\n  fontSize: number,\n): string | null | boolean | number[] | number {\n  const isArray = Array.isArray(value);\n  let parsed: number | number[];\n  let ouputValue: string | null | boolean | number[] | number = value;\n  if ((attr === FILL || attr === STROKE) && value === NONE) {\n    ouputValue = '';\n  } else if (attr === 'strokeUniform') {\n    return value === 'non-scaling-stroke';\n  } else if (attr === 'strokeDashArray') {\n    if (value === NONE) {\n      ouputValue = null;\n    } else {\n      ouputValue = value.replace(/,/g, ' ').split(/\\s+/).map(parseFloat);\n    }\n  } else if (attr === 'transformMatrix') {\n    if (parentAttributes && parentAttributes.transformMatrix) {\n      ouputValue = multiplyTransformMatrices(\n        parentAttributes.transformMatrix,\n        parseTransformAttribute(value),\n      );\n    } else {\n      ouputValue = parseTransformAttribute(value);\n    }\n  } else if (attr === 'visible') {\n    ouputValue = value !== NONE && value !== 'hidden';\n    // display=none on parent element always takes precedence over child element\n    if (parentAttributes && parentAttributes.visible === false) {\n      ouputValue = false;\n    }\n  } else if (attr === 'opacity') {\n    ouputValue = parseFloat(value);\n    if (parentAttributes && typeof parentAttributes.opacity !== 'undefined') {\n      ouputValue *= parentAttributes.opacity as number;\n    }\n  } else if (attr === 'textAnchor' /* text-anchor */) {\n    ouputValue = value === 'start' ? LEFT : value === 'end' ? RIGHT : CENTER;\n  } else if (attr === 'charSpacing') {\n    // parseUnit returns px and we convert it to em\n    parsed = (parseUnit(value, fontSize) / fontSize) * 1000;\n  } else if (attr === 'paintFirst') {\n    const fillIndex = value.indexOf(FILL);\n    const strokeIndex = value.indexOf(STROKE);\n    ouputValue = FILL;\n    if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {\n      ouputValue = STROKE;\n    } else if (fillIndex === -1 && strokeIndex > -1) {\n      ouputValue = STROKE;\n    }\n  } else if (\n    attr === 'href' ||\n    attr === 'xlink:href' ||\n    attr === 'font' ||\n    attr === 'id'\n  ) {\n    return value;\n  } else if (attr === 'imageSmoothing') {\n    return value === 'optimizeQuality';\n  } else {\n    parsed = isArray\n      ? (value as string[]).map(parseUnit)\n      : parseUnit(value, fontSize);\n  }\n\n  return !isArray && isNaN(parsed! as number) ? ouputValue : parsed!;\n}\n", "import { parseUnit } from '../util/misc/svgParsing';\nimport { reFontDeclaration } from './constants';\n\n/**\n * Parses a short font declaration, building adding its properties to a style object\n * @static\n * @function\n * @memberOf fabric\n * @param {String} value font declaration\n * @param {Object} oStyle definition\n */\nexport function parseFontDeclaration(\n  value: string,\n  oStyle: Record<string, any>,\n): void {\n  const match = value.match(reFontDeclaration);\n\n  if (!match) {\n    return;\n  }\n  const fontStyle = match[1],\n    // font variant is not used\n    // fontVariant = match[2],\n    fontWeight = match[3],\n    fontSize = match[4],\n    lineHeight = match[5],\n    fontFamily = match[6];\n\n  if (fontStyle) {\n    oStyle.fontStyle = fontStyle;\n  }\n  if (fontWeight) {\n    oStyle.fontWeight = isNaN(parseFloat(fontWeight))\n      ? fontWeight\n      : parseFloat(fontWeight);\n  }\n  if (fontSize) {\n    oStyle.fontSize = parseUnit(fontSize);\n  }\n  if (fontFamily) {\n    oStyle.fontFamily = fontFamily;\n  }\n  if (lineHeight) {\n    oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\n  }\n}\n", "/**\n * Takes a style string and parses it in one that has only defined values\n * and lowercases properties\n * @param style\n * @param oStyle\n */\nexport function parseStyleString(\n  style: string,\n  oStyle: Record<string, any>,\n): void {\n  style\n    .replace(/;\\s*$/, '')\n    .split(';')\n    .forEach((chunk) => {\n      if (!chunk) return;\n      const [attr, value] = chunk.split(':');\n      oStyle[attr.trim().toLowerCase()] = value.trim();\n    });\n}\n", "import { parseStyleObject } from './parseStyleObject';\nimport { parseStyleString } from './parseStyleString';\n\n/**\n * Parses \"style\" attribute, retuning an object with values\n * @static\n * @memberOf fabric\n * @param {SVGElement} element Element to parse\n * @return {Object} Objects with values parsed from style attribute of an element\n */\nexport function parseStyleAttribute(element: HTMLElement): Record<string, any> {\n  const oStyle: Record<string, any> = {},\n    style = element.getAttribute('style');\n\n  if (!style) {\n    return oStyle;\n  }\n\n  if (typeof style === 'string') {\n    parseStyleString(style, oStyle);\n  } else {\n    parseStyleObject(style, oStyle);\n  }\n\n  return oStyle;\n}\n", "/**\n * Takes a style object and parses it in one that has only defined values\n * and lowercases properties\n * @param style\n * @param oStyle\n */\nexport function parseStyleObject(\n  style: Record<string, any>,\n  oStyle: Record<string, any>,\n): void {\n  Object.entries(style).forEach(([prop, value]) => {\n    if (value === undefined) {\n      return;\n    }\n    oStyle[prop.toLowerCase()] = value;\n  });\n}\n", "import { Color } from '../color/Color';\nimport { toFixed } from '../util/misc/toFixed';\nimport { FabricObject } from '../shapes/Object/FabricObject';\n\nconst colorAttributesMap = {\n  stroke: 'strokeOpacity',\n  fill: 'fillOpacity',\n};\n\n/**\n * @private\n * @param {Object} attributes Array of attributes to parse\n */\n\nexport function setStrokeFillOpacity(\n  attributes: Record<string, any>,\n): Record<string, any> {\n  const defaults = FabricObject.getDefaults();\n  Object.entries(colorAttributesMap).forEach(([attr, colorAttr]) => {\n    if (\n      typeof attributes[colorAttr] === 'undefined' ||\n      attributes[attr] === ''\n    ) {\n      return;\n    }\n    if (typeof attributes[attr] === 'undefined') {\n      if (!defaults[attr]) {\n        return;\n      }\n      attributes[attr] = defaults[attr];\n    }\n    if (attributes[attr].indexOf('url(') === 0) {\n      return;\n    }\n    const color = new Color(attributes[attr]);\n    attributes[attr] = color\n      .setAlpha(toFixed(color.getAlpha() * attributes[colorAttr], 2))\n      .toRgba();\n  });\n  return attributes;\n}\n", "import { DEFAULT_SVG_FONT_SIZE } from '../constants';\nimport { parseUnit } from '../util/misc/svgParsing';\nimport { cPath, fSize, svgValidParentsRegEx } from './constants';\nimport { getGlobalStylesForElement } from './getGlobalStylesForElement';\nimport { normalizeAttr } from './normalizeAttr';\nimport { normalizeValue } from './normalizeValue';\nimport { parseFontDeclaration } from './parseFontDeclaration';\nimport { parseStyleAttribute } from './parseStyleAttribute';\nimport { setStrokeFillOpacity } from './setStrokeFillOpacity';\nimport type { CSSRules } from './typedefs';\n\n/**\n * Returns an object of attributes' name/value, given element and an array of attribute names;\n * Parses parent \"g\" nodes recursively upwards.\n * @param {SVGElement | HTMLElement} element Element to parse\n * @param {Array} attributes Array of attributes to parse\n * @return {Object} object containing parsed attributes' names/values\n */\nexport function parseAttributes(\n  element: HTMLElement | null,\n  attributes: string[],\n  cssRules?: CSSRules,\n): Record<string, any> {\n  if (!element) {\n    return {};\n  }\n\n  let parentAttributes: Record<string, string> = {},\n    fontSize: number,\n    parentFontSize = DEFAULT_SVG_FONT_SIZE;\n\n  // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\n  if (\n    element.parentNode &&\n    svgValidParentsRegEx.test(element.parentNode.nodeName)\n  ) {\n    parentAttributes = parseAttributes(\n      element.parentElement,\n      attributes,\n      cssRules,\n    );\n    if (parentAttributes.fontSize) {\n      fontSize = parentFontSize = parseUnit(parentAttributes.fontSize);\n    }\n  }\n\n  const ownAttributes: Record<string, string> = {\n    ...attributes.reduce<Record<string, string>>((memo, attr) => {\n      const value = element.getAttribute(attr);\n      if (value) {\n        memo[attr] = value;\n      }\n      return memo;\n    }, {}),\n    // add values parsed from style, which take precedence over attributes\n    // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\n    ...getGlobalStylesForElement(element, cssRules),\n    ...parseStyleAttribute(element),\n  };\n\n  if (ownAttributes[cPath]) {\n    element.setAttribute(cPath, ownAttributes[cPath]);\n  }\n  if (ownAttributes[fSize]) {\n    // looks like the minimum should be 9px when dealing with ems. this is what looks like in browsers.\n    fontSize = parseUnit(ownAttributes[fSize], parentFontSize);\n    ownAttributes[fSize] = `${fontSize}`;\n  }\n\n  // this should have its own complex type\n  const normalizedStyle: Record<\n    string,\n    string | boolean | number | number[] | null\n  > = {};\n  for (const attr in ownAttributes) {\n    const normalizedAttr = normalizeAttr(attr);\n    const normalizedValue = normalizeValue(\n      normalizedAttr,\n      ownAttributes[attr],\n      parentAttributes,\n      fontSize!,\n    );\n    normalizedStyle[normalizedAttr] = normalizedValue;\n  }\n  if (normalizedStyle && normalizedStyle.font) {\n    parseFontDeclaration(normalizedStyle.font as string, normalizedStyle);\n  }\n  const mergedAttrs = { ...parentAttributes, ...normalizedStyle };\n  return svgValidParentsRegEx.test(element.nodeName)\n    ? mergedAttrs\n    : setStrokeFillOpacity(mergedAttrs);\n}\n", "import { elementMatchesRule } from './elementMatchesRule';\nimport type { CSSRules } from './typedefs';\n\n/**\n * @private\n */\n\nexport function getGlobalStylesForElement(\n  element: HTMLElement,\n  cssRules: CSSRules = {},\n) {\n  let styles: Record<string, string> = {};\n  for (const rule in cssRules) {\n    if (elementMatchesRule(element, rule.split(' '))) {\n      styles = {\n        ...styles,\n        ...cssRules[rule],\n      };\n    }\n  }\n  return styles;\n}\n", "import { kRect } from '../constants';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const rectDefaultValues: Partial<TClassProperties<Rect>> = {\n  rx: 0,\n  ry: 0,\n};\n\ninterface UniqueRectProps {\n  rx: number;\n  ry: number;\n}\n\nexport interface SerializedRectProps\n  extends SerializedObjectProps,\n    UniqueRectProps {}\n\nexport interface RectProps extends FabricObjectProps, UniqueRectProps {}\n\nconst RECT_PROPS = ['rx', 'ry'] as const;\n\nexport class Rect<\n    Props extends TOptions<RectProps> = Partial<RectProps>,\n    SProps extends SerializedRectProps = SerializedRectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements RectProps\n{\n  /**\n   * Horizontal border radius\n   * @type Number\n   * @default\n   */\n  declare rx: number;\n\n  /**\n   * Vertical border radius\n   * @type Number\n   * @default\n   */\n  declare ry: number;\n\n  static type = 'Rect';\n\n  static cacheProperties = [...cacheProperties, ...RECT_PROPS];\n\n  static ownDefaults = rectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Rect.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Rect.ownDefaults);\n    this.setOptions(options);\n    this._initRxRy();\n  }\n  /**\n   * Initializes rx/ry attributes\n   * @private\n   */\n  _initRxRy() {\n    const { rx, ry } = this;\n    if (rx && !ry) {\n      this.ry = rx;\n    } else if (ry && !rx) {\n      this.rx = ry;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const { width: w, height: h } = this;\n    const x = -w / 2;\n    const y = -h / 2;\n    const rx = this.rx ? Math.min(this.rx, w / 2) : 0;\n    const ry = this.ry ? Math.min(this.ry, h / 2) : 0;\n    const isRounded = rx !== 0 || ry !== 0;\n\n    ctx.beginPath();\n\n    ctx.moveTo(x + rx, y);\n\n    ctx.lineTo(x + w - rx, y);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + w - kRect * rx,\n        y,\n        x + w,\n        y + kRect * ry,\n        x + w,\n        y + ry,\n      );\n\n    ctx.lineTo(x + w, y + h - ry);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + w,\n        y + h - kRect * ry,\n        x + w - kRect * rx,\n        y + h,\n        x + w - rx,\n        y + h,\n      );\n\n    ctx.lineTo(x + rx, y + h);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + kRect * rx,\n        y + h,\n        x,\n        y + h - kRect * ry,\n        x,\n        y + h - ry,\n      );\n\n    ctx.lineTo(x, y + ry);\n    isRounded &&\n      ctx.bezierCurveTo(x, y + kRect * ry, x + kRect * rx, y, x + rx, y);\n\n    ctx.closePath();\n\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...RECT_PROPS, ...propertiesToInclude]);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const { width, height, rx, ry } = this;\n    return [\n      '<rect ',\n      'COMMON_PARTS',\n      `x=\"${-width / 2}\" y=\"${\n        -height / 2\n      }\" rx=\"${rx}\" ry=\"${ry}\" width=\"${width}\" height=\"${height}\" />\\n`,\n    ];\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `Rect.fromElement`)\n   * @static\n   * @memberOf Rect\n   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'rx',\n    'ry',\n    'width',\n    'height',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * Returns {@link Rect} instance from an SVG element\n   * @static\n   * @memberOf Rect\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const {\n      left = 0,\n      top = 0,\n      width = 0,\n      height = 0,\n      visible = true,\n      ...restOfparsedAttributes\n    } = parseAttributes(element, this.ATTRIBUTE_NAMES, cssRules);\n\n    return new this({\n      ...options,\n      ...restOfparsedAttributes,\n      left,\n      top,\n      width,\n      height,\n      visible: Boolean(visible && width && height),\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Rect);\nclassRegistry.setSVGClass(Rect);\n", "export const LAYOUT_TYPE_INITIALIZATION = 'initialization';\nexport const LAYOUT_TYPE_ADDED = 'added';\nexport const LAYOUT_TYPE_REMOVED = 'removed';\nexport const LAYOUT_TYPE_IMPERATIVE = 'imperative';\nexport const LAYOUT_TYPE_OBJECT_MODIFIED = 'object_modified';\nexport const LAYOUT_TYPE_OBJECT_MODIFYING = 'object_modifying';\n", "import { Point, ZERO } from '../../Point';\nimport type { Group } from '../../shapes/Group';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { multiplyTransformMatrixArray } from '../../util/misc/matrix';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport {\n  calcPlaneChangeMatrix,\n  sendVectorToPlane,\n} from '../../util/misc/planeChange';\n\n/**\n * @returns 2 points, the tl and br corners of the non rotated bounding box of an object\n * in the {@link group} plane, taking into account objects that {@link group} is their parent\n * but also belong to the active selection.\n */\nexport const getObjectBounds = (\n  destinationGroup: Group,\n  object: FabricObject,\n): Point[] => {\n  const {\n    strokeUniform,\n    strokeWidth,\n    width,\n    height,\n    group: currentGroup,\n  } = object;\n  const t =\n    currentGroup && currentGroup !== destinationGroup\n      ? calcPlaneChangeMatrix(\n          currentGroup.calcTransformMatrix(),\n          destinationGroup.calcTransformMatrix(),\n        )\n      : null;\n  const objectCenter = t\n    ? object.getRelativeCenterPoint().transform(t)\n    : object.getRelativeCenterPoint();\n  const accountForStroke = !object['isStrokeAccountedForInDimensions']();\n  const strokeUniformVector =\n    strokeUniform && accountForStroke\n      ? sendVectorToPlane(\n          new Point(strokeWidth, strokeWidth),\n          undefined,\n          destinationGroup.calcTransformMatrix(),\n        )\n      : ZERO;\n  const scalingStrokeWidth =\n    !strokeUniform && accountForStroke ? strokeWidth : 0;\n  const sizeVector = sizeAfterTransform(\n    width + scalingStrokeWidth,\n    height + scalingStrokeWidth,\n    multiplyTransformMatrixArray([t, object.calcOwnMatrix()], true),\n  )\n    .add(strokeUniformVector)\n    .scalarDivide(2);\n  return [objectCenter.subtract(sizeVector), objectCenter.add(sizeVector)];\n};\n", "import { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport {\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_IMPERATIVE,\n} from '../constants';\nimport type {\n  InitializationLayoutContext,\n  LayoutStrategyResult,\n  StrictLayoutContext,\n} from '../types';\nimport { getObjectBounds } from './utils';\n\n/**\n * Exposes a main public method {@link calcLayoutResult} that is used by the `LayoutManager` to perform layout.\n * Returning `undefined` signals the `LayoutManager` to skip the layout.\n *\n * In charge of calculating the bounding box of the passed objects.\n */\nexport abstract class LayoutStrategy {\n  /**\n   * override by subclass for persistence (TS does not support `static abstract`)\n   */\n  static type = 'strategy';\n\n  /**\n   * Used by the `LayoutManager` to perform layout\n   * @TODO/fix: if this method is calcResult, should calc unconditionally.\n   * the condition to not calc should be evaluated by the layoutManager.\n   * @returns layout result **OR** `undefined` to skip layout\n   */\n  public calcLayoutResult(\n    context: StrictLayoutContext,\n    objects: FabricObject[],\n  ): LayoutStrategyResult | undefined {\n    if (this.shouldPerformLayout(context)) {\n      return this.calcBoundingBox(objects, context);\n    }\n  }\n\n  shouldPerformLayout({ type, prevStrategy, strategy }: StrictLayoutContext) {\n    return (\n      type === LAYOUT_TYPE_INITIALIZATION ||\n      type === LAYOUT_TYPE_IMPERATIVE ||\n      (!!prevStrategy && strategy !== prevStrategy)\n    );\n  }\n\n  shouldLayoutClipPath({ type, target: { clipPath } }: StrictLayoutContext) {\n    return (\n      type !== LAYOUT_TYPE_INITIALIZATION &&\n      clipPath &&\n      !clipPath.absolutePositioned\n    );\n  }\n\n  getInitialSize(\n    context: StrictLayoutContext & InitializationLayoutContext,\n    result: Pick<LayoutStrategyResult, 'center' | 'size'>,\n  ) {\n    return result.size;\n  }\n\n  /**\n   * Override this method to customize layout.\n   */\n  calcBoundingBox(\n    objects: FabricObject[],\n    context: StrictLayoutContext,\n  ): LayoutStrategyResult | undefined {\n    const { type, target } = context;\n    if (type === LAYOUT_TYPE_IMPERATIVE && context.overrides) {\n      return context.overrides;\n    }\n    if (objects.length === 0) {\n      return;\n    }\n    const { left, top, width, height } = makeBoundingBoxFromPoints(\n      objects\n        .map((object) => getObjectBounds(target, object))\n        .reduce<Point[]>((coords, curr) => coords.concat(curr), []),\n    );\n    const bboxSize = new Point(width, height);\n    const bboxLeftTop = new Point(left, top);\n    const bboxCenter = bboxLeftTop.add(bboxSize.scalarDivide(2));\n\n    if (type === LAYOUT_TYPE_INITIALIZATION) {\n      const actualSize = this.getInitialSize(context, {\n        size: bboxSize,\n        center: bboxCenter,\n      });\n      return {\n        // in `initialization` we do not account for target's transformation matrix\n        center: bboxCenter,\n        // TODO: investigate if this is still necessary\n        relativeCorrection: new Point(0, 0),\n        size: actualSize,\n      };\n    } else {\n      //  we send `relativeCenter` up to group's containing plane\n      const center = bboxCenter.transform(target.calcOwnMatrix());\n      return {\n        center,\n        size: bboxSize,\n      };\n    }\n  }\n}\n", "import type { StrictLayoutContext } from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will adjust the bounding box to fit target's objects.\n */\nexport class FitContentLayout extends LayoutStrategy {\n  static readonly type = 'fit-content';\n\n  /**\n   * @override layout on all triggers\n   * Override at will\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldPerformLayout(context: StrictLayoutContext) {\n    return true;\n  }\n}\n\nclassRegistry.setClass(FitContentLayout);\n", "import { Point } from '../Point';\nimport {\n  CENTER,\n  CHANGED,\n  MODIFIED,\n  MODIFY_PATH,\n  MODIFY_POLY,\n  MOVING,\n  RESIZING,\n  ROTATING,\n  SCALING,\n  SKEWING,\n  iMatrix,\n} from '../constants';\nimport type { Group } from '../shapes/Group';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { invertTransform } from '../util/misc/matrix';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { FitContentLayout } from './LayoutStrategies/FitContentLayout';\nimport type { LayoutStrategy } from './LayoutStrategies/LayoutStrategy';\nimport {\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_REMOVED,\n  LAYOUT_TYPE_IMPERATIVE,\n  LAYOUT_TYPE_OBJECT_MODIFIED,\n  LAYOUT_TYPE_OBJECT_MODIFYING,\n} from './constants';\nimport type {\n  LayoutContext,\n  LayoutResult,\n  RegistrationContext,\n  StrictLayoutContext,\n} from './types';\nimport { classRegistry } from '../ClassRegistry';\nimport type { TModificationEvents } from '../EventTypeDefs';\n\nconst LAYOUT_MANAGER = 'layoutManager';\n\nexport type SerializedLayoutManager = {\n  type: string;\n  strategy: string;\n};\n\nexport class LayoutManager {\n  private declare _prevLayoutStrategy?: LayoutStrategy;\n  protected declare _subscriptions: Map<FabricObject, VoidFunction[]>;\n\n  strategy: LayoutStrategy;\n\n  constructor(strategy: LayoutStrategy = new FitContentLayout()) {\n    this.strategy = strategy;\n    this._subscriptions = new Map();\n  }\n\n  public performLayout(context: LayoutContext) {\n    const strictContext: StrictLayoutContext = {\n      bubbles: true,\n      strategy: this.strategy,\n      ...context,\n      prevStrategy: this._prevLayoutStrategy,\n      stopPropagation() {\n        this.bubbles = false;\n      },\n    };\n\n    this.onBeforeLayout(strictContext);\n\n    const layoutResult = this.getLayoutResult(strictContext);\n    if (layoutResult) {\n      this.commitLayout(strictContext, layoutResult);\n    }\n\n    this.onAfterLayout(strictContext, layoutResult);\n    this._prevLayoutStrategy = strictContext.strategy;\n  }\n\n  /**\n   * Attach handlers for events that we know will invalidate the layout when\n   * performed on child objects ( general transforms ).\n   * Returns the disposers for later unsubscribing and cleanup\n   * @param {FabricObject} object\n   * @param {RegistrationContext & Partial<StrictLayoutContext>} context\n   * @returns {VoidFunction[]} disposers remove the handlers\n   */\n  protected attachHandlers(\n    object: FabricObject,\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): VoidFunction[] {\n    const { target } = context;\n    return (\n      [\n        MODIFIED,\n        MOVING,\n        RESIZING,\n        ROTATING,\n        SCALING,\n        SKEWING,\n        CHANGED,\n        MODIFY_POLY,\n        MODIFY_PATH,\n      ] as (TModificationEvents & 'modified')[]\n    ).map((key) =>\n      object.on(key, (e) =>\n        this.performLayout(\n          key === MODIFIED\n            ? {\n                type: LAYOUT_TYPE_OBJECT_MODIFIED,\n                trigger: key,\n                e,\n                target,\n              }\n            : {\n                type: LAYOUT_TYPE_OBJECT_MODIFYING,\n                trigger: key,\n                e,\n                target,\n              },\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Subscribe an object to transform events that will trigger a layout change on the parent\n   * This is important only for interactive groups.\n   * @param object\n   * @param context\n   */\n  protected subscribe(\n    object: FabricObject,\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    this.unsubscribe(object, context);\n    const disposers = this.attachHandlers(object, context);\n    this._subscriptions.set(object, disposers);\n  }\n\n  /**\n   * unsubscribe object layout triggers\n   */\n  protected unsubscribe(\n    object: FabricObject,\n    _context?: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    (this._subscriptions.get(object) || []).forEach((d) => d());\n    this._subscriptions.delete(object);\n  }\n\n  unsubscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    context.targets.forEach((object) => this.unsubscribe(object, context));\n  }\n\n  subscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    context.targets.forEach((object) => this.subscribe(object, context));\n  }\n\n  protected onBeforeLayout(context: StrictLayoutContext) {\n    const { target, type } = context;\n    const { canvas } = target;\n    // handle layout triggers subscription\n    // @TODO: gate the registration when the group is interactive\n    if (type === LAYOUT_TYPE_INITIALIZATION || type === LAYOUT_TYPE_ADDED) {\n      this.subscribeTargets(context);\n    } else if (type === LAYOUT_TYPE_REMOVED) {\n      this.unsubscribeTargets(context);\n    }\n    // fire layout event (event will fire only for layouts after initialization layout)\n    target.fire('layout:before', {\n      context,\n    });\n    canvas &&\n      canvas.fire('object:layout:before', {\n        target,\n        context,\n      });\n\n    if (type === LAYOUT_TYPE_IMPERATIVE && context.deep) {\n      const { strategy: _, ...tricklingContext } = context;\n      // traverse the tree\n      target.forEachObject(\n        (object) =>\n          (object as Group).layoutManager &&\n          (object as Group).layoutManager.performLayout({\n            ...tricklingContext,\n            bubbles: false,\n            target: object as Group,\n          }),\n      );\n    }\n  }\n\n  protected getLayoutResult(\n    context: StrictLayoutContext,\n  ): Required<LayoutResult> | undefined {\n    const { target, strategy, type } = context;\n\n    const result = strategy.calcLayoutResult(context, target.getObjects());\n\n    if (!result) {\n      return;\n    }\n\n    const prevCenter =\n      type === LAYOUT_TYPE_INITIALIZATION\n        ? new Point()\n        : target.getRelativeCenterPoint();\n\n    const {\n      center: nextCenter,\n      correction = new Point(),\n      relativeCorrection = new Point(),\n    } = result;\n    const offset = prevCenter\n      .subtract(nextCenter)\n      .add(correction)\n      .transform(\n        // in `initialization` we do not account for target's transformation matrix\n        type === LAYOUT_TYPE_INITIALIZATION\n          ? iMatrix\n          : invertTransform(target.calcOwnMatrix()),\n        true,\n      )\n      .add(relativeCorrection);\n\n    return {\n      result,\n      prevCenter,\n      nextCenter,\n      offset,\n    };\n  }\n\n  protected commitLayout(\n    context: StrictLayoutContext,\n    layoutResult: Required<LayoutResult>,\n  ) {\n    const { target } = context;\n    const {\n      result: { size },\n      nextCenter,\n    } = layoutResult;\n    // set dimensions\n    target.set({ width: size.x, height: size.y });\n    // layout descendants\n    this.layoutObjects(context, layoutResult);\n    //  set position\n    // in `initialization` we do not account for target's transformation matrix\n    if (context.type === LAYOUT_TYPE_INITIALIZATION) {\n      // TODO: what about strokeWidth?\n      target.set({\n        left:\n          context.x ?? nextCenter.x + size.x * resolveOrigin(target.originX),\n        top: context.y ?? nextCenter.y + size.y * resolveOrigin(target.originY),\n      });\n    } else {\n      target.setPositionByOrigin(nextCenter, CENTER, CENTER);\n      // invalidate\n      target.setCoords();\n      target.set('dirty', true);\n    }\n  }\n\n  protected layoutObjects(\n    context: StrictLayoutContext,\n    layoutResult: Required<LayoutResult>,\n  ) {\n    const { target } = context;\n    //  adjust objects to account for new center\n    target.forEachObject((object) => {\n      object.group === target &&\n        this.layoutObject(context, layoutResult, object);\n    });\n    // adjust clip path to account for new center\n    context.strategy.shouldLayoutClipPath(context) &&\n      this.layoutObject(context, layoutResult, target.clipPath as FabricObject);\n  }\n\n  /**\n   * @param {FabricObject} object\n   * @param {Point} offset\n   */\n  protected layoutObject(\n    context: StrictLayoutContext,\n    { offset }: Required<LayoutResult>,\n    object: FabricObject,\n  ) {\n    // TODO: this is here for cache invalidation.\n    // verify if this is necessary since we have explicit\n    // cache invalidation at the end of commitLayout\n    object.set({\n      left: object.left + offset.x,\n      top: object.top + offset.y,\n    });\n  }\n\n  protected onAfterLayout(\n    context: StrictLayoutContext,\n    layoutResult?: LayoutResult,\n  ) {\n    const {\n      target,\n      strategy,\n      bubbles,\n      prevStrategy: _,\n      ...bubblingContext\n    } = context;\n    const { canvas } = target;\n\n    //  fire layout event (event will fire only for layouts after initialization layout)\n    target.fire('layout:after', {\n      context,\n      result: layoutResult,\n    });\n    canvas &&\n      canvas.fire('object:layout:after', {\n        context,\n        result: layoutResult,\n        target,\n      });\n\n    //  bubble\n    const parent = target.parent;\n    if (bubbles && parent?.layoutManager) {\n      //  add target to context#path\n      (bubblingContext.path || (bubblingContext.path = [])).push(target);\n      //  all parents should invalidate their layout\n      parent.layoutManager.performLayout({\n        ...bubblingContext,\n        target: parent,\n      });\n    }\n    target.set('dirty', true);\n  }\n\n  dispose() {\n    const { _subscriptions } = this;\n    _subscriptions.forEach((disposers) => disposers.forEach((d) => d()));\n    _subscriptions.clear();\n  }\n\n  toObject() {\n    return {\n      type: LAYOUT_MANAGER,\n      strategy: (this.strategy.constructor as typeof LayoutStrategy).type,\n    };\n  }\n\n  toJSON() {\n    return this.toObject();\n  }\n}\n\nclassRegistry.setClass(LayoutManager, LAYOUT_MANAGER);\n", "import type { CollectionEvents, ObjectEvents } from '../EventTypeDefs';\nimport { createCollectionMixin } from '../Collection';\nimport type {\n  TClassProperties,\n  TSVGReviver,\n  TOptions,\n  Abortable,\n} from '../typedefs';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n} from '../util/misc/matrix';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n} from '../util/misc/objectEnlive';\nimport { applyTransformToObject } from '../util/misc/objectTransforms';\nimport { FabricObject } from './Object/FabricObject';\nimport { Rect } from './Rect';\nimport { classRegistry } from '../ClassRegistry';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport { log } from '../util/internals/console';\nimport type {\n  ImperativeLayoutOptions,\n  LayoutBeforeEvent,\n  LayoutAfterEvent,\n} from '../LayoutManager/types';\nimport { LayoutManager } from '../LayoutManager/LayoutManager';\nimport {\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_IMPERATIVE,\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_REMOVED,\n} from '../LayoutManager/constants';\nimport type { SerializedLayoutManager } from '../LayoutManager/LayoutManager';\nimport type { FitContentLayout } from '../LayoutManager';\nimport type { DrawContext } from './Object/Object';\n\n/**\n * This class handles the specific case of creating a group using {@link Group#fromObject} and is not meant to be used in any other case.\n * We could have used a boolean in the constructor, as we did previously, but we think the boolean\n * would stay in the group's constructor interface and create confusion, therefore it was removed.\n * This layout manager doesn't do anything and therefore keeps the exact layout the group had when {@link Group#toObject} was called.\n */\nclass NoopLayoutManager extends LayoutManager {\n  performLayout() {}\n}\n\nexport interface GroupEvents extends ObjectEvents, CollectionEvents {\n  'layout:before': LayoutBeforeEvent;\n  'layout:after': LayoutAfterEvent;\n}\n\nexport interface GroupOwnProps {\n  subTargetCheck: boolean;\n  interactive: boolean;\n}\n\nexport interface SerializedGroupProps\n  extends SerializedObjectProps,\n    GroupOwnProps {\n  objects: SerializedObjectProps[];\n  layoutManager: SerializedLayoutManager;\n}\n\nexport interface GroupProps extends FabricObjectProps, GroupOwnProps {\n  layoutManager: LayoutManager;\n}\n\nexport const groupDefaultValues: Partial<TClassProperties<Group>> = {\n  strokeWidth: 0,\n  subTargetCheck: false,\n  interactive: false,\n};\n\n/**\n * @fires object:added\n * @fires object:removed\n * @fires layout:before\n * @fires layout:after\n */\nexport class Group\n  extends createCollectionMixin(\n    FabricObject<GroupProps, SerializedGroupProps, GroupEvents>,\n  )\n  implements GroupProps\n{\n  /**\n   * Used to optimize performance\n   * set to `false` if you don't need contained objects to be targets of events\n   * @default\n   * @type boolean\n   */\n  declare subTargetCheck: boolean;\n\n  /**\n   * Used to allow targeting of object inside groups.\n   * set to true if you want to select an object inside a group.\\\n   * **REQUIRES** `subTargetCheck` set to true\n   * This will be not removed but slowly replaced with a method setInteractive\n   * that will take care of enabling subTargetCheck and necessary object events.\n   * There is too much attached to group interactivity to just be evaluated by a\n   * boolean in the code\n   * @default\n   * @deprecated\n   * @type boolean\n   */\n  declare interactive: boolean;\n\n  declare layoutManager: LayoutManager;\n\n  /**\n   * Used internally to optimize performance\n   * Once an object is selected, instance is rendered without the selected object.\n   * This way instance is cached only once for the entire interaction with the selected object.\n   * @private\n   */\n  protected _activeObjects: FabricObject[] = [];\n\n  static type = 'Group';\n\n  static ownDefaults: Record<string, any> = groupDefaultValues;\n  private __objectSelectionTracker: (ev: ObjectEvents['selected']) => void;\n  private __objectSelectionDisposer: (ev: ObjectEvents['deselected']) => void;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Group.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {FabricObject[]} [objects] instance objects\n   * @param {Object} [options] Options object\n   */\n  constructor(objects: FabricObject[] = [], options: Partial<GroupProps> = {}) {\n    super();\n    Object.assign(this, Group.ownDefaults);\n    this.setOptions(options);\n    this.groupInit(objects, options);\n  }\n\n  /**\n   * Shared code between group and active selection\n   * Meant to be used by the constructor.\n   */\n  protected groupInit(\n    objects: FabricObject[],\n    options: {\n      layoutManager?: LayoutManager;\n      top?: number;\n      left?: number;\n    },\n  ) {\n    this._objects = [...objects]; // Avoid unwanted mutations of Collection to affect the caller\n\n    this.__objectSelectionTracker = this.__objectSelectionMonitor.bind(\n      this,\n      true,\n    );\n    this.__objectSelectionDisposer = this.__objectSelectionMonitor.bind(\n      this,\n      false,\n    );\n\n    this.forEachObject((object) => {\n      this.enterGroup(object, false);\n    });\n\n    // perform initial layout\n    this.layoutManager = options.layoutManager ?? new LayoutManager();\n    this.layoutManager.performLayout({\n      type: LAYOUT_TYPE_INITIALIZATION,\n      target: this,\n      targets: [...objects],\n      // @TODO remove this concept from the layout manager.\n      // Layout manager will calculate the correct position,\n      // group options can override it later.\n      x: options.left,\n      y: options.top,\n    });\n  }\n\n  /**\n   * Checks if object can enter group and logs relevant warnings\n   * @private\n   * @param {FabricObject} object\n   * @returns\n   */\n  canEnterGroup(object: FabricObject) {\n    if (object === this || this.isDescendantOf(object)) {\n      //  prevent circular object tree\n      log(\n        'error',\n        'Group: circular object trees are not supported, this call has no effect',\n      );\n      return false;\n    } else if (this._objects.indexOf(object) !== -1) {\n      // is already in the objects array\n      log(\n        'error',\n        'Group: duplicate objects are not supported inside group, this call has no effect',\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Override this method to enhance performance (for groups with a lot of objects).\n   * If Overriding, be sure not pass illegal objects to group - it will break your app.\n   * @private\n   */\n  protected _filterObjectsBeforeEnteringGroup(objects: FabricObject[]) {\n    return objects.filter((object, index, array) => {\n      // can enter AND is the first occurrence of the object in the passed args (to prevent adding duplicates)\n      return this.canEnterGroup(object) && array.indexOf(object) === index;\n    });\n  }\n\n  /**\n   * Add objects\n   * @param {...FabricObject[]} objects\n   */\n  add(...objects: FabricObject[]) {\n    const allowedObjects = this._filterObjectsBeforeEnteringGroup(objects);\n    const size = super.add(...allowedObjects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_ADDED, allowedObjects);\n    return size;\n  }\n\n  /**\n   * Inserts an object into collection at specified index\n   * @param {FabricObject[]} objects Object to insert\n   * @param {Number} index Index to insert object at\n   */\n  insertAt(index: number, ...objects: FabricObject[]) {\n    const allowedObjects = this._filterObjectsBeforeEnteringGroup(objects);\n    const size = super.insertAt(index, ...allowedObjects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_ADDED, allowedObjects);\n    return size;\n  }\n\n  /**\n   * Remove objects\n   * @param {...FabricObject[]} objects\n   * @returns {FabricObject[]} removed objects\n   */\n  remove(...objects: FabricObject[]) {\n    const removed = super.remove(...objects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_REMOVED, removed);\n    return removed;\n  }\n\n  _onObjectAdded(object: FabricObject) {\n    this.enterGroup(object, true);\n    this.fire('object:added', { target: object });\n    object.fire('added', { target: this });\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  _onObjectRemoved(object: FabricObject, removeParentTransform?: boolean) {\n    this.exitGroup(object, removeParentTransform);\n    this.fire('object:removed', { target: object });\n    object.fire('removed', { target: this });\n  }\n\n  /**\n   * @private\n   * @param {'added'|'removed'} type\n   * @param {FabricObject[]} targets\n   */\n  _onAfterObjectsChange(type: 'added' | 'removed', targets: FabricObject[]) {\n    this.layoutManager.performLayout({\n      type,\n      targets,\n      target: this,\n    });\n  }\n\n  _onStackOrderChanged() {\n    this._set('dirty', true);\n  }\n\n  /**\n   * @private\n   * @param {string} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    const prev = this[key as keyof this];\n    super._set(key, value);\n    if (key === 'canvas' && prev !== value) {\n      (this._objects || []).forEach((object) => {\n        object._set(key, value);\n      });\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _shouldSetNestedCoords() {\n    return this.subTargetCheck;\n  }\n\n  /**\n   * Remove all objects\n   * @returns {FabricObject[]} removed objects\n   */\n  removeAll() {\n    this._activeObjects = [];\n    return this.remove(...this._objects);\n  }\n\n  /**\n   * keeps track of the selected objects\n   * @private\n   */\n  __objectSelectionMonitor<T extends boolean>(\n    selected: T,\n    {\n      target: object,\n    }: ObjectEvents[T extends true ? 'selected' : 'deselected'],\n  ) {\n    const activeObjects = this._activeObjects;\n    if (selected) {\n      activeObjects.push(object);\n      this._set('dirty', true);\n    } else if (activeObjects.length > 0) {\n      const index = activeObjects.indexOf(object);\n      if (index > -1) {\n        activeObjects.splice(index, 1);\n        this._set('dirty', true);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {boolean} watch\n   * @param {FabricObject} object\n   */\n  _watchObject(watch: boolean, object: FabricObject) {\n    //  make sure we listen only once\n    watch && this._watchObject(false, object);\n    if (watch) {\n      object.on('selected', this.__objectSelectionTracker);\n      object.on('deselected', this.__objectSelectionDisposer);\n    } else {\n      object.off('selected', this.__objectSelectionTracker);\n      object.off('deselected', this.__objectSelectionDisposer);\n    }\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    object.group && object.group.remove(object);\n    object._set('parent', this);\n    this._enterGroup(object, removeParentTransform);\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  _enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    if (removeParentTransform) {\n      // can this be converted to utils (sendObjectToPlane)?\n      applyTransformToObject(\n        object,\n        multiplyTransformMatrices(\n          invertTransform(this.calcTransformMatrix()),\n          object.calcTransformMatrix(),\n        ),\n      );\n    }\n    this._shouldSetNestedCoords() && object.setCoords();\n    object._set('group', this);\n    object._set('canvas', this.canvas);\n    this._watchObject(true, object);\n    const activeObject =\n      this.canvas &&\n      this.canvas.getActiveObject &&\n      this.canvas.getActiveObject();\n    // if we are adding the activeObject in a group\n    if (\n      activeObject &&\n      (activeObject === object || object.isDescendantOf(activeObject))\n    ) {\n      this._activeObjects.push(object);\n    }\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    this._exitGroup(object, removeParentTransform);\n    object._set('parent', undefined);\n    object._set('canvas', undefined);\n  }\n\n  /**\n   * Executes the inner fabric logic of exiting a group.\n   * - Stop watching the object\n   * - Remove the object from the optimization map this._activeObjects\n   * - unset the group property of the object\n   * @protected\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  _exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    object._set('group', undefined);\n    if (!removeParentTransform) {\n      applyTransformToObject(\n        object,\n        multiplyTransformMatrices(\n          this.calcTransformMatrix(),\n          object.calcTransformMatrix(),\n        ),\n      );\n      object.setCoords();\n    }\n    this._watchObject(false, object);\n    const index =\n      this._activeObjects.length > 0 ? this._activeObjects.indexOf(object) : -1;\n    if (index > -1) {\n      this._activeObjects.splice(index, 1);\n    }\n  }\n\n  /**\n   * Decide if the group should cache or not. Create its own cache level\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group is already cached.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    const ownCache = FabricObject.prototype.shouldCache.call(this);\n    if (ownCache) {\n      for (let i = 0; i < this._objects.length; i++) {\n        if (this._objects[i].willDrawShadow()) {\n          this.ownCaching = false;\n          return false;\n        }\n      }\n    }\n    return ownCache;\n  }\n\n  /**\n   * Check if this object or a child object will cast a shadow\n   * @return {Boolean}\n   */\n  willDrawShadow() {\n    if (super.willDrawShadow()) {\n      return true;\n    }\n    for (let i = 0; i < this._objects.length; i++) {\n      if (this._objects[i].willDrawShadow()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if instance or its group are caching, recursively up\n   * @return {Boolean}\n   */\n  isOnACache(): boolean {\n    return this.ownCaching || (!!this.parent && this.parent.isOnACache());\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawObject(\n    ctx: CanvasRenderingContext2D,\n    forClipping: boolean | undefined,\n    context: DrawContext,\n  ) {\n    this._renderBackground(ctx);\n    for (let i = 0; i < this._objects.length; i++) {\n      const obj = this._objects[i];\n      // TODO: handle rendering edge case somehow\n      if (this.canvas?.preserveObjectStacking && obj.group !== this) {\n        ctx.save();\n        ctx.transform(...invertTransform(this.calcTransformMatrix()));\n        obj.render(ctx);\n        ctx.restore();\n      } else if (obj.group === this) {\n        obj.render(ctx);\n      }\n    }\n    this._drawClipPath(ctx, this.clipPath, context);\n  }\n\n  /**\n   * @override\n   * @return {Boolean}\n   */\n  setCoords() {\n    super.setCoords();\n    this._shouldSetNestedCoords() &&\n      this.forEachObject((object) => object.setCoords());\n  }\n\n  triggerLayout(options: ImperativeLayoutOptions = {}) {\n    this.layoutManager.performLayout({\n      target: this,\n      type: LAYOUT_TYPE_IMPERATIVE,\n      ...options,\n    });\n  }\n\n  /**\n   * Renders instance on a given context\n   * @param {CanvasRenderingContext2D} ctx context to render instance on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    this._transformDone = true;\n    super.render(ctx);\n    this._transformDone = false;\n  }\n\n  /**\n   *\n   * @private\n   * @param {'toObject'|'toDatalessObject'} [method]\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {FabricObject[]} serialized objects\n   */\n  __serializeObjects(\n    method: 'toObject' | 'toDatalessObject',\n    propertiesToInclude?: string[],\n  ) {\n    const _includeDefaultValues = this.includeDefaultValues;\n    return this._objects\n      .filter(function (obj) {\n        return !obj.excludeFromExport;\n      })\n      .map(function (obj) {\n        const originalDefaults = obj.includeDefaultValues;\n        obj.includeDefaultValues = _includeDefaultValues;\n        const data = obj[method || 'toObject'](propertiesToInclude);\n        obj.includeDefaultValues = originalDefaults;\n        // delete data.version;\n        return data;\n      });\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<\n      GroupProps & TClassProperties<this>,\n      keyof SerializedGroupProps\n    >,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SerializedGroupProps {\n    const layoutManager = this.layoutManager.toObject();\n\n    return {\n      ...super.toObject([\n        'subTargetCheck',\n        'interactive',\n        ...propertiesToInclude,\n      ]),\n      ...(layoutManager.strategy !== 'fit-content' || this.includeDefaultValues\n        ? { layoutManager }\n        : {}),\n      objects: this.__serializeObjects(\n        'toObject',\n        propertiesToInclude as string[],\n      ),\n    };\n  }\n\n  toString() {\n    return `#<Group: (${this.complexity()})>`;\n  }\n\n  dispose() {\n    this.layoutManager.unsubscribeTargets({\n      targets: this.getObjects(),\n      target: this,\n    });\n    this._activeObjects = [];\n    this.forEachObject((object) => {\n      this._watchObject(false, object);\n      object.dispose();\n    });\n    super.dispose();\n  }\n\n  /**\n   * @private\n   */\n  _createSVGBgRect(reviver?: TSVGReviver) {\n    if (!this.backgroundColor) {\n      return '';\n    }\n    const fillStroke = Rect.prototype._toSVG.call(this);\n    const commons = fillStroke.indexOf('COMMON_PARTS');\n    fillStroke[commons] = 'for=\"group\" ';\n    const markup = fillStroke.join('');\n    return reviver ? reviver(markup) : markup;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  _toSVG(reviver?: TSVGReviver) {\n    const svgString = ['<g ', 'COMMON_PARTS', ' >\\n'];\n    const bg = this._createSVGBgRect(reviver);\n    bg && svgString.push('\\t\\t', bg);\n    for (let i = 0; i < this._objects.length; i++) {\n      svgString.push('\\t\\t', this._objects[i].toSVG(reviver));\n    }\n    svgString.push('</g>\\n');\n    return svgString;\n  }\n\n  /**\n   * Returns styles-string for svg-export, specific version for group\n   * @return {String}\n   */\n  getSvgStyles(): string {\n    const opacity =\n        typeof this.opacity !== 'undefined' && this.opacity !== 1\n          ? `opacity: ${this.opacity};`\n          : '',\n      visibility = this.visible ? '' : ' visibility: hidden;';\n    return [opacity, this.getSvgFilter(), visibility].join('');\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toClipPathSVG(reviver?: TSVGReviver): string {\n    const svgString = [];\n    const bg = this._createSVGBgRect(reviver);\n    bg && svgString.push('\\t', bg);\n    for (let i = 0; i < this._objects.length; i++) {\n      svgString.push('\\t', this._objects[i].toClipPathSVG(reviver));\n    }\n    return this._createBaseClipPathSVGMarkup(svgString, {\n      reviver,\n    });\n  }\n\n  /**\n   * @todo support loading from svg\n   * @private\n   * @static\n   * @memberOf Group\n   * @param {Object} object Object to create a group from\n   * @returns {Promise<Group>}\n   */\n  static fromObject<T extends TOptions<SerializedGroupProps>>(\n    { type, objects = [], layoutManager, ...options }: T,\n    abortable?: Abortable,\n  ) {\n    return Promise.all([\n      enlivenObjects<FabricObject>(objects, abortable),\n      enlivenObjectEnlivables(options, abortable),\n    ]).then(([objects, hydratedOptions]) => {\n      const group = new this(objects, {\n        ...options,\n        ...hydratedOptions,\n        layoutManager: new NoopLayoutManager(),\n      });\n      if (layoutManager) {\n        const layoutClass = classRegistry.getClass<typeof LayoutManager>(\n          layoutManager.type,\n        );\n        const strategyClass = classRegistry.getClass<typeof FitContentLayout>(\n          layoutManager.strategy,\n        );\n        group.layoutManager = new layoutClass(new strategyClass());\n      } else {\n        group.layoutManager = new LayoutManager();\n      }\n      group.layoutManager.subscribeTargets({\n        type: LAYOUT_TYPE_INITIALIZATION,\n        target: group,\n        targets: group.getObjects(),\n      });\n      group.setCoords();\n      return group;\n    });\n  }\n}\n\nclassRegistry.setClass(Group);\n", "import type { GroupProps } from '../../shapes/Group';\nimport { Group } from '../../shapes/Group';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\n\n/**\n * TODO experiment with different layout manager and svg results ( fixed fit content )\n * Groups SVG elements (usually those retrieved from SVG document)\n * @static\n * @param {FabricObject[]} elements FabricObject(s) parsed from svg, to group\n * @return {FabricObject | Group}\n */\nexport const groupSVGElements = (\n  elements: FabricObject[],\n  options?: Partial<GroupProps>,\n) => {\n  if (elements && elements.length === 1) {\n    return elements[0];\n  }\n  return new Group(elements, options);\n};\n", "import type { TSize } from '../../typedefs';\n\n/**\n * Finds the scale for the object source to fit inside the object destination,\n * keeping aspect ratio intact.\n * respect the total allowed area for the cache.\n * @param {TSize} source natural unscaled size of the object\n * @param {TSize} destination natural unscaled size of the object\n * @return {Number} scale factor to apply to source to fit into destination\n */\nexport const findScaleToFit = (source: TSize, destination: TSize) =>\n  Math.min(\n    destination.width / source.width,\n    destination.height / source.height,\n  );\n\n/**\n * Finds the scale for the object source to cover entirely the object destination,\n * keeping aspect ratio intact.\n * respect the total allowed area for the cache.\n * @param {TSize} source natural unscaled size of the object\n * @param {TSize} destination natural unscaled size of the object\n * @return {Number} scale factor to apply to source to cover destination\n */\nexport const findScaleToCover = (source: TSize, destination: TSize) =>\n  Math.max(\n    destination.width / source.width,\n    destination.height / source.height,\n  );\n", "import { reNum } from '../../parser/constants';\n\nconst commaWsp = `\\\\s*,?\\\\s*`;\n\n/**\n * p for param\n * using \"bad naming\" here because it makes the regex much easier to read\n * p is a number that is preceded by an arbitary number of spaces, maybe 0,\n * a comma or not, and then possibly more spaces or not.\n */\nconst p = `${commaWsp}(${reNum})`;\n\n// const reMoveToCommand = `(M) ?(?:${p}${p} ?)+`;\n\n// const reLineCommand = `(L) ?(?:${p}${p} ?)+`;\n\n// const reHorizontalLineCommand = `(H) ?(?:${p} ?)+`;\n\n// const reVerticalLineCommand = `(V) ?(?:${p} ?)+`;\n\n// const reClosePathCommand = String.raw`(Z)\\s*`;\n\n// const reCubicCurveCommand = `(C) ?(?:${p}${p}${p}${p}${p}${p} ?)+`;\n\n// const reCubicCurveShortcutCommand = `(S) ?(?:${p}${p}${p}${p} ?)+`;\n\n// const reQuadraticCurveCommand = `(Q) ?(?:${p}${p}${p}${p} ?)+`;\n\n// const reQuadraticCurveShortcutCommand = `(T) ?(?:${p}${p} ?)+`;\n\nexport const reArcCommandPoints = `${p}${p}${p}${commaWsp}([01])${commaWsp}([01])${p}${p}`;\n// const reArcCommand = `(A) ?(?:${reArcCommandPoints} ?)+`;\n\n// export const rePathCommandGroups =\n//   `(?:(?:${reMoveToCommand})` +\n//   `|(?:${reLineCommand})` +\n//   `|(?:${reHorizontalLineCommand})` +\n//   `|(?:${reVerticalLineCommand})` +\n//   `|(?:${reClosePathCommand})` +\n//   `|(?:${reCubicCurveCommand})` +\n//   `|(?:${reCubicCurveShortcutCommand})` +\n//   `|(?:${reQuadraticCurveCommand})` +\n//   `|(?:${reQuadraticCurveShortcutCommand})` +\n//   `|(?:${reArcCommand}))`;\n\nexport const rePathCommand = '[mzlhvcsqta][^mzlhvcsqta]*';\n", "import { cache } from '../../cache';\nimport { config } from '../../config';\nimport { halfPI, PiBy180 } from '../../constants';\nimport type { TMat2D, TRadian, TRectBounds } from '../../typedefs';\nimport { cos } from '../misc/cos';\nimport { multiplyTransformMatrices, transformPoint } from '../misc/matrix';\nimport { sin } from '../misc/sin';\nimport { toFixed } from '../misc/toFixed';\nimport type {\n  TCurveInfo,\n  TComplexPathData,\n  TParsedAbsoluteCubicCurveCommand,\n  TPathSegmentInfo,\n  TPointAngle,\n  TSimpleParsedCommand,\n  TSimplePathData,\n  TPathSegmentCommandInfo,\n  TComplexParsedCommand,\n  TPathSegmentInfoCommon,\n  TEndPathInfo,\n  TParsedArcCommand,\n  TComplexParsedCommandType,\n} from './typedefs';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport { reArcCommandPoints, rePathCommand } from './regex';\nimport { reNum } from '../../parser/constants';\n\n/**\n * Commands that may be repeated\n */\nconst repeatedCommands: Record<string, 'l' | 'L'> = {\n  m: 'l',\n  M: 'L',\n};\n\n/**\n * Convert an arc of a rotated ellipse to a Bezier Curve\n * @param {TRadian} theta1 start of the arc\n * @param {TRadian} theta2 end of the arc\n * @param cosTh cosine of the angle of rotation\n * @param sinTh sine of the angle of rotation\n * @param rx x-axis radius (before rotation)\n * @param ry y-axis radius (before rotation)\n * @param cx1 center x of the ellipse\n * @param cy1 center y of the ellipse\n * @param mT\n * @param fromX starting point of arc x\n * @param fromY starting point of arc y\n */\nconst segmentToBezier = (\n  theta1: TRadian,\n  theta2: TRadian,\n  cosTh: number,\n  sinTh: number,\n  rx: number,\n  ry: number,\n  cx1: number,\n  cy1: number,\n  mT: number,\n  fromX: number,\n  fromY: number,\n): TParsedAbsoluteCubicCurveCommand => {\n  const costh1 = cos(theta1),\n    sinth1 = sin(theta1),\n    costh2 = cos(theta2),\n    sinth2 = sin(theta2),\n    toX = cosTh * rx * costh2 - sinTh * ry * sinth2 + cx1,\n    toY = sinTh * rx * costh2 + cosTh * ry * sinth2 + cy1,\n    cp1X = fromX + mT * (-cosTh * rx * sinth1 - sinTh * ry * costh1),\n    cp1Y = fromY + mT * (-sinTh * rx * sinth1 + cosTh * ry * costh1),\n    cp2X = toX + mT * (cosTh * rx * sinth2 + sinTh * ry * costh2),\n    cp2Y = toY + mT * (sinTh * rx * sinth2 - cosTh * ry * costh2);\n\n  return ['C', cp1X, cp1Y, cp2X, cp2Y, toX, toY];\n};\n\n/**\n * Adapted from {@link http://dxr.mozilla.org/mozilla-central/source/dom/svg/SVGPathDataParser.cpp}\n * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\n * http://mozilla.org/MPL/2.0/\n * @param toX\n * @param toY\n * @param rx\n * @param ry\n * @param {number} large 0 or 1 flag\n * @param {number} sweep 0 or 1 flag\n * @param rotateX\n */\nconst arcToSegments = (\n  toX: number,\n  toY: number,\n  rx: number,\n  ry: number,\n  large: number,\n  sweep: number,\n  rotateX: TRadian,\n): TParsedAbsoluteCubicCurveCommand[] => {\n  if (rx === 0 || ry === 0) {\n    return [];\n  }\n  let fromX = 0,\n    fromY = 0,\n    root = 0;\n  const PI = Math.PI,\n    theta = rotateX * PiBy180,\n    sinTheta = sin(theta),\n    cosTh = cos(theta),\n    px = 0.5 * (-cosTh * toX - sinTheta * toY),\n    py = 0.5 * (-cosTh * toY + sinTheta * toX),\n    rx2 = rx ** 2,\n    ry2 = ry ** 2,\n    py2 = py ** 2,\n    px2 = px ** 2,\n    pl = rx2 * ry2 - rx2 * py2 - ry2 * px2;\n  let _rx = Math.abs(rx);\n  let _ry = Math.abs(ry);\n\n  if (pl < 0) {\n    const s = Math.sqrt(1 - pl / (rx2 * ry2));\n    _rx *= s;\n    _ry *= s;\n  } else {\n    root =\n      (large === sweep ? -1.0 : 1.0) * Math.sqrt(pl / (rx2 * py2 + ry2 * px2));\n  }\n\n  const cx = (root * _rx * py) / _ry,\n    cy = (-root * _ry * px) / _rx,\n    cx1 = cosTh * cx - sinTheta * cy + toX * 0.5,\n    cy1 = sinTheta * cx + cosTh * cy + toY * 0.5;\n  let mTheta = calcVectorAngle(1, 0, (px - cx) / _rx, (py - cy) / _ry);\n  let dtheta = calcVectorAngle(\n    (px - cx) / _rx,\n    (py - cy) / _ry,\n    (-px - cx) / _rx,\n    (-py - cy) / _ry,\n  );\n\n  if (sweep === 0 && dtheta > 0) {\n    dtheta -= 2 * PI;\n  } else if (sweep === 1 && dtheta < 0) {\n    dtheta += 2 * PI;\n  }\n\n  // Convert into cubic bezier segments <= 90deg\n  const segments = Math.ceil(Math.abs((dtheta / PI) * 2)),\n    result = [],\n    mDelta = dtheta / segments,\n    mT =\n      ((8 / 3) * Math.sin(mDelta / 4) * Math.sin(mDelta / 4)) /\n      Math.sin(mDelta / 2);\n  let th3 = mTheta + mDelta;\n\n  for (let i = 0; i < segments; i++) {\n    result[i] = segmentToBezier(\n      mTheta,\n      th3,\n      cosTh,\n      sinTheta,\n      _rx,\n      _ry,\n      cx1,\n      cy1,\n      mT,\n      fromX,\n      fromY,\n    );\n    fromX = result[i][5];\n    fromY = result[i][6];\n    mTheta = th3;\n    th3 += mDelta;\n  }\n  return result;\n};\n\n/**\n * @private\n * Calculate the angle between two vectors\n * @param ux u endpoint x\n * @param uy u endpoint y\n * @param vx v endpoint x\n * @param vy v endpoint y\n */\nconst calcVectorAngle = (\n  ux: number,\n  uy: number,\n  vx: number,\n  vy: number,\n): TRadian => {\n  const ta = Math.atan2(uy, ux),\n    tb = Math.atan2(vy, vx);\n  if (tb >= ta) {\n    return tb - ta;\n  } else {\n    return 2 * Math.PI - (ta - tb);\n  }\n};\n\n// functions for the Cubic beizer\n// taken from: https://github.com/konvajs/konva/blob/7.0.5/src/shapes/Path.ts#L350\nconst CB1 = (t: number) => t ** 3;\nconst CB2 = (t: number) => 3 * t ** 2 * (1 - t);\nconst CB3 = (t: number) => 3 * t * (1 - t) ** 2;\nconst CB4 = (t: number) => (1 - t) ** 3;\n\n/**\n * Calculate bounding box of a cubic Bezier curve\n * Taken from http://jsbin.com/ivomiq/56/edit (no credits available)\n * TODO: can we normalize this with the starting points set at 0 and then translated the bbox?\n * @param {number} begx starting point\n * @param {number} begy\n * @param {number} cp1x first control point\n * @param {number} cp1y\n * @param {number} cp2x second control point\n * @param {number} cp2y\n * @param {number} endx end of bezier\n * @param {number} endy\n * @return {TRectBounds} the rectangular bounds\n */\nexport function getBoundsOfCurve(\n  begx: number,\n  begy: number,\n  cp1x: number,\n  cp1y: number,\n  cp2x: number,\n  cp2y: number,\n  endx: number,\n  endy: number,\n): TRectBounds {\n  let argsString: string;\n  if (config.cachesBoundsOfCurve) {\n    // eslint-disable-next-line\n    argsString = [...arguments].join();\n    if (cache.boundsOfCurveCache[argsString]) {\n      return cache.boundsOfCurveCache[argsString];\n    }\n  }\n\n  const sqrt = Math.sqrt,\n    abs = Math.abs,\n    tvalues = [],\n    bounds: [[x: number, y: number], [x: number, y: number]] = [\n      [0, 0],\n      [0, 0],\n    ];\n\n  let b = 6 * begx - 12 * cp1x + 6 * cp2x;\n  let a = -3 * begx + 9 * cp1x - 9 * cp2x + 3 * endx;\n  let c = 3 * cp1x - 3 * begx;\n\n  for (let i = 0; i < 2; ++i) {\n    if (i > 0) {\n      b = 6 * begy - 12 * cp1y + 6 * cp2y;\n      a = -3 * begy + 9 * cp1y - 9 * cp2y + 3 * endy;\n      c = 3 * cp1y - 3 * begy;\n    }\n\n    if (abs(a) < 1e-12) {\n      if (abs(b) < 1e-12) {\n        continue;\n      }\n      const t = -c / b;\n      if (0 < t && t < 1) {\n        tvalues.push(t);\n      }\n      continue;\n    }\n    const b2ac = b * b - 4 * c * a;\n    if (b2ac < 0) {\n      continue;\n    }\n    const sqrtb2ac = sqrt(b2ac);\n    const t1 = (-b + sqrtb2ac) / (2 * a);\n    if (0 < t1 && t1 < 1) {\n      tvalues.push(t1);\n    }\n    const t2 = (-b - sqrtb2ac) / (2 * a);\n    if (0 < t2 && t2 < 1) {\n      tvalues.push(t2);\n    }\n  }\n\n  let j = tvalues.length;\n  const jlen = j;\n  const iterator = getPointOnCubicBezierIterator(\n    begx,\n    begy,\n    cp1x,\n    cp1y,\n    cp2x,\n    cp2y,\n    endx,\n    endy,\n  );\n  while (j--) {\n    const { x, y } = iterator(tvalues[j]);\n    bounds[0][j] = x;\n    bounds[1][j] = y;\n  }\n\n  bounds[0][jlen] = begx;\n  bounds[1][jlen] = begy;\n  bounds[0][jlen + 1] = endx;\n  bounds[1][jlen + 1] = endy;\n  const result: TRectBounds = [\n    new Point(Math.min(...bounds[0]), Math.min(...bounds[1])),\n    new Point(Math.max(...bounds[0]), Math.max(...bounds[1])),\n  ];\n  if (config.cachesBoundsOfCurve) {\n    cache.boundsOfCurveCache[argsString!] = result;\n  }\n  return result;\n}\n\n/**\n * Converts arc to a bunch of cubic Bezier curves\n * @param {number} fx starting point x\n * @param {number} fy starting point y\n * @param {TParsedArcCommand} coords Arc command\n */\nexport const fromArcToBeziers = (\n  fx: number,\n  fy: number,\n  [_, rx, ry, rot, large, sweep, tx, ty]: TParsedArcCommand,\n): TParsedAbsoluteCubicCurveCommand[] => {\n  const segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\n  for (let i = 0, len = segsNorm.length; i < len; i++) {\n    segsNorm[i][1] += fx;\n    segsNorm[i][2] += fy;\n    segsNorm[i][3] += fx;\n    segsNorm[i][4] += fy;\n    segsNorm[i][5] += fx;\n    segsNorm[i][6] += fy;\n  }\n  return segsNorm;\n};\n\n/**\n * This function takes a parsed SVG path and makes it simpler for fabricJS logic.\n * Simplification consist of:\n * - All commands converted to absolute (lowercase to uppercase)\n * - S converted to C\n * - T converted to Q\n * - A converted to C\n * @param {TComplexPathData} path the array of commands of a parsed SVG path for `Path`\n * @return {TSimplePathData} the simplified array of commands of a parsed SVG path for `Path`\n * TODO: figure out how to remove the type assertions in a nice way\n */\nexport const makePathSimpler = (path: TComplexPathData): TSimplePathData => {\n  // x and y represent the last point of the path, AKA the previous command point.\n  // we add them to each relative command to make it an absolute comment.\n  // we also swap the v V h H with L, because are easier to transform.\n  let x = 0,\n    y = 0;\n  // x1 and y1 represent the last point of the subpath. the subpath is started with\n  // m or M command. When a z or Z command is drawn, x and y need to be resetted to\n  // the last x1 and y1.\n  let x1 = 0,\n    y1 = 0;\n  // previous will host the letter of the previous command, to handle S and T.\n  // controlX and controlY will host the previous reflected control point\n  const destinationPath: TSimplePathData = [];\n  let previous,\n    // placeholders\n    controlX = 0,\n    controlY = 0;\n  for (const parsedCommand of path) {\n    const current: TComplexParsedCommand = [...parsedCommand];\n    let converted: TSimpleParsedCommand | undefined;\n    switch (\n      current[0] // first letter\n    ) {\n      case 'l': // lineto, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'L':\n        x = current[1];\n        y = current[2];\n        converted = ['L', x, y];\n        break;\n      case 'h': // horizontal lineto, relative\n        current[1] += x;\n      // falls through\n      case 'H':\n        x = current[1];\n        converted = ['L', x, y];\n        break;\n      case 'v': // vertical lineto, relative\n        current[1] += y;\n      // falls through\n      case 'V':\n        y = current[1];\n        converted = ['L', x, y];\n        break;\n      case 'm': // moveTo, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'M':\n        x = current[1];\n        y = current[2];\n        x1 = current[1];\n        y1 = current[2];\n        converted = ['M', x, y];\n        break;\n      case 'c': // bezierCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n        current[5] += x;\n        current[6] += y;\n      // falls through\n      case 'C':\n        controlX = current[3];\n        controlY = current[4];\n        x = current[5];\n        y = current[6];\n        converted = ['C', current[1], current[2], controlX, controlY, x, y];\n        break;\n      case 's': // shorthand cubic bezierCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n      // falls through\n      case 'S':\n        // would be sScC but since we are swapping sSc for C, we check just that.\n        if (previous === 'C') {\n          // calculate reflection of previous control points\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n        } else {\n          // If there is no previous command or if the previous command was not a C, c, S, or s,\n          // the control point is coincident with the current point\n          controlX = x;\n          controlY = y;\n        }\n        x = current[3];\n        y = current[4];\n        converted = ['C', controlX, controlY, current[1], current[2], x, y];\n        // converted[3] and converted[4] are NOW the second control point.\n        // we keep it for the next reflection.\n        controlX = converted[3];\n        controlY = converted[4];\n        break;\n      case 'q': // quadraticCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n      // falls through\n      case 'Q':\n        controlX = current[1];\n        controlY = current[2];\n        x = current[3];\n        y = current[4];\n        converted = ['Q', controlX, controlY, x, y];\n        break;\n      case 't': // shorthand quadraticCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'T':\n        if (previous === 'Q') {\n          // calculate reflection of previous control point\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n        } else {\n          // If there is no previous command or if the previous command was not a Q, q, T or t,\n          // assume the control point is coincident with the current point\n          controlX = x;\n          controlY = y;\n        }\n        x = current[1];\n        y = current[2];\n        converted = ['Q', controlX, controlY, x, y];\n        break;\n      case 'a':\n        current[6] += x;\n        current[7] += y;\n      // falls through\n      case 'A':\n        fromArcToBeziers(x, y, current).forEach((b) => destinationPath.push(b));\n        x = current[6];\n        y = current[7];\n        break;\n      case 'z':\n      case 'Z':\n        x = x1;\n        y = y1;\n        converted = ['Z'];\n        break;\n      default:\n    }\n    if (converted) {\n      destinationPath.push(converted);\n      previous = converted[0];\n    } else {\n      previous = '';\n    }\n  }\n  return destinationPath;\n};\n\n// todo verify if we can just use the point class here\n/**\n * Calc length from point x1,y1 to x2,y2\n * @param {number} x1 starting point x\n * @param {number} y1 starting point y\n * @param {number} x2 starting point x\n * @param {number} y2 starting point y\n * @return {number} length of segment\n */\nconst calcLineLength = (\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n): number => Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n\n/**\n * Get an iterator that takes a percentage and returns a point\n * @param {number} begx\n * @param {number} begy\n * @param {number} cp1x\n * @param {number} cp1y\n * @param {number} cp2x\n * @param {number} cp2y\n * @param {number} endx\n * @param {number} endy\n */\nconst getPointOnCubicBezierIterator =\n  (\n    begx: number,\n    begy: number,\n    cp1x: number,\n    cp1y: number,\n    cp2x: number,\n    cp2y: number,\n    endx: number,\n    endy: number,\n  ) =>\n  (pct: number) => {\n    const c1 = CB1(pct),\n      c2 = CB2(pct),\n      c3 = CB3(pct),\n      c4 = CB4(pct);\n    return new Point(\n      endx * c1 + cp2x * c2 + cp1x * c3 + begx * c4,\n      endy * c1 + cp2y * c2 + cp1y * c3 + begy * c4,\n    );\n  };\n\nconst QB1 = (t: number) => t ** 2;\nconst QB2 = (t: number) => 2 * t * (1 - t);\nconst QB3 = (t: number) => (1 - t) ** 2;\n\nconst getTangentCubicIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n    p4x: number,\n    p4y: number,\n  ) =>\n  (pct: number) => {\n    const qb1 = QB1(pct),\n      qb2 = QB2(pct),\n      qb3 = QB3(pct),\n      tangentX =\n        3 * (qb3 * (p2x - p1x) + qb2 * (p3x - p2x) + qb1 * (p4x - p3x)),\n      tangentY =\n        3 * (qb3 * (p2y - p1y) + qb2 * (p3y - p2y) + qb1 * (p4y - p3y));\n    return Math.atan2(tangentY, tangentX);\n  };\n\nconst getPointOnQuadraticBezierIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n  ) =>\n  (pct: number) => {\n    const c1 = QB1(pct),\n      c2 = QB2(pct),\n      c3 = QB3(pct);\n    return new Point(\n      p3x * c1 + p2x * c2 + p1x * c3,\n      p3y * c1 + p2y * c2 + p1y * c3,\n    );\n  };\n\nconst getTangentQuadraticIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n  ) =>\n  (pct: number) => {\n    const invT = 1 - pct,\n      tangentX = 2 * (invT * (p2x - p1x) + pct * (p3x - p2x)),\n      tangentY = 2 * (invT * (p2y - p1y) + pct * (p3y - p2y));\n    return Math.atan2(tangentY, tangentX);\n  };\n\n// this will run over a path segment (a cubic or quadratic segment) and approximate it\n// with 100 segments. This will good enough to calculate the length of the curve\nconst pathIterator = (\n  iterator: (pct: number) => Point,\n  x1: number,\n  y1: number,\n) => {\n  let tempP = new Point(x1, y1),\n    tmpLen = 0;\n  for (let perc = 1; perc <= 100; perc += 1) {\n    const p = iterator(perc / 100);\n    tmpLen += calcLineLength(tempP.x, tempP.y, p.x, p.y);\n    tempP = p;\n  }\n  return tmpLen;\n};\n\n/**\n * Given a pathInfo, and a distance in pixels, find the percentage from 0 to 1\n * that correspond to that pixels run over the path.\n * The percentage will be then used to find the correct point on the canvas for the path.\n * @param {Array} segInfo fabricJS collection of information on a parsed path\n * @param {number} distance from starting point, in pixels.\n * @return {TPointAngle} info object with x and y ( the point on canvas ) and angle, the tangent on that point;\n */\nconst findPercentageForDistance = (\n  segInfo: TCurveInfo<'Q' | 'C'>,\n  distance: number,\n): TPointAngle => {\n  let perc = 0,\n    tmpLen = 0,\n    tempP: XY = { x: segInfo.x, y: segInfo.y },\n    p: XY = { ...tempP },\n    nextLen: number,\n    nextStep = 0.01,\n    lastPerc = 0;\n  // nextStep > 0.0001 covers 0.00015625 that 1/64th of 1/100\n  // the path\n  const iterator = segInfo.iterator,\n    angleFinder = segInfo.angleFinder;\n  while (tmpLen < distance && nextStep > 0.0001) {\n    p = iterator(perc);\n    lastPerc = perc;\n    nextLen = calcLineLength(tempP.x, tempP.y, p.x, p.y);\n    // compare tmpLen each cycle with distance, decide next perc to test.\n    if (nextLen + tmpLen > distance) {\n      // we discard this step and we make smaller steps.\n      perc -= nextStep;\n      nextStep /= 2;\n    } else {\n      tempP = p;\n      perc += nextStep;\n      tmpLen += nextLen;\n    }\n  }\n  return { ...p, angle: angleFinder(lastPerc) };\n};\n\n/**\n * Run over a parsed and simplified path and extract some information (length of each command and starting point)\n * @param {TSimplePathData} path parsed path commands\n * @return {TPathSegmentInfo[]} path commands information\n */\nexport const getPathSegmentsInfo = (\n  path: TSimplePathData,\n): TPathSegmentInfo[] => {\n  let totalLength = 0,\n    //x2 and y2 are the coords of segment start\n    //x1 and y1 are the coords of the current point\n    x1 = 0,\n    y1 = 0,\n    x2 = 0,\n    y2 = 0,\n    iterator,\n    tempInfo: TPathSegmentInfo;\n  const info: TPathSegmentInfo[] = [];\n  for (const current of path) {\n    const basicInfo: TPathSegmentInfoCommon<keyof TPathSegmentCommandInfo> = {\n      x: x1,\n      y: y1,\n      command: current[0],\n      length: 0,\n    };\n    switch (\n      current[0] //first letter\n    ) {\n      case 'M':\n        tempInfo = <TPathSegmentInfoCommon<'M'>>basicInfo;\n        tempInfo.x = x2 = x1 = current[1];\n        tempInfo.y = y2 = y1 = current[2];\n        break;\n      case 'L':\n        tempInfo = <TPathSegmentInfoCommon<'L'>>basicInfo;\n        tempInfo.length = calcLineLength(x1, y1, current[1], current[2]);\n        x1 = current[1];\n        y1 = current[2];\n        break;\n      case 'C':\n        iterator = getPointOnCubicBezierIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6],\n        );\n        tempInfo = <TCurveInfo<'C'>>basicInfo;\n        tempInfo.iterator = iterator;\n        tempInfo.angleFinder = getTangentCubicIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6],\n        );\n        tempInfo.length = pathIterator(iterator, x1, y1);\n\n        x1 = current[5];\n        y1 = current[6];\n        break;\n      case 'Q':\n        iterator = getPointOnQuadraticBezierIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n        );\n        tempInfo = <TCurveInfo<'Q'>>basicInfo;\n        tempInfo.iterator = iterator;\n        tempInfo.angleFinder = getTangentQuadraticIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n        );\n        tempInfo.length = pathIterator(iterator, x1, y1);\n        x1 = current[3];\n        y1 = current[4];\n        break;\n      case 'Z':\n        // we add those in order to ease calculations later\n        tempInfo = <TEndPathInfo>basicInfo;\n        tempInfo.destX = x2;\n        tempInfo.destY = y2;\n        tempInfo.length = calcLineLength(x1, y1, x2, y2);\n        x1 = x2;\n        y1 = y2;\n        break;\n    }\n    totalLength += tempInfo.length;\n    info.push(tempInfo);\n  }\n  info.push({ length: totalLength, x: x1, y: y1 });\n  return info;\n};\n\n/**\n * Get the point on the path that is distance along the path\n * @param path\n * @param distance\n * @param infos\n */\nexport const getPointOnPath = (\n  path: TSimplePathData,\n  distance: number,\n  infos: TPathSegmentInfo[] = getPathSegmentsInfo(path),\n): TPointAngle | undefined => {\n  let i = 0;\n  while (distance - infos[i].length > 0 && i < infos.length - 2) {\n    distance -= infos[i].length;\n    i++;\n  }\n  const segInfo = infos[i],\n    segPercent = distance / segInfo.length,\n    segment = path[i];\n\n  switch (segInfo.command) {\n    case 'M':\n      return { x: segInfo.x, y: segInfo.y, angle: 0 };\n    case 'Z':\n      return {\n        ...new Point(segInfo.x, segInfo.y).lerp(\n          new Point(segInfo.destX, segInfo.destY),\n          segPercent,\n        ),\n        angle: Math.atan2(segInfo.destY - segInfo.y, segInfo.destX - segInfo.x),\n      };\n    case 'L':\n      return {\n        ...new Point(segInfo.x, segInfo.y).lerp(\n          new Point(segment[1]!, segment[2]!),\n          segPercent,\n        ),\n        angle: Math.atan2(segment[2]! - segInfo.y, segment[1]! - segInfo.x),\n      };\n    case 'C':\n      return findPercentageForDistance(segInfo, distance);\n    case 'Q':\n      return findPercentageForDistance(segInfo, distance);\n    default:\n    // throw Error('Invalid command');\n  }\n};\n\nconst rePathCmdAll = new RegExp(rePathCommand, 'gi');\nconst regExpArcCommandPoints = new RegExp(reArcCommandPoints, 'g');\nconst reMyNum = new RegExp(reNum, 'gi');\nconst commandLengths = {\n  m: 2,\n  l: 2,\n  h: 1,\n  v: 1,\n  c: 6,\n  s: 4,\n  q: 4,\n  t: 2,\n  a: 7,\n} as const;\n/**\n *\n * @param {string} pathString\n * @return {TComplexPathData} An array of SVG path commands\n * @example <caption>Usage</caption>\n * parsePath('M 3 4 Q 3 5 2 1 4 0 Q 9 12 2 1 4 0') === [\n *   ['M', 3, 4],\n *   ['Q', 3, 5, 2, 1, 4, 0],\n *   ['Q', 9, 12, 2, 1, 4, 0],\n * ];\n */\nexport const parsePath = (pathString: string): TComplexPathData => {\n  const chain: TComplexPathData = [];\n  const all = pathString.match(rePathCmdAll) ?? [];\n  for (const matchStr of all) {\n    // take match string and save the first letter as the command\n    const commandLetter = matchStr[0] as TComplexParsedCommandType;\n    // in case of Z we have very little to do\n    if (commandLetter === 'z' || commandLetter === 'Z') {\n      chain.push([commandLetter]);\n      continue;\n    }\n    const commandLength =\n      commandLengths[\n        commandLetter.toLowerCase() as keyof typeof commandLengths\n      ];\n\n    let paramArr = [];\n    if (commandLetter === 'a' || commandLetter === 'A') {\n      // the arc command ha some peculariaties that requires a special regex other than numbers\n      // it is possible to avoid using a space between the sweep and large arc flags, making them either\n      // 00, 01, 10 or 11, making them identical to a plain number for the regex reMyNum\n      // reset the regexp\n      regExpArcCommandPoints.lastIndex = 0;\n      for (let out = null; (out = regExpArcCommandPoints.exec(matchStr)); ) {\n        paramArr.push(...out.slice(1));\n      }\n    } else {\n      paramArr = matchStr.match(reMyNum) || [];\n    }\n\n    // inspect the length of paramArr, if is longer than commandLength\n    // we are dealing with repeated commands\n    for (let i = 0; i < paramArr.length; i += commandLength) {\n      const newCommand = new Array(commandLength) as TComplexParsedCommand;\n      const transformedCommand = repeatedCommands[commandLetter];\n      newCommand[0] =\n        i > 0 && transformedCommand ? transformedCommand : commandLetter;\n      for (let j = 0; j < commandLength; j++) {\n        newCommand[j + 1] = parseFloat(paramArr[i + j]);\n      }\n      chain.push(newCommand);\n    }\n  }\n  return chain;\n};\n\n/**\n *\n * Converts points to a smooth SVG path\n * @param {XY[]} points Array of points\n * @param {number} [correction] Apply a correction to the path (usually we use `width / 1000`). If value is undefined 0 is used as the correction value.\n * @return {(string|number)[][]} An array of SVG path commands\n */\nexport const getSmoothPathFromPoints = (\n  points: Point[],\n  correction = 0,\n): TSimplePathData => {\n  let p1 = new Point(points[0]),\n    p2 = new Point(points[1]),\n    multSignX = 1,\n    multSignY = 0;\n  const path: TSimplePathData = [],\n    len = points.length,\n    manyPoints = len > 2;\n\n  if (manyPoints) {\n    multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\n    multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\n  }\n  path.push([\n    'M',\n    p1.x - multSignX * correction,\n    p1.y - multSignY * correction,\n  ]);\n  let i;\n  for (i = 1; i < len; i++) {\n    if (!p1.eq(p2)) {\n      const midPoint = p1.midPointFrom(p2);\n      // p1 is our bezier control point\n      // midpoint is our endpoint\n      // start point is p(i-1) value.\n      path.push(['Q', p1.x, p1.y, midPoint.x, midPoint.y]);\n    }\n    p1 = points[i];\n    if (i + 1 < points.length) {\n      p2 = points[i + 1];\n    }\n  }\n  if (manyPoints) {\n    multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\n    multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\n  }\n  path.push([\n    'L',\n    p1.x + multSignX * correction,\n    p1.y + multSignY * correction,\n  ]);\n  return path;\n};\n\n/**\n * Transform a path by transforming each segment.\n * it has to be a simplified path or it won't work.\n * WARNING: this depends from pathOffset for correct operation\n * @param {TSimplePathData} path fabricJS parsed and simplified path commands\n * @param {TMat2D} transform matrix that represent the transformation\n * @param {Point} [pathOffset] `Path.pathOffset`\n * @returns {TSimplePathData} the transformed path\n */\nexport const transformPath = (\n  path: TSimplePathData,\n  transform: TMat2D,\n  pathOffset: Point,\n): TSimplePathData => {\n  if (pathOffset) {\n    transform = multiplyTransformMatrices(transform, [\n      1,\n      0,\n      0,\n      1,\n      -pathOffset.x,\n      -pathOffset.y,\n    ]);\n  }\n  return path.map((pathSegment) => {\n    const newSegment: TSimpleParsedCommand = [...pathSegment];\n    for (let i = 1; i < pathSegment.length - 1; i += 2) {\n      // TODO: is there a way to get around casting to any?\n      const { x, y } = transformPoint(\n        {\n          x: pathSegment[i] as number,\n          y: pathSegment[i + 1] as number,\n        },\n        transform,\n      );\n      newSegment[i] = x;\n      newSegment[i + 1] = y;\n    }\n    return newSegment;\n  });\n};\n\n/**\n * Returns an array of path commands to create a regular polygon\n * @param {number} numVertexes\n * @param {number} radius\n * @returns {TSimplePathData} An array of SVG path commands\n */\nexport const getRegularPolygonPath = (\n  numVertexes: number,\n  radius: number,\n): TSimplePathData => {\n  const interiorAngle = (Math.PI * 2) / numVertexes;\n  // rotationAdjustment rotates the path by 1/2 the interior angle so that the polygon always has a flat side on the bottom\n  // This isn't strictly necessary, but it's how we tend to think of and expect polygons to be drawn\n  let rotationAdjustment = -halfPI;\n  if (numVertexes % 2 === 0) {\n    rotationAdjustment += interiorAngle / 2;\n  }\n  const d = new Array(numVertexes + 1);\n  for (let i = 0; i < numVertexes; i++) {\n    const rad = i * interiorAngle + rotationAdjustment;\n    const { x, y } = new Point(cos(rad), sin(rad)).scalarMultiply(radius);\n    d[i] = [i === 0 ? 'M' : 'L', x, y];\n  }\n  d[numVertexes] = ['Z'];\n  return d;\n};\n\n/**\n * Join path commands to go back to svg format\n * @param {TSimplePathData} pathData fabricJS parsed path commands\n * @param {number} fractionDigits number of fraction digits to \"leave\"\n * @return {String} joined path 'M 0 0 L 20 30'\n */\nexport const joinPath = (pathData: TSimplePathData, fractionDigits?: number) =>\n  pathData\n    .map((segment) => {\n      return segment\n        .map((arg, i) => {\n          if (i === 0) return arg;\n          return fractionDigits === undefined\n            ? arg\n            : toFixed(arg, fractionDigits);\n        })\n        .join(' ');\n    })\n    .join(' ');\n", "// TODO this file needs to go away, cross browser style support is not fabricjs domain.\n\n/**\n * wrapper for setting element's style\n * @param {HTMLElement} element\n * @param {Object | string} styles\n */\nexport function setStyle(\n  element: HTMLElement,\n  styles: string | Record<string, string>,\n) {\n  const elementStyle = element.style;\n  if (!elementStyle || !styles) {\n    return;\n  } else if (typeof styles === 'string') {\n    elementStyle.cssText += ';' + styles;\n  } else {\n    Object.entries(styles).forEach(([property, value]) =>\n      elementStyle.setProperty(property, value),\n    );\n  }\n}\n", "import type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { sendObjectToPlane } from './planeChange';\nimport { Group } from '../../shapes/Group';\n/**\n * Merges 2 clip paths into one visually equal clip path\n *\n * **IMPORTANT**:\\\n * Does **NOT** clone the arguments, clone them proir if necessary.\n *\n * Creates a wrapper (group) that contains one clip path and is clipped by the other so content is kept where both overlap.\n * Use this method if both the clip paths may have nested clip paths of their own, so assigning one to the other's clip path property is not possible.\n *\n * In order to handle the `inverted` property we follow logic described in the following cases:\\\n * **(1)** both clip paths are inverted - the clip paths pass the inverted prop to the wrapper and loose it themselves.\\\n * **(2)** one is inverted and the other isn't - the wrapper shouldn't become inverted and the inverted clip path must clip the non inverted one to produce an identical visual effect.\\\n * **(3)** both clip paths are not inverted - wrapper and clip paths remain unchanged.\n *\n * @memberOf fabric.util\n * @param {fabric.Object} c1\n * @param {fabric.Object} c2\n * @returns {fabric.Object} merged clip path\n */\nexport const mergeClipPaths = (c1: FabricObject, c2: FabricObject) => {\n  let a = c1,\n    b = c2;\n  if (a.inverted && !b.inverted) {\n    //  case (2)\n    a = c2;\n    b = c1;\n  }\n  //  `b` becomes `a`'s clip path so we transform `b` to `a` coordinate plane\n  sendObjectToPlane(b, b.group?.calcTransformMatrix(), a.calcTransformMatrix());\n  //  assign the `inverted` prop to the wrapping group\n  const inverted = a.inverted && b.inverted;\n  if (inverted) {\n    //  case (1)\n    a.inverted = b.inverted = false;\n  }\n  return new Group([a], { clipPath: b, inverted });\n};\n", "/**\n * Returns random number between 2 specified ones.\n * @param {Number} min lower limit\n * @param {Number} max upper limit\n * @return {Number} random value (between min and max)\n */\nexport const getRandomInt = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n", "import { getFabricWindow } from '../../env';\nimport { noop } from '../../constants';\nimport type { Abortable } from '../../typedefs';\nimport { SignalAbortedError } from './console';\n\ntype requestOptions = Abortable & {\n  onComplete?: (xhr: XMLHttpRequest) => void;\n};\n\n/**\n * Cross-browser abstraction for sending XMLHttpRequest\n * @deprecated this has to go away, we can use a modern browser method to do the same.\n * @param {String} url URL to send XMLHttpRequest to\n * @param {Object} [options] Options object\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @param {Function} options.onComplete Callback to invoke when request is completed\n * @return {XMLHttpRequest} request\n */\n\nexport function request(url: string, options: requestOptions = {}) {\n  const onComplete = options.onComplete || noop,\n    xhr = new (getFabricWindow().XMLHttpRequest)(),\n    signal = options.signal,\n    abort = function () {\n      xhr.abort();\n    },\n    removeListener = function () {\n      signal && signal.removeEventListener('abort', abort);\n      xhr.onerror = xhr.ontimeout = noop;\n    };\n\n  if (signal && signal.aborted) {\n    throw new SignalAbortedError('request');\n  } else if (signal) {\n    signal.addEventListener('abort', abort, { once: true });\n  }\n\n  /** @ignore */\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4) {\n      removeListener();\n      onComplete(xhr);\n      xhr.onreadystatechange = noop;\n    }\n  };\n\n  xhr.onerror = xhr.ontimeout = removeListener;\n\n  xhr.open('get', url, true);\n\n  xhr.send();\n  return xhr;\n}\n", "import { CENTER, SCALE_X, SCALE_Y } from '../constants';\nimport type { FabricImage } from '../shapes/Image';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TMat2D } from '../typedefs';\nimport { qrDecompose } from './misc/matrix';\n\ntype FabricObjectWithTransformMatrix = FabricObject & {\n  transformMatrix?: TMat2D;\n};\n\n/**\n * This function is an helper for svg import. it decompose the transformMatrix\n * and assign properties to object.\n * untransformed coordinates\n * @private\n */\nconst _assignTransformMatrixProps = (\n  object: FabricObjectWithTransformMatrix,\n) => {\n  if (object.transformMatrix) {\n    const { scaleX, scaleY, angle, skewX } = qrDecompose(\n      object.transformMatrix,\n    );\n    object.flipX = false;\n    object.flipY = false;\n    object.set(SCALE_X, scaleX);\n    object.set(SCALE_Y, scaleY);\n    object.angle = angle;\n    object.skewX = skewX;\n    object.skewY = 0;\n  }\n};\n\n/**\n * This function is an helper for svg import. it removes the transform matrix\n * and set to object properties that fabricjs can handle\n * @private\n * @param {Object} preserveAspectRatioOptions\n */\nexport const removeTransformMatrixForSvgParsing = (\n  object: FabricObjectWithTransformMatrix,\n  preserveAspectRatioOptions?: any,\n) => {\n  let center = object._findCenterFromElement();\n  if (object.transformMatrix) {\n    _assignTransformMatrixProps(object);\n    center = center.transform(object.transformMatrix);\n  }\n  delete object.transformMatrix;\n  if (preserveAspectRatioOptions) {\n    object.scaleX *= preserveAspectRatioOptions.scaleX;\n    object.scaleY *= preserveAspectRatioOptions.scaleY;\n    (object as FabricImage).cropX = preserveAspectRatioOptions.cropX;\n    (object as FabricImage).cropY = preserveAspectRatioOptions.cropY;\n    center.x += preserveAspectRatioOptions.offsetLeft;\n    center.y += preserveAspectRatioOptions.offsetTop;\n    object.width = preserveAspectRatioOptions.width;\n    object.height = preserveAspectRatioOptions.height;\n  }\n  object.setPositionByOrigin(center, CENTER, CENTER);\n};\n", "import type { Point } from '../../Point';\nimport type { TRadian } from '../../typedefs';\n/**\n * Rotates `point` around `origin` with `radians`\n * @deprecated use the Point.rotate\n * @param {Point} origin The origin of the rotation\n * @param {Point} origin The origin of the rotation\n * @param {TRadian} radians The radians of the angle for the rotation\n * @return {Point} The new rotated point\n */\nexport const rotatePoint = (\n  point: Point,\n  origin: Point,\n  radians: TRadian,\n): Point => point.rotate(radians, origin);\n", "import { getEnv, getFabricDocument } from '../../env';\nimport type { TSize } from '../../typedefs';\nimport { createCanvasElement, setStyle } from '../../util';\nimport type { CSSDimensions } from './util';\nimport { makeElementUnselectable, setCSSDimensions } from './util';\nimport type { CanvasItem } from './StaticCanvasDOMManager';\nimport { StaticCanvasDOMManager } from './StaticCanvasDOMManager';\nimport { setCanvasDimensions } from './util';\nimport { NONE } from '../../constants';\n\nexport class CanvasDOMManager extends StaticCanvasDOMManager {\n  upper: CanvasItem;\n  container: HTMLDivElement;\n\n  constructor(\n    arg0?: string | HTMLCanvasElement,\n    {\n      allowTouchScrolling = false,\n      containerClass = '',\n    }: {\n      allowTouchScrolling?: boolean;\n      /**\n       * @deprecated here only for backward compatibility\n       */\n      containerClass?: string;\n    } = {},\n  ) {\n    super(arg0);\n    const { el: lowerCanvasEl } = this.lower;\n    const upperCanvasEl = this.createUpperCanvas();\n    this.upper = { el: upperCanvasEl, ctx: upperCanvasEl.getContext('2d')! };\n    this.applyCanvasStyle(lowerCanvasEl, {\n      allowTouchScrolling,\n    });\n    this.applyCanvasStyle(upperCanvasEl, {\n      allowTouchScrolling,\n      styles: {\n        position: 'absolute',\n        left: '0',\n        top: '0',\n      },\n    });\n    const container = this.createContainerElement();\n    container.classList.add(containerClass);\n    if (lowerCanvasEl.parentNode) {\n      lowerCanvasEl.parentNode.replaceChild(container, lowerCanvasEl);\n    }\n    container.append(lowerCanvasEl, upperCanvasEl);\n    this.container = container;\n  }\n\n  protected createUpperCanvas() {\n    const { el: lowerCanvasEl } = this.lower;\n    const el = createCanvasElement();\n    // we assign the same classname of the lowerCanvas\n    el.className = lowerCanvasEl.className;\n    // but then we remove the lower-canvas specific className\n    el.classList.remove('lower-canvas');\n    // we add the specific upper-canvas class\n    el.classList.add('upper-canvas');\n    el.setAttribute('data-fabric', 'top');\n    el.style.cssText = lowerCanvasEl.style.cssText;\n    el.setAttribute('draggable', 'true');\n    return el;\n  }\n\n  protected createContainerElement() {\n    const container = getFabricDocument().createElement('div');\n    container.setAttribute('data-fabric', 'wrapper');\n    setStyle(container, {\n      position: 'relative',\n    });\n    makeElementUnselectable(container);\n    return container;\n  }\n\n  /**\n   * @private\n   * @param {HTMLCanvasElement} element canvas element to apply styles on\n   */\n  protected applyCanvasStyle(\n    element: HTMLCanvasElement,\n    options: {\n      allowTouchScrolling?: boolean;\n      styles?: Record<string, string>;\n    },\n  ) {\n    const { styles, allowTouchScrolling } = options;\n    setStyle(element, {\n      ...styles,\n      'touch-action': allowTouchScrolling ? 'manipulation' : NONE,\n    });\n    makeElementUnselectable(element);\n  }\n\n  setDimensions(size: TSize, retinaScaling: number) {\n    super.setDimensions(size, retinaScaling);\n    const { el, ctx } = this.upper;\n    setCanvasDimensions(el, ctx, size, retinaScaling);\n  }\n\n  setCSSDimensions(size: Partial<CSSDimensions>): void {\n    super.setCSSDimensions(size);\n    setCSSDimensions(this.upper.el, size);\n    setCSSDimensions(this.container, size);\n  }\n\n  cleanupDOM(size: TSize) {\n    const container = this.container,\n      { el: lowerCanvasEl } = this.lower,\n      { el: upperCanvasEl } = this.upper;\n    super.cleanupDOM(size);\n    container.removeChild(upperCanvasEl);\n    container.removeChild(lowerCanvasEl);\n    if (container.parentNode) {\n      container.parentNode.replaceChild(lowerCanvasEl, container);\n    }\n  }\n\n  dispose() {\n    super.dispose();\n    getEnv().dispose(this.upper.el);\n    // @ts-expect-error disposing\n    delete this.upper;\n    // @ts-expect-error disposing\n    delete this.container;\n  }\n}\n", "import { dragHandler } from '../controls/drag';\nimport { getActionFromCorner } from '../controls/util';\nimport { Point } from '../Point';\nimport { FabricObject } from '../shapes/Object/FabricObject';\nimport type {\n  CanvasEvents,\n  ModifierKey,\n  TOptionalModifierKey,\n  TPointerEvent,\n  Transform,\n} from '../EventTypeDefs';\nimport {\n  addTransformToObject,\n  saveObjectTransform,\n} from '../util/misc/objectTransforms';\nimport type { TCanvasSizeOptions } from './StaticCanvas';\nimport { StaticCanvas } from './StaticCanvas';\nimport { isCollection } from '../Collection';\nimport { isTransparent } from '../util/misc/isTransparent';\nimport type {\n  TMat2D,\n  TOriginX,\n  TOriginY,\n  TSize,\n  TSVGReviver,\n} from '../typedefs';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { getPointer, isTouchEvent } from '../util/dom_event';\nimport type { IText } from '../shapes/IText/IText';\nimport type { BaseBrush } from '../brushes/BaseBrush';\nimport { pick } from '../util/misc/pick';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { cos, createCanvasElement, sin } from '../util';\nimport { CanvasDOMManager } from './DOMManagers/CanvasDOMManager';\nimport {\n  BOTTOM,\n  CENTER,\n  LEFT,\n  MODIFIED,\n  RESIZING,\n  RIGHT,\n  ROTATE,\n  SCALE,\n  SCALE_X,\n  SCALE_Y,\n  SKEW_X,\n  SKEW_Y,\n  TOP,\n} from '../constants';\nimport type { CanvasOptions } from './CanvasOptions';\nimport { canvasDefaults } from './CanvasOptions';\nimport { Intersection } from '../Intersection';\nimport { isActiveSelection } from '../util/typeAssertions';\n\n/**\n * Canvas class\n * @class Canvas\n * @extends StaticCanvas\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\n *\n * @fires object:modified at the end of a transform\n * @fires object:rotating while an object is being rotated from the control\n * @fires object:scaling while an object is being scaled by controls\n * @fires object:moving while an object is being dragged\n * @fires object:skewing while an object is being skewed from the controls\n *\n * @fires before:transform before a transform is is started\n * @fires before:selection:cleared\n * @fires selection:cleared\n * @fires selection:updated\n * @fires selection:created\n *\n * @fires path:created after a drawing operation ends and the path is added\n * @fires mouse:down\n * @fires mouse:move\n * @fires mouse:up\n * @fires mouse:down:before  on mouse down, before the inner fabric logic runs\n * @fires mouse:move:before on mouse move, before the inner fabric logic runs\n * @fires mouse:up:before on mouse up, before the inner fabric logic runs\n * @fires mouse:over\n * @fires mouse:out\n * @fires mouse:dblclick whenever a native dbl click event fires on the canvas.\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drag:enter object drag enter\n * @fires drag:leave object drag leave\n * @fires drop:before before drop event. Prepare for the drop event (same native event).\n * @fires drop\n * @fires drop:after after drop event. Run logic on canvas after event has been accepted/declined (same native event).\n * @example\n * let a: fabric.Object, b: fabric.Object;\n * let flag = false;\n * canvas.add(a, b);\n * a.on('drop:before', opt => {\n *  //  we want a to accept the drop even though it's below b in the stack\n *  flag = this.canDrop(opt.e);\n * });\n * b.canDrop = function(e) {\n *  !flag && this.draggableTextDelegate.canDrop(e);\n * }\n * b.on('dragover', opt => b.set('fill', opt.dropTarget === b ? 'pink' : 'black'));\n * a.on('drop', opt => {\n *  opt.e.defaultPrevented  //  drop occurred\n *  opt.didDrop             //  drop occurred on canvas\n *  opt.target              //  drop target\n *  opt.target !== a && a.set('text', 'I lost');\n * });\n * canvas.on('drop:after', opt => {\n *  //  inform user who won\n *  if(!opt.e.defaultPrevented) {\n *    // no winners\n *  }\n *  else if(!opt.didDrop) {\n *    //  my objects didn't win, some other lucky object\n *  }\n *  else {\n *    //  we have a winner it's opt.target!!\n *  }\n * })\n *\n * @fires after:render at the end of the render process, receives the context in the callback\n * @fires before:render at start the render process, receives the context in the callback\n *\n * @fires contextmenu:before\n * @fires contextmenu\n * @example\n * let handler;\n * targets.forEach(target => {\n *   target.on('contextmenu:before', opt => {\n *     //  decide which target should handle the event before canvas hijacks it\n *     if (someCaseHappens && opt.targets.includes(target)) {\n *       handler = target;\n *     }\n *   });\n *   target.on('contextmenu', opt => {\n *     //  do something fantastic\n *   });\n * });\n * canvas.on('contextmenu', opt => {\n *   if (!handler) {\n *     //  no one takes responsibility, it's always left to me\n *     //  let's show them how it's done!\n *   }\n * });\n *\n */\nexport class SelectableCanvas<EventSpec extends CanvasEvents = CanvasEvents>\n  extends StaticCanvas<EventSpec>\n  implements Omit<CanvasOptions, 'enablePointerEvents'>\n{\n  declare _objects: FabricObject[];\n\n  // transform config\n  declare uniformScaling: boolean;\n  declare uniScaleKey: TOptionalModifierKey;\n  declare centeredScaling: boolean;\n  declare centeredRotation: boolean;\n  declare centeredKey: TOptionalModifierKey;\n  declare altActionKey: TOptionalModifierKey;\n\n  // selection config\n  declare selection: boolean;\n  declare selectionKey: TOptionalModifierKey | ModifierKey[];\n  declare altSelectionKey: TOptionalModifierKey;\n  declare selectionColor: string;\n  declare selectionDashArray: number[];\n  declare selectionBorderColor: string;\n  declare selectionLineWidth: number;\n  declare selectionFullyContained: boolean;\n\n  // cursors\n  declare hoverCursor: CSSStyleDeclaration['cursor'];\n  declare moveCursor: CSSStyleDeclaration['cursor'];\n  declare defaultCursor: CSSStyleDeclaration['cursor'];\n  declare freeDrawingCursor: CSSStyleDeclaration['cursor'];\n  declare notAllowedCursor: CSSStyleDeclaration['cursor'];\n\n  declare containerClass: string;\n\n  // target find config\n  declare perPixelTargetFind: boolean;\n  declare targetFindTolerance: number;\n  declare skipTargetFind: boolean;\n\n  /**\n   * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\n   * After mousedown, mousemove creates a shape,\n   * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\n   * @type Boolean\n   * @default\n   */\n  declare isDrawingMode: boolean;\n\n  declare preserveObjectStacking: boolean;\n\n  // event config\n  declare stopContextMenu: boolean;\n  declare fireRightClick: boolean;\n  declare fireMiddleClick: boolean;\n\n  /**\n   * Keep track of the subTargets for Mouse Events, ordered bottom up from innermost nested subTarget\n   * @type FabricObject[]\n   */\n  targets: FabricObject[] = [];\n\n  /**\n   * Keep track of the hovered target\n   * @type FabricObject | null\n   * @private\n   */\n  declare _hoveredTarget?: FabricObject;\n\n  /**\n   * hold the list of nested targets hovered\n   * @type FabricObject[]\n   * @private\n   */\n  _hoveredTargets: FabricObject[] = [];\n\n  /**\n   * hold the list of objects to render\n   * @type FabricObject[]\n   * @private\n   */\n  _objectsToRender?: FabricObject[];\n\n  /**\n   * hold a reference to a data structure that contains information\n   * on the current on going transform\n   * @type\n   * @private\n   */\n  _currentTransform: Transform | null = null;\n\n  /**\n   * hold a reference to a data structure used to track the selection\n   * box on canvas drag\n   * on the current on going transform\n   * x, y, deltaX and deltaY are in scene plane\n   * @type\n   * @private\n   */\n  protected _groupSelector: {\n    x: number;\n    y: number;\n    deltaX: number;\n    deltaY: number;\n  } | null = null;\n\n  /**\n   * internal flag used to understand if the context top requires a cleanup\n   * in case this is true, the contextTop will be cleared at the next render\n   * @type boolean\n   * @private\n   */\n  contextTopDirty = false;\n\n  /**\n   * During a mouse event we may need the pointer multiple times in multiple functions.\n   * _absolutePointer holds a reference to the pointer in fabricCanvas/design coordinates that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * We do this because there are some HTML DOM inspection functions to get the actual pointer coordinates\n   * @type {Point}\n   */\n  protected declare _absolutePointer?: Point;\n\n  /**\n   * During a mouse event we may need the pointer multiple times in multiple functions.\n   * _pointer holds a reference to the pointer in html coordinates that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * We do this because there are some HTML DOM inspection functions to get the actual pointer coordinates\n   * @type {Point}\n   */\n  protected declare _pointer?: Point;\n\n  /**\n   * During a mouse event we may need the target multiple times in multiple functions.\n   * _target holds a reference to the target that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * @type {FabricObject}\n   */\n  protected declare _target?: FabricObject;\n\n  static ownDefaults = canvasDefaults;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...SelectableCanvas.ownDefaults };\n  }\n\n  declare elements: CanvasDOMManager;\n  get upperCanvasEl() {\n    return this.elements.upper?.el;\n  }\n  get contextTop() {\n    return this.elements.upper?.ctx;\n  }\n  get wrapperEl() {\n    return this.elements.container;\n  }\n  private declare pixelFindCanvasEl: HTMLCanvasElement;\n  private declare pixelFindContext: CanvasRenderingContext2D;\n\n  protected declare _isCurrentlyDrawing: boolean;\n  declare freeDrawingBrush?: BaseBrush;\n  declare _activeObject?: FabricObject;\n\n  protected initElements(el?: string | HTMLCanvasElement) {\n    this.elements = new CanvasDOMManager(el, {\n      allowTouchScrolling: this.allowTouchScrolling,\n      containerClass: this.containerClass,\n    });\n    this._createCacheCanvas();\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} obj Object that was added\n   */\n  _onObjectAdded(obj: FabricObject) {\n    this._objectsToRender = undefined;\n    super._onObjectAdded(obj);\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} obj Object that was removed\n   */\n  _onObjectRemoved(obj: FabricObject) {\n    this._objectsToRender = undefined;\n    // removing active object should fire \"selection:cleared\" events\n    if (obj === this._activeObject) {\n      this.fire('before:selection:cleared', { deselected: [obj] });\n      this._discardActiveObject();\n      this.fire('selection:cleared', { deselected: [obj] });\n      obj.fire('deselected', {\n        target: obj,\n      });\n    }\n    if (obj === this._hoveredTarget) {\n      this._hoveredTarget = undefined;\n      this._hoveredTargets = [];\n    }\n    super._onObjectRemoved(obj);\n  }\n\n  _onStackOrderChanged() {\n    this._objectsToRender = undefined;\n    super._onStackOrderChanged();\n  }\n\n  /**\n   * Divides objects in two groups, one to render immediately\n   * and one to render as activeGroup.\n   * @return {Array} objects to render immediately and pushes the other in the activeGroup.\n   */\n  _chooseObjectsToRender(): FabricObject[] {\n    const activeObject = this._activeObject;\n    return !this.preserveObjectStacking && activeObject\n      ? this._objects\n          .filter((object) => !object.group && object !== activeObject)\n          .concat(activeObject)\n      : this._objects;\n  }\n\n  /**\n   * Renders both the top canvas and the secondary container canvas.\n   */\n  renderAll() {\n    this.cancelRequestedRender();\n    if (this.destroyed) {\n      return;\n    }\n    if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\n      this.clearContext(this.contextTop);\n      this.contextTopDirty = false;\n    }\n    if (this.hasLostContext) {\n      this.renderTopLayer(this.contextTop);\n      this.hasLostContext = false;\n    }\n    !this._objectsToRender &&\n      (this._objectsToRender = this._chooseObjectsToRender());\n    this.renderCanvas(this.getContext(), this._objectsToRender);\n  }\n\n  /**\n   * text selection is rendered by the active text instance during the rendering cycle\n   */\n  renderTopLayer(ctx: CanvasRenderingContext2D): void {\n    ctx.save();\n    if (this.isDrawingMode && this._isCurrentlyDrawing) {\n      this.freeDrawingBrush && this.freeDrawingBrush._render();\n      this.contextTopDirty = true;\n    }\n    // we render the top context - last object\n    if (this.selection && this._groupSelector) {\n      this._drawSelection(ctx);\n      this.contextTopDirty = true;\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Method to render only the top canvas.\n   * Also used to render the group selection box.\n   * Does not render text selection.\n   */\n  renderTop() {\n    const ctx = this.contextTop;\n    this.clearContext(ctx);\n    this.renderTopLayer(ctx);\n    // todo: how do i know if the after:render is for the top or normal contex?\n    this.fire('after:render', { ctx });\n  }\n\n  /**\n   * Set the canvas tolerance value for pixel taret find.\n   * Use only integer numbers.\n   * @private\n   */\n  setTargetFindTolerance(value: number) {\n    value = Math.round(value);\n    this.targetFindTolerance = value;\n    const retina = this.getRetinaScaling();\n    const size = Math.ceil((value * 2 + 1) * retina);\n    this.pixelFindCanvasEl.width = this.pixelFindCanvasEl.height = size;\n    this.pixelFindContext.scale(retina, retina);\n  }\n\n  /**\n   * Returns true if object is transparent at a certain location\n   * Clarification: this is `is target transparent at location X or are controls there`\n   * @TODO this seems dumb that we treat controls with transparency. we can find controls\n   * programmatically without painting them, the cache canvas optimization is always valid\n   * @param {FabricObject} target Object to check\n   * @param {Number} x Left coordinate in viewport space\n   * @param {Number} y Top coordinate in viewport space\n   * @return {Boolean}\n   */\n  isTargetTransparent(target: FabricObject, x: number, y: number): boolean {\n    const tolerance = this.targetFindTolerance;\n    const ctx = this.pixelFindContext;\n    this.clearContext(ctx);\n    ctx.save();\n    ctx.translate(-x + tolerance, -y + tolerance);\n    ctx.transform(...this.viewportTransform);\n    const selectionBgc = target.selectionBackgroundColor;\n    target.selectionBackgroundColor = '';\n    target.render(ctx);\n    target.selectionBackgroundColor = selectionBgc;\n    ctx.restore();\n    // our canvas is square, and made around tolerance.\n    // so tolerance in this case also represent the center of the canvas.\n    const enhancedTolerance = Math.round(tolerance * this.getRetinaScaling());\n    return isTransparent(\n      ctx,\n      enhancedTolerance,\n      enhancedTolerance,\n      enhancedTolerance,\n    );\n  }\n\n  /**\n   * takes an event and determines if selection key has been pressed\n   * @private\n   * @param {TPointerEvent} e Event object\n   */\n  _isSelectionKeyPressed(e: TPointerEvent): boolean {\n    const sKey = this.selectionKey;\n    if (!sKey) {\n      return false;\n    }\n    if (Array.isArray(sKey)) {\n      return !!sKey.find((key) => !!key && e[key] === true);\n    } else {\n      return e[sKey];\n    }\n  }\n\n  /**\n   * @private\n   * @param {TPointerEvent} e Event object\n   * @param {FabricObject} target\n   */\n  _shouldClearSelection(\n    e: TPointerEvent,\n    target?: FabricObject,\n  ): target is undefined {\n    const activeObjects = this.getActiveObjects(),\n      activeObject = this._activeObject;\n\n    return !!(\n      !target ||\n      (target &&\n        activeObject &&\n        activeObjects.length > 1 &&\n        activeObjects.indexOf(target) === -1 &&\n        activeObject !== target &&\n        !this._isSelectionKeyPressed(e)) ||\n      (target && !target.evented) ||\n      (target && !target.selectable && activeObject && activeObject !== target)\n    );\n  }\n\n  /**\n   * This method will take in consideration a modifier key pressed and the control we are\n   * about to drag, and try to guess the anchor point ( origin ) of the transormation.\n   * This should be really in the realm of controls, and we should remove specific code for legacy\n   * embedded actions.\n   * @TODO this probably deserve discussion/rediscovery and change/refactor\n   * @private\n   * @deprecated\n   * @param {FabricObject} target\n   * @param {string} action\n   * @param {boolean} altKey\n   * @returns {boolean} true if the transformation should be centered\n   */\n  private _shouldCenterTransform(\n    target: FabricObject,\n    action: string,\n    modifierKeyPressed: boolean,\n  ) {\n    if (!target) {\n      return;\n    }\n\n    let centerTransform;\n\n    if (\n      action === SCALE ||\n      action === SCALE_X ||\n      action === SCALE_Y ||\n      action === RESIZING\n    ) {\n      centerTransform = this.centeredScaling || target.centeredScaling;\n    } else if (action === ROTATE) {\n      centerTransform = this.centeredRotation || target.centeredRotation;\n    }\n\n    return centerTransform ? !modifierKeyPressed : modifierKeyPressed;\n  }\n\n  /**\n   * Given the control clicked, determine the origin of the transform.\n   * This is bad because controls can totally have custom names\n   * should disappear before release 4.0\n   * @private\n   * @deprecated\n   */\n  _getOriginFromCorner(\n    target: FabricObject,\n    controlName: string,\n  ): { x: TOriginX; y: TOriginY } {\n    const origin = {\n      x: target.originX,\n      y: target.originY,\n    };\n\n    if (!controlName) {\n      return origin;\n    }\n\n    // is a left control ?\n    if (['ml', 'tl', 'bl'].includes(controlName)) {\n      origin.x = RIGHT;\n      // is a right control ?\n    } else if (['mr', 'tr', 'br'].includes(controlName)) {\n      origin.x = LEFT;\n    }\n    // is a top control ?\n    if (['tl', 'mt', 'tr'].includes(controlName)) {\n      origin.y = BOTTOM;\n      // is a bottom control ?\n    } else if (['bl', 'mb', 'br'].includes(controlName)) {\n      origin.y = TOP;\n    }\n    return origin;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object\n   * @param {FabricObject} target\n   * @param {boolean} [alreadySelected] pass true to setup the active control\n   */\n  _setupCurrentTransform(\n    e: TPointerEvent,\n    target: FabricObject,\n    alreadySelected: boolean,\n  ): void {\n    const pointer = target.group\n      ? // transform pointer to target's containing coordinate plane\n        sendPointToPlane(\n          this.getScenePoint(e),\n          undefined,\n          target.group.calcTransformMatrix(),\n        )\n      : this.getScenePoint(e);\n    const { key: corner = '', control } = target.getActiveControl() || {},\n      actionHandler =\n        alreadySelected && control\n          ? control.getActionHandler(e, target, control)?.bind(control)\n          : dragHandler,\n      action = getActionFromCorner(alreadySelected, corner, e, target),\n      altKey = e[this.centeredKey as ModifierKey],\n      origin = this._shouldCenterTransform(target, action, altKey)\n        ? ({ x: CENTER, y: CENTER } as const)\n        : this._getOriginFromCorner(target, corner),\n      /**\n       * relative to target's containing coordinate plane\n       * both agree on every point\n       **/\n      transform: Transform = {\n        target: target,\n        action,\n        actionHandler,\n        actionPerformed: false,\n        corner,\n        scaleX: target.scaleX,\n        scaleY: target.scaleY,\n        skewX: target.skewX,\n        skewY: target.skewY,\n        offsetX: pointer.x - target.left,\n        offsetY: pointer.y - target.top,\n        originX: origin.x,\n        originY: origin.y,\n        ex: pointer.x,\n        ey: pointer.y,\n        lastX: pointer.x,\n        lastY: pointer.y,\n        theta: degreesToRadians(target.angle),\n        width: target.width,\n        height: target.height,\n        shiftKey: e.shiftKey,\n        altKey,\n        original: {\n          ...saveObjectTransform(target),\n          originX: origin.x,\n          originY: origin.y,\n        },\n      };\n\n    this._currentTransform = transform;\n\n    this.fire('before:transform', {\n      e,\n      transform,\n    });\n  }\n\n  /**\n   * Set the cursor type of the canvas element\n   * @param {String} value Cursor type of the canvas element.\n   * @see http://www.w3.org/TR/css3-ui/#cursor\n   */\n  setCursor(value: CSSStyleDeclaration['cursor']): void {\n    this.upperCanvasEl.style.cursor = value;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx to draw the selection on\n   */\n  _drawSelection(ctx: CanvasRenderingContext2D): void {\n    const { x, y, deltaX, deltaY } = this._groupSelector!,\n      start = new Point(x, y).transform(this.viewportTransform),\n      extent = new Point(x + deltaX, y + deltaY).transform(\n        this.viewportTransform,\n      ),\n      strokeOffset = this.selectionLineWidth / 2;\n    let minX = Math.min(start.x, extent.x),\n      minY = Math.min(start.y, extent.y),\n      maxX = Math.max(start.x, extent.x),\n      maxY = Math.max(start.y, extent.y);\n\n    if (this.selectionColor) {\n      ctx.fillStyle = this.selectionColor;\n      ctx.fillRect(minX, minY, maxX - minX, maxY - minY);\n    }\n\n    if (!this.selectionLineWidth || !this.selectionBorderColor) {\n      return;\n    }\n    ctx.lineWidth = this.selectionLineWidth;\n    ctx.strokeStyle = this.selectionBorderColor;\n\n    minX += strokeOffset;\n    minY += strokeOffset;\n    maxX -= strokeOffset;\n    maxY -= strokeOffset;\n    // selection border\n    // @TODO: is _setLineDash still necessary on modern canvas?\n    FabricObject.prototype._setLineDash.call(\n      this,\n      ctx,\n      this.selectionDashArray,\n    );\n    ctx.strokeRect(minX, minY, maxX - minX, maxY - minY);\n  }\n\n  /**\n   * Method that determines what object we are clicking on\n   * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target\n   * or the outside part of the corner.\n   * @param {Event} e mouse event\n   * @return {FabricObject | null} the target found\n   */\n  findTarget(e: TPointerEvent): FabricObject | undefined {\n    if (this.skipTargetFind) {\n      return undefined;\n    }\n\n    const pointer = this.getViewportPoint(e),\n      activeObject = this._activeObject,\n      aObjects = this.getActiveObjects();\n\n    this.targets = [];\n\n    if (activeObject && aObjects.length >= 1) {\n      if (activeObject.findControl(pointer, isTouchEvent(e))) {\n        // if we hit the corner of the active object, let's return that.\n        return activeObject;\n      } else if (\n        aObjects.length > 1 &&\n        // check pointer is over active selection and possibly perform `subTargetCheck`\n        this.searchPossibleTargets([activeObject], pointer)\n      ) {\n        // active selection does not select sub targets like normal groups\n        return activeObject;\n      } else if (\n        activeObject === this.searchPossibleTargets([activeObject], pointer)\n      ) {\n        // active object is not an active selection\n        if (!this.preserveObjectStacking) {\n          return activeObject;\n        } else {\n          const subTargets = this.targets;\n          this.targets = [];\n          const target = this.searchPossibleTargets(this._objects, pointer);\n          if (\n            e[this.altSelectionKey as ModifierKey] &&\n            target &&\n            target !== activeObject\n          ) {\n            // alt selection: select active object even though it is not the top most target\n            // restore targets\n            this.targets = subTargets;\n            return activeObject;\n          }\n          return target;\n        }\n      }\n    }\n\n    return this.searchPossibleTargets(this._objects, pointer);\n  }\n\n  /**\n   * Checks if the point is inside the object selection area including padding\n   * @param {FabricObject} obj Object to test against\n   * @param {Object} [pointer] point in scene coordinates\n   * @return {Boolean} true if point is contained within an area of given object\n   * @private\n   */\n  private _pointIsInObjectSelectionArea(obj: FabricObject, point: Point) {\n    // getCoords will already take care of group de-nesting\n    let coords = obj.getCoords();\n    const viewportZoom = this.getZoom();\n    const padding = obj.padding / viewportZoom;\n    if (padding) {\n      const [tl, tr, br, bl] = coords;\n      // what is the angle of the object?\n      // we could use getTotalAngle, but is way easier to look at it\n      // from how coords are oriented, since if something went wrong\n      // at least we are consistent.\n      const angleRadians = Math.atan2(tr.y - tl.y, tr.x - tl.x),\n        cosP = cos(angleRadians) * padding,\n        sinP = sin(angleRadians) * padding,\n        cosPSinP = cosP + sinP,\n        cosPMinusSinP = cosP - sinP;\n\n      coords = [\n        new Point(tl.x - cosPMinusSinP, tl.y - cosPSinP),\n        new Point(tr.x + cosPSinP, tr.y - cosPMinusSinP),\n        new Point(br.x + cosPMinusSinP, br.y + cosPSinP),\n        new Point(bl.x - cosPSinP, bl.y + cosPMinusSinP),\n      ];\n      // in case of padding we calculate the new coords on the fly.\n      // otherwise we have to maintain 2 sets of coordinates for everything.\n      // we can reiterate on storing them.\n      // if this is slow, for now the semplification is large and doesn't impact\n      // rendering.\n      // the idea behind this is that outside target check we don't need ot know\n      // where those coords are\n    }\n    return Intersection.isPointInPolygon(point, coords);\n  }\n\n  /**\n   * Checks point is inside the object selection condition. Either area with padding\n   * or over pixels if perPixelTargetFind is enabled\n   * @param {FabricObject} obj Object to test against\n   * @param {Object} [pointer] point from viewport.\n   * @return {Boolean} true if point is contained within an area of given object\n   * @private\n   */\n  _checkTarget(obj: FabricObject, pointer: Point): boolean {\n    if (\n      obj &&\n      obj.visible &&\n      obj.evented &&\n      this._pointIsInObjectSelectionArea(\n        obj,\n        sendPointToPlane(pointer, undefined, this.viewportTransform),\n      )\n    ) {\n      if (\n        (this.perPixelTargetFind || obj.perPixelTargetFind) &&\n        !(obj as unknown as IText).isEditing\n      ) {\n        if (!this.isTargetTransparent(obj, pointer.x, pointer.y)) {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Internal Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n   * @param {Array} [objects] objects array to look into\n   * @param {Object} [pointer] x,y object of point coordinates we want to check.\n   * @return {FabricObject} **top most object from given `objects`** that contains pointer\n   * @private\n   */\n  _searchPossibleTargets(\n    objects: FabricObject[],\n    pointer: Point,\n  ): FabricObject | undefined {\n    // Cache all targets where their bounding box contains point.\n    let i = objects.length;\n    // Do not check for currently grouped objects, since we check the parent group itself.\n    // until we call this function specifically to search inside the activeGroup\n    while (i--) {\n      const target = objects[i];\n      if (this._checkTarget(target, pointer)) {\n        if (isCollection(target) && target.subTargetCheck) {\n          const subTarget = this._searchPossibleTargets(\n            target._objects as FabricObject[],\n            pointer,\n          );\n          subTarget && this.targets.push(subTarget);\n        }\n        return target;\n      }\n    }\n  }\n\n  /**\n   * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n   * @see {@link _searchPossibleTargets}\n   * @param {FabricObject[]} [objects] objects array to look into\n   * @param {Point} [pointer] coordinates from viewport to check.\n   * @return {FabricObject} **top most object on screen** that contains pointer\n   */\n  searchPossibleTargets(\n    objects: FabricObject[],\n    pointer: Point,\n  ): FabricObject | undefined {\n    const target = this._searchPossibleTargets(objects, pointer);\n\n    // if we found something in this.targets, and the group is interactive, return the innermost subTarget\n    // that is still interactive\n    // TODO: reverify why interactive. the target should be returned always, but selected only\n    // if interactive.\n    if (\n      target &&\n      isCollection(target) &&\n      target.interactive &&\n      this.targets[0]\n    ) {\n      /** targets[0] is the innermost nested target, but it could be inside non interactive groups and so not a selection target */\n      const targets = this.targets;\n      for (let i = targets.length - 1; i > 0; i--) {\n        const t = targets[i];\n        if (!(isCollection(t) && t.interactive)) {\n          // one of the subtargets was not interactive. that is the last subtarget we can return.\n          // we can't dig more deep;\n          return t;\n        }\n      }\n      return targets[0];\n    }\n\n    return target;\n  }\n\n  /**\n   * @returns point existing in the same plane as the {@link HTMLCanvasElement},\n   * `(0, 0)` being the top left corner of the {@link HTMLCanvasElement}.\n   * This means that changes to the {@link viewportTransform} do not change the values of the point\n   * and it remains unchanged from the viewer's perspective.\n   *\n   * @example\n   * const scenePoint = sendPointToPlane(\n   *  this.getViewportPoint(e),\n   *  undefined,\n   *  canvas.viewportTransform\n   * );\n   *\n   */\n  getViewportPoint(e: TPointerEvent) {\n    if (this._pointer) {\n      return this._pointer;\n    }\n    return this.getPointer(e, true);\n  }\n\n  /**\n   * @returns point existing in the scene (the same plane as the plane {@link FabricObject#getCenterPoint} exists in).\n   * This means that changes to the {@link viewportTransform} do not change the values of the point,\n   * however, from the viewer's perspective, the point is changed.\n   *\n   * @example\n   * const viewportPoint = sendPointToPlane(\n   *  this.getScenePoint(e),\n   *  canvas.viewportTransform\n   * );\n   *\n   */\n  getScenePoint(e: TPointerEvent) {\n    if (this._absolutePointer) {\n      return this._absolutePointer;\n    }\n    return this.getPointer(e);\n  }\n\n  /**\n   * Returns pointer relative to canvas.\n   *\n   * @deprecated This method is deprecated since v6 to protect you from misuse.\n   * Use {@link getViewportPoint} or {@link getScenePoint} instead.\n   *\n   * @param {Event} e\n   * @param {Boolean} [fromViewport] whether to return the point from the viewport or in the scene\n   * @return {Point}\n   */\n  getPointer(e: TPointerEvent, fromViewport = false): Point {\n    const upperCanvasEl = this.upperCanvasEl,\n      bounds = upperCanvasEl.getBoundingClientRect();\n    let pointer = getPointer(e),\n      boundsWidth = bounds.width || 0,\n      boundsHeight = bounds.height || 0;\n\n    if (!boundsWidth || !boundsHeight) {\n      if (TOP in bounds && BOTTOM in bounds) {\n        boundsHeight = Math.abs(bounds.top - bounds.bottom);\n      }\n      if (RIGHT in bounds && LEFT in bounds) {\n        boundsWidth = Math.abs(bounds.right - bounds.left);\n      }\n    }\n\n    this.calcOffset();\n    pointer.x = pointer.x - this._offset.left;\n    pointer.y = pointer.y - this._offset.top;\n    if (!fromViewport) {\n      pointer = sendPointToPlane(pointer, undefined, this.viewportTransform);\n    }\n\n    const retinaScaling = this.getRetinaScaling();\n    if (retinaScaling !== 1) {\n      pointer.x /= retinaScaling;\n      pointer.y /= retinaScaling;\n    }\n\n    // If bounds are not available (i.e. not visible), do not apply scale.\n    const cssScale =\n      boundsWidth === 0 || boundsHeight === 0\n        ? new Point(1, 1)\n        : new Point(\n            upperCanvasEl.width / boundsWidth,\n            upperCanvasEl.height / boundsHeight,\n          );\n\n    return pointer.multiply(cssScale);\n  }\n\n  /**\n   * Internal use only\n   * @protected\n   */\n  protected _setDimensionsImpl(\n    dimensions: TSize,\n    options?: TCanvasSizeOptions,\n  ) {\n    // @ts-expect-error this method exists in the subclass - should be moved or declared as abstract\n    this._resetTransformEventData();\n    super._setDimensionsImpl(dimensions, options);\n    if (this._isCurrentlyDrawing) {\n      this.freeDrawingBrush &&\n        this.freeDrawingBrush._setBrushStyles(this.contextTop);\n    }\n  }\n\n  protected _createCacheCanvas() {\n    this.pixelFindCanvasEl = createCanvasElement();\n    this.pixelFindContext = this.pixelFindCanvasEl.getContext('2d', {\n      willReadFrequently: true,\n    })!;\n    this.setTargetFindTolerance(this.targetFindTolerance);\n  }\n\n  /**\n   * Returns context of top canvas where interactions are drawn\n   * @returns {CanvasRenderingContext2D}\n   */\n  getTopContext(): CanvasRenderingContext2D {\n    return this.elements.upper.ctx;\n  }\n\n  /**\n   * Returns context of canvas where object selection is drawn\n   * @alias\n   * @return {CanvasRenderingContext2D}\n   */\n  getSelectionContext(): CanvasRenderingContext2D {\n    return this.elements.upper.ctx;\n  }\n\n  /**\n   * Returns &lt;canvas> element on which object selection is drawn\n   * @return {HTMLCanvasElement}\n   */\n  getSelectionElement(): HTMLCanvasElement {\n    return this.elements.upper.el;\n  }\n\n  /**\n   * Returns currently active object\n   * @return {FabricObject | null} active object\n   */\n  getActiveObject(): FabricObject | undefined {\n    return this._activeObject;\n  }\n\n  /**\n   * Returns an array with the current selected objects\n   * @return {FabricObject[]} active objects array\n   */\n  getActiveObjects(): FabricObject[] {\n    const active = this._activeObject;\n    return isActiveSelection(active)\n      ? active.getObjects()\n      : active\n        ? [active]\n        : [];\n  }\n\n  /**\n   * @private\n   * Compares the old activeObject with the current one and fires correct events\n   * @param {FabricObject[]} oldObjects old activeObject\n   * @param {TPointerEvent} e mouse event triggering the selection events\n   */\n  _fireSelectionEvents(oldObjects: FabricObject[], e?: TPointerEvent) {\n    let somethingChanged = false,\n      invalidate = false;\n    const objects = this.getActiveObjects(),\n      added: FabricObject[] = [],\n      removed: FabricObject[] = [];\n\n    oldObjects.forEach((target) => {\n      if (!objects.includes(target)) {\n        somethingChanged = true;\n        target.fire('deselected', {\n          e,\n          target,\n        });\n        removed.push(target);\n      }\n    });\n\n    objects.forEach((target) => {\n      if (!oldObjects.includes(target)) {\n        somethingChanged = true;\n        target.fire('selected', {\n          e,\n          target,\n        });\n        added.push(target);\n      }\n    });\n\n    if (oldObjects.length > 0 && objects.length > 0) {\n      invalidate = true;\n      somethingChanged &&\n        this.fire('selection:updated', {\n          e,\n          selected: added,\n          deselected: removed,\n        });\n    } else if (objects.length > 0) {\n      invalidate = true;\n      this.fire('selection:created', {\n        e,\n        selected: added,\n      });\n    } else if (oldObjects.length > 0) {\n      invalidate = true;\n      this.fire('selection:cleared', {\n        e,\n        deselected: removed,\n      });\n    }\n    invalidate && (this._objectsToRender = undefined);\n  }\n\n  /**\n   * Sets given object as the only active object on canvas\n   * @param {FabricObject} object Object to set as an active one\n   * @param {TPointerEvent} [e] Event (passed along when firing \"object:selected\")\n   * @return {Boolean} true if the object has been selected\n   */\n  setActiveObject(object: FabricObject, e?: TPointerEvent) {\n    // we can't inline this, since _setActiveObject will change what getActiveObjects returns\n    const currentActives = this.getActiveObjects();\n    const selected = this._setActiveObject(object, e);\n    this._fireSelectionEvents(currentActives, e);\n    return selected;\n  }\n\n  /**\n   * This is supposed to be equivalent to setActiveObject but without firing\n   * any event. There is commitment to have this stay this way.\n   * This is the functional part of setActiveObject.\n   * @param {Object} object to set as active\n   * @param {Event} [e] Event (passed along when firing \"object:selected\")\n   * @return {Boolean} true if the object has been selected\n   */\n  _setActiveObject(object: FabricObject, e?: TPointerEvent) {\n    const prevActiveObject = this._activeObject;\n    if (prevActiveObject === object) {\n      return false;\n    }\n    // after calling this._discardActiveObject, this,_activeObject could be undefined\n    if (!this._discardActiveObject(e, object) && this._activeObject) {\n      // refused to deselect\n      return false;\n    }\n    if (object.onSelect({ e })) {\n      return false;\n    }\n\n    this._activeObject = object;\n\n    if (isActiveSelection(object) && prevActiveObject !== object) {\n      object.set('canvas', this);\n    }\n    object.setCoords();\n\n    return true;\n  }\n\n  /**\n   * This is supposed to be equivalent to discardActiveObject but without firing\n   * any selection events ( can still fire object transformation events ). There is commitment to have this stay this way.\n   * This is the functional part of discardActiveObject.\n   * @param {Event} [e] Event (passed along when firing \"object:deselected\")\n   * @param {Object} object the next object to set as active, reason why we are discarding this\n   * @return {Boolean} true if the active object has been discarded\n   */\n  _discardActiveObject(\n    e?: TPointerEvent,\n    object?: FabricObject,\n  ): this is { _activeObject: undefined } {\n    const obj = this._activeObject;\n    if (obj) {\n      // onDeselect return TRUE to cancel selection;\n      if (obj.onDeselect({ e, object })) {\n        return false;\n      }\n      if (this._currentTransform && this._currentTransform.target === obj) {\n        this.endCurrentTransform(e);\n      }\n      if (isActiveSelection(obj) && obj === this._hoveredTarget) {\n        this._hoveredTarget = undefined;\n      }\n      this._activeObject = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Discards currently active object and fire events. If the function is called by fabric\n   * as a consequence of a mouse event, the event is passed as a parameter and\n   * sent to the fire function for the custom events. When used as a method the\n   * e param does not have any application.\n   * @param {event} e\n   * @return {Boolean} true if the active object has been discarded\n   */\n  discardActiveObject(e?: TPointerEvent): this is { _activeObject: undefined } {\n    const currentActives = this.getActiveObjects(),\n      activeObject = this.getActiveObject();\n    if (currentActives.length) {\n      this.fire('before:selection:cleared', {\n        e,\n        deselected: [activeObject!],\n      });\n    }\n    const discarded = this._discardActiveObject(e);\n    this._fireSelectionEvents(currentActives, e);\n    return discarded;\n  }\n\n  /**\n   * End the current transform.\n   * You don't usually need to call this method unless you are interrupting a user initiated transform\n   * because of some other event ( a press of key combination, or something that block the user UX )\n   * @param {Event} [e] send the mouse event that generate the finalize down, so it can be used in the event\n   */\n  endCurrentTransform(e?: TPointerEvent) {\n    const transform = this._currentTransform;\n    this._finalizeCurrentTransform(e);\n    if (transform && transform.target) {\n      // this could probably go inside _finalizeCurrentTransform\n      transform.target.isMoving = false;\n    }\n    this._currentTransform = null;\n  }\n\n  /**\n   * @private\n   * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\n   */\n  _finalizeCurrentTransform(e?: TPointerEvent) {\n    const transform = this._currentTransform!,\n      target = transform.target,\n      options = {\n        e,\n        target,\n        transform,\n        action: transform.action,\n      };\n\n    if (target._scaling) {\n      target._scaling = false;\n    }\n\n    target.setCoords();\n\n    if (transform.actionPerformed) {\n      this.fire('object:modified', options);\n      target.fire(MODIFIED, options);\n    }\n  }\n\n  /**\n   * Sets viewport transformation of this canvas instance\n   * @param {Array} vpt a Canvas 2D API transform matrix\n   */\n  setViewportTransform(vpt: TMat2D) {\n    super.setViewportTransform(vpt);\n    const activeObject = this._activeObject;\n    if (activeObject) {\n      activeObject.setCoords();\n    }\n  }\n\n  /**\n   * @override clears active selection ref and interactive canvas elements and contexts\n   */\n  destroy() {\n    // dispose of active selection\n    const activeObject = this._activeObject;\n    if (isActiveSelection(activeObject)) {\n      activeObject.removeAll();\n      activeObject.dispose();\n    }\n\n    delete this._activeObject;\n\n    super.destroy();\n\n    // free resources\n\n    // pixel find canvas\n    // @ts-expect-error disposing\n    this.pixelFindContext = null;\n    // @ts-expect-error disposing\n    this.pixelFindCanvasEl = undefined;\n  }\n\n  /**\n   * Clears all contexts (background, main, top) of an instance\n   */\n  clear() {\n    // discard active object and fire events\n    this.discardActiveObject();\n    // make sure we clear the active object in case it refused to be discarded\n    this._activeObject = undefined;\n    this.clearContext(this.contextTop);\n    super.clear();\n  }\n\n  /**\n   * Draws objects' controls (borders/controls)\n   * @param {CanvasRenderingContext2D} ctx Context to render controls on\n   */\n  drawControls(ctx: CanvasRenderingContext2D) {\n    const activeObject = this._activeObject;\n\n    if (activeObject) {\n      activeObject._renderControls(ctx);\n    }\n  }\n\n  /**\n   * @private\n   */\n  protected _toObject(\n    instance: FabricObject,\n    methodName: 'toObject' | 'toDatalessObject',\n    propertiesToInclude: string[],\n  ): Record<string, any> {\n    // If the object is part of the current selection group, it should\n    // be transformed appropriately\n    // i.e. it should be serialised as it would appear if the selection group\n    // were to be destroyed.\n    const originalProperties = this._realizeGroupTransformOnObject(instance),\n      object = super._toObject(instance, methodName, propertiesToInclude);\n    //Undo the damage we did by changing all of its properties\n    instance.set(originalProperties);\n    return object;\n  }\n\n  /**\n   * Realizes an object's group transformation on it\n   * @private\n   * @param {FabricObject} [instance] the object to transform (gets mutated)\n   * @returns the original values of instance which were changed\n   */\n  private _realizeGroupTransformOnObject(\n    instance: FabricObject,\n  ): Partial<typeof instance> {\n    const { group } = instance;\n    if (group && isActiveSelection(group) && this._activeObject === group) {\n      const layoutProps = [\n        'angle',\n        'flipX',\n        'flipY',\n        LEFT,\n        SCALE_X,\n        SCALE_Y,\n        SKEW_X,\n        SKEW_Y,\n        TOP,\n      ] as (keyof typeof instance)[];\n      const originalValues = pick<typeof instance>(instance, layoutProps);\n      addTransformToObject(instance, group.calcOwnMatrix());\n      return originalValues;\n    } else {\n      return {};\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setSVGObject(\n    markup: string[],\n    instance: FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    // If the object is in a selection group, simulate what would happen to that\n    // object when the group is deselected\n    const originalProperties = this._realizeGroupTransformOnObject(instance);\n    super._setSVGObject(markup, instance, reviver);\n    instance.set(originalProperties);\n  }\n}\n", "import type { ModifierKey, TOptionalModifierKey } from '../EventTypeDefs';\nimport type { TOptions } from '../typedefs';\nimport type { StaticCanvasOptions } from './StaticCanvasOptions';\n\nexport interface CanvasTransformOptions {\n  /**\n   * When true, objects can be transformed by one side (unproportionately)\n   * when dragged on the corners that normally would not do that.\n   * @type Boolean\n   * @default\n   * @since fabric 4.0 // changed name and default value\n   */\n  uniformScaling: boolean;\n\n  /**\n   * Indicates which key switches uniform scaling.\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled.\n   * totally wrong named. this sounds like `uniform scaling`\n   * if Canvas.uniformScaling is true, pressing this will set it to false\n   * and viceversa.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  uniScaleKey: TOptionalModifierKey;\n\n  /**\n   * When true, objects use center point as the origin of scale transformation.\n   * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n   * @since 1.3.4\n   * @type Boolean\n   * @default\n   */\n  centeredScaling: boolean;\n\n  /**\n   * When true, objects use center point as the origin of rotate transformation.\n   * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n   * @since 1.3.4\n   * @type Boolean\n   * @default\n   */\n  centeredRotation: boolean;\n\n  /**\n   * Indicates which key enable centered Transform\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled feature disabled.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  centeredKey: TOptionalModifierKey;\n\n  /**\n   * Indicates which key enable alternate action on corner\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled feature disabled.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  altActionKey: TOptionalModifierKey;\n}\n\nexport interface CanvasSelectionOptions {\n  /**\n   * Indicates whether group selection should be enabled\n   * @type Boolean\n   * @default\n   */\n  selection: boolean;\n\n  /**\n   * Indicates which key or keys enable multiple click selection\n   * Pass value as a string or array of strings\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or empty or containing any other string that is not a modifier key\n   * feature is disabled.\n   * @since 1.6.2\n   * @type ModifierKey|ModifierKey[]\n   * @default\n   */\n  selectionKey: TOptionalModifierKey | ModifierKey[];\n\n  /**\n   * Indicates which key enable alternative selection\n   * in case of target overlapping with active object\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * For a series of reason that come from the general expectations on how\n   * things should work, this feature works only for preserveObjectStacking true.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled.\n   * @since 1.6.5\n   * @type null|ModifierKey\n   * @default\n   */\n  altSelectionKey: TOptionalModifierKey;\n\n  /**\n   * Color of selection\n   * @type String\n   * @default\n   */\n  selectionColor: string;\n\n  /**\n   * Default dash array pattern\n   * If not empty the selection border is dashed\n   * @type Array\n   */\n  selectionDashArray: number[];\n\n  /**\n   * Color of the border of selection (usually slightly darker than color of selection itself)\n   * @type String\n   * @default\n   */\n  selectionBorderColor: string;\n\n  /**\n   * Width of a line used in object/group selection\n   * @type Number\n   * @default\n   */\n  selectionLineWidth: number;\n\n  /**\n   * Select only shapes that are fully contained in the dragged selection rectangle.\n   * @type Boolean\n   * @default\n   */\n  selectionFullyContained: boolean;\n}\n\nexport interface CanvasCursorOptions {\n  /**\n   * Default cursor value used when hovering over an object on canvas\n   * @type CSSStyleDeclaration['cursor']\n   * @default move\n   */\n  hoverCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Default cursor value used when moving an object on canvas\n   * @type CSSStyleDeclaration['cursor']\n   * @default move\n   */\n  moveCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Default cursor value used for the entire canvas\n   * @type String\n   * @default default\n   */\n  defaultCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Cursor value used during free drawing\n   * @type String\n   * @default crosshair\n   */\n  freeDrawingCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Cursor value used for disabled elements ( corners with disabled action )\n   * @type String\n   * @since 2.0.0\n   * @default not-allowed\n   */\n  notAllowedCursor: CSSStyleDeclaration['cursor'];\n}\n\nexport interface TargetFindOptions {\n  /**\n   * When true, object detection happens on per-pixel basis rather than on per-bounding-box\n   * @type Boolean\n   * @default\n   */\n  perPixelTargetFind: boolean;\n\n  /**\n   * Number of pixels around target pixel to tolerate (consider active) during object detection\n   * @type Number\n   * @default\n   */\n  targetFindTolerance: number;\n\n  /**\n   * When true, target detection is skipped. Target detection will return always undefined.\n   * click selection won't work anymore, events will fire with no targets.\n   * if something is selected before setting it to true, it will be deselected at the first click.\n   * area selection will still work. check the `selection` property too.\n   * if you deactivate both, you should look into staticCanvas.\n   * @type Boolean\n   * @default\n   */\n  skipTargetFind: boolean;\n}\n\nexport interface CanvasEventsOptions {\n  /**\n   * Indicates if the right click on canvas can output the context menu or not\n   * @type Boolean\n   * @since 1.6.5\n   * @default\n   */\n  stopContextMenu: boolean;\n\n  /**\n   * Indicates if the canvas can fire right click events\n   * @type Boolean\n   * @since 1.6.5\n   * @default\n   */\n  fireRightClick: boolean;\n\n  /**\n   * Indicates if the canvas can fire middle click events\n   * @type Boolean\n   * @since 1.7.8\n   * @default\n   */\n  fireMiddleClick: boolean;\n\n  /**\n   * When the option is enabled, PointerEvent is used instead of TPointerEvent.\n   * @type Boolean\n   * @default\n   */\n  enablePointerEvents: boolean;\n}\n\nexport interface CanvasOptions\n  extends StaticCanvasOptions,\n    CanvasTransformOptions,\n    CanvasSelectionOptions,\n    CanvasCursorOptions,\n    TargetFindOptions,\n    CanvasEventsOptions {\n  /**\n   * Default element class that's given to wrapper (div) element of canvas\n   * @type String\n   * @default\n   * @deprecated customize {@link CanvasDOMManager} instead or access {@link elements} directly\n   */\n  containerClass: string;\n\n  /**\n   * Indicates whether objects should remain in current stack position when selected.\n   * When false objects are brought to top and rendered as part of the selection group\n   * @type Boolean\n   * @default\n   */\n  preserveObjectStacking: boolean;\n}\n\nexport type TCanvasOptions = TOptions<CanvasOptions>;\n\nexport const canvasDefaults: TOptions<CanvasOptions> = {\n  uniformScaling: true,\n  uniScaleKey: 'shiftKey',\n  centeredScaling: false,\n  centeredRotation: false,\n  centeredKey: 'altKey',\n  altActionKey: 'shiftKey',\n\n  selection: true,\n  selectionKey: 'shiftKey',\n  selectionColor: 'rgba(100, 100, 255, 0.3)',\n  selectionDashArray: [],\n  selectionBorderColor: 'rgba(255, 255, 255, 0.3)',\n  selectionLineWidth: 1,\n  selectionFullyContained: false,\n\n  hoverCursor: 'move',\n  moveCursor: 'move',\n  defaultCursor: 'default',\n  freeDrawingCursor: 'crosshair',\n  notAllowedCursor: 'not-allowed',\n\n  perPixelTargetFind: false,\n  targetFindTolerance: 0,\n  skipTargetFind: false,\n\n  stopContextMenu: false,\n  fireRightClick: false,\n  fireMiddleClick: false,\n  enablePointerEvents: false,\n\n  containerClass: 'canvas-container',\n  // turn to true for fabric 7.0\n  preserveObjectStacking: false,\n};\n", "import type { TPointerEvent } from '../EventTypeDefs';\nimport type { ITextBehavior } from '../shapes/IText/ITextBehavior';\nimport { removeFromArray } from '../util/internals/removeFromArray';\nimport type { Canvas } from './Canvas';\n\n/**\n * In charge of synchronizing all interactive text instances of a canvas\n */\nexport class TextEditingManager {\n  private targets: ITextBehavior[] = [];\n  private declare target?: ITextBehavior;\n  private __disposer: VoidFunction;\n\n  constructor(canvas: Canvas) {\n    const cb = () => {\n      const { hiddenTextarea } =\n        (canvas.getActiveObject() as ITextBehavior) || {};\n      hiddenTextarea && hiddenTextarea.focus();\n    };\n    const el = canvas.upperCanvasEl;\n    el.addEventListener('click', cb);\n    this.__disposer = () => el.removeEventListener('click', cb);\n  }\n\n  exitTextEditing() {\n    this.target = undefined;\n    this.targets.forEach((target) => {\n      if (target.isEditing) {\n        target.exitEditing();\n      }\n    });\n  }\n\n  add(target: ITextBehavior) {\n    this.targets.push(target);\n  }\n\n  remove(target: ITextBehavior) {\n    this.unregister(target);\n    removeFromArray(this.targets, target);\n  }\n\n  register(target: ITextBehavior) {\n    this.target = target;\n  }\n\n  unregister(target: ITextBehavior) {\n    if (target === this.target) {\n      this.target = undefined;\n    }\n  }\n\n  onMouseMove(e: TPointerEvent) {\n    this.target?.isEditing && this.target.updateSelectionOnMouseMove(e);\n  }\n\n  clear() {\n    this.targets = [];\n    this.target = undefined;\n  }\n\n  dispose() {\n    this.clear();\n    this.__disposer();\n    // @ts-expect-error disposing\n    delete this.__disposer;\n  }\n}\n", "import { classRegistry } from '../ClassRegistry';\nimport { NONE } from '../constants';\nimport type {\n  CanvasEvents,\n  DragEventData,\n  ObjectEvents,\n  TEventsExtraData,\n  TPointerEvent,\n  TPointerEventNames,\n  Transform,\n} from '../EventTypeDefs';\nimport { Point } from '../Point';\nimport type { ActiveSelection } from '../shapes/ActiveSelection';\nimport type { Group } from '../shapes/Group';\nimport type { IText } from '../shapes/IText/IText';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { isTouchEvent, stopEvent } from '../util/dom_event';\nimport { getDocumentFromElement, getWindowFromElement } from '../util/dom_misc';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { isActiveSelection } from '../util/typeAssertions';\nimport type { CanvasOptions, TCanvasOptions } from './CanvasOptions';\nimport { SelectableCanvas } from './SelectableCanvas';\nimport { TextEditingManager } from './TextEditingManager';\n\nconst addEventOptions = { passive: false } as EventListenerOptions;\n\nconst getEventPoints = (canvas: Canvas, e: TPointerEvent) => {\n  const viewportPoint = canvas.getViewportPoint(e);\n  const scenePoint = canvas.getScenePoint(e);\n  return {\n    viewportPoint,\n    scenePoint,\n    pointer: viewportPoint,\n    absolutePointer: scenePoint,\n  };\n};\n\n// just to be clear, the utils are now deprecated and those are here exactly as minifier helpers\n// because el.addEventListener can't me be minified while a const yes and we use it 47 times in this file.\n// few bytes but why give it away.\nconst addListener = (\n  el: HTMLElement | Document,\n  ...args: Parameters<HTMLElement['addEventListener']>\n) => el.addEventListener(...args);\nconst removeListener = (\n  el: HTMLElement | Document,\n  ...args: Parameters<HTMLElement['removeEventListener']>\n) => el.removeEventListener(...args);\n\nconst syntheticEventConfig = {\n  mouse: {\n    in: 'over',\n    out: 'out',\n    targetIn: 'mouseover',\n    targetOut: 'mouseout',\n    canvasIn: 'mouse:over',\n    canvasOut: 'mouse:out',\n  },\n  drag: {\n    in: 'enter',\n    out: 'leave',\n    targetIn: 'dragenter',\n    targetOut: 'dragleave',\n    canvasIn: 'drag:enter',\n    canvasOut: 'drag:leave',\n  },\n} as const;\n\ntype TSyntheticEventContext = {\n  mouse: { e: TPointerEvent };\n  drag: DragEventData;\n};\n\nexport class Canvas extends SelectableCanvas implements CanvasOptions {\n  /**\n   * Contains the id of the touch event that owns the fabric transform\n   * @type Number\n   * @private\n   */\n  declare mainTouchId?: number;\n\n  declare enablePointerEvents: boolean;\n\n  /**\n   * Holds a reference to a setTimeout timer for event synchronization\n   * @type number\n   * @private\n   */\n  private declare _willAddMouseDown: number;\n\n  /**\n   * Holds a reference to an object on the canvas that is receiving the drag over event.\n   * @type FabricObject\n   * @private\n   */\n  private declare _draggedoverTarget?: FabricObject;\n\n  /**\n   * Holds a reference to an object on the canvas from where the drag operation started\n   * @type FabricObject\n   * @private\n   */\n  private declare _dragSource?: FabricObject;\n\n  /**\n   * Holds a reference to an object on the canvas that is the current drop target\n   * May differ from {@link _draggedoverTarget}\n   * @todo inspect whether {@link _draggedoverTarget} and {@link _dropTarget} should be merged somehow\n   * @type FabricObject\n   * @private\n   */\n  private declare _dropTarget: FabricObject<ObjectEvents> | undefined;\n\n  /**\n   * a boolean that keeps track of the click state during a cycle of mouse down/up.\n   * If a mouse move occurs it becomes false.\n   * Is true by default, turns false on mouse move.\n   * Used to determine if a mouseUp is a click\n   */\n  private _isClick: boolean;\n\n  textEditingManager = new TextEditingManager(this);\n\n  constructor(el?: string | HTMLCanvasElement, options: TCanvasOptions = {}) {\n    super(el, options);\n    // bind event handlers\n    (\n      [\n        '_onMouseDown',\n        '_onTouchStart',\n        '_onMouseMove',\n        '_onMouseUp',\n        '_onTouchEnd',\n        '_onResize',\n        // '_onGesture',\n        // '_onDrag',\n        // '_onShake',\n        // '_onLongPress',\n        // '_onOrientationChange',\n        '_onMouseWheel',\n        '_onMouseOut',\n        '_onMouseEnter',\n        '_onContextMenu',\n        '_onClick',\n        '_onDragStart',\n        '_onDragEnd',\n        '_onDragProgress',\n        '_onDragOver',\n        '_onDragEnter',\n        '_onDragLeave',\n        '_onDrop',\n      ] as (keyof this)[]\n    ).forEach((eventHandler) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n      this[eventHandler] = (this[eventHandler] as Function).bind(this);\n    });\n    // register event handlers\n    this.addOrRemove(addListener, 'add');\n  }\n\n  /**\n   * return an event prefix pointer or mouse.\n   * @private\n   */\n  private _getEventPrefix() {\n    return this.enablePointerEvents ? 'pointer' : 'mouse';\n  }\n\n  addOrRemove(functor: any, _eventjsFunctor: 'add' | 'remove') {\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    functor(getWindowFromElement(canvasElement), 'resize', this._onResize);\n    functor(canvasElement, eventTypePrefix + 'down', this._onMouseDown);\n    functor(\n      canvasElement,\n      `${eventTypePrefix}move`,\n      this._onMouseMove,\n      addEventOptions,\n    );\n    functor(canvasElement, `${eventTypePrefix}out`, this._onMouseOut);\n    functor(canvasElement, `${eventTypePrefix}enter`, this._onMouseEnter);\n    functor(canvasElement, 'wheel', this._onMouseWheel);\n    functor(canvasElement, 'contextmenu', this._onContextMenu);\n    functor(canvasElement, 'click', this._onClick);\n    // decide if to remove in fabric 7.0\n    functor(canvasElement, 'dblclick', this._onClick);\n    functor(canvasElement, 'dragstart', this._onDragStart);\n    functor(canvasElement, 'dragend', this._onDragEnd);\n    functor(canvasElement, 'dragover', this._onDragOver);\n    functor(canvasElement, 'dragenter', this._onDragEnter);\n    functor(canvasElement, 'dragleave', this._onDragLeave);\n    functor(canvasElement, 'drop', this._onDrop);\n    if (!this.enablePointerEvents) {\n      functor(canvasElement, 'touchstart', this._onTouchStart, addEventOptions);\n    }\n    // if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {\n    //   eventjs[eventjsFunctor](canvasElement, 'gesture', this._onGesture);\n    //   eventjs[eventjsFunctor](canvasElement, 'drag', this._onDrag);\n    //   eventjs[eventjsFunctor](\n    //     canvasElement,\n    //     'orientation',\n    //     this._onOrientationChange\n    //   );\n    //   eventjs[eventjsFunctor](canvasElement, 'shake', this._onShake);\n    //   eventjs[eventjsFunctor](canvasElement, 'longpress', this._onLongPress);\n    // }\n  }\n\n  /**\n   * Removes all event listeners, used when disposing the instance\n   */\n  removeListeners() {\n    this.addOrRemove(removeListener, 'remove');\n    // if you dispose on a mouseDown, before mouse up, you need to clean document to...\n    const eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(this.upperCanvasEl);\n    removeListener(\n      doc,\n      `${eventTypePrefix}up`,\n      this._onMouseUp as EventListener,\n    );\n    removeListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      'touchmove',\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    clearTimeout(this._willAddMouseDown);\n  }\n\n  /**\n   * @private\n   * @param {Event} [e] Event object fired on wheel event\n   */\n  private _onMouseWheel(e: MouseEvent) {\n    this.__onMouseWheel(e);\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onMouseOut(e: TPointerEvent) {\n    const target = this._hoveredTarget;\n    const shared = {\n      e,\n      ...getEventPoints(this, e),\n    };\n    this.fire('mouse:out', { ...shared, target });\n    this._hoveredTarget = undefined;\n    target && target.fire('mouseout', { ...shared });\n    this._hoveredTargets.forEach((nestedTarget) => {\n      this.fire('mouse:out', { ...shared, target: nestedTarget });\n      nestedTarget && nestedTarget.fire('mouseout', { ...shared });\n    });\n    this._hoveredTargets = [];\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseenter\n   */\n  private _onMouseEnter(e: TPointerEvent) {\n    // This find target and consequent 'mouse:over' is used to\n    // clear old instances on hovered target.\n    // calling findTarget has the side effect of killing target.__corner.\n    // as a short term fix we are not firing this if we are currently transforming.\n    // as a long term fix we need to separate the action of finding a target with the\n    // side effects we added to it.\n    if (!this._currentTransform && !this.findTarget(e)) {\n      this.fire('mouse:over', {\n        e,\n        ...getEventPoints(this, e),\n      });\n      this._hoveredTarget = undefined;\n      this._hoveredTargets = [];\n    }\n  }\n\n  /**\n   * supports native like text dragging\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragStart(e: DragEvent) {\n    this._isClick = false;\n    const activeObject = this.getActiveObject();\n    if (activeObject && activeObject.onDragStart(e)) {\n      this._dragSource = activeObject;\n      const options = { e, target: activeObject };\n      this.fire('dragstart', options);\n      activeObject.fire('dragstart', options);\n      addListener(\n        this.upperCanvasEl,\n        'drag',\n        this._onDragProgress as EventListener,\n      );\n      return;\n    }\n    stopEvent(e);\n  }\n\n  /**\n   * First we clear top context where the effects are being rendered.\n   * Then we render the effects.\n   * Doing so will render the correct effect for all cases including an overlap between `source` and `target`.\n   * @private\n   */\n  private _renderDragEffects(\n    e: DragEvent,\n    source?: FabricObject,\n    target?: FabricObject,\n  ) {\n    let dirty = false;\n    // clear top context\n    const dropTarget = this._dropTarget;\n    if (dropTarget && dropTarget !== source && dropTarget !== target) {\n      dropTarget.clearContextTop();\n      dirty = true;\n    }\n    source?.clearContextTop();\n    target !== source && target?.clearContextTop();\n    // render effects\n    const ctx = this.contextTop;\n    ctx.save();\n    ctx.transform(...this.viewportTransform);\n    if (source) {\n      ctx.save();\n      source.transform(ctx);\n      source.renderDragSourceEffect(e);\n      ctx.restore();\n      dirty = true;\n    }\n    if (target) {\n      ctx.save();\n      target.transform(ctx);\n      target.renderDropTargetEffect(e);\n      ctx.restore();\n      dirty = true;\n    }\n    ctx.restore();\n    dirty && (this.contextTopDirty = true);\n  }\n\n  /**\n   * supports native like text dragging\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#finishing_a_drag\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragEnd(e: DragEvent) {\n    const didDrop = !!e.dataTransfer && e.dataTransfer.dropEffect !== NONE,\n      dropTarget = didDrop ? this._activeObject : undefined,\n      options = {\n        e,\n        target: this._dragSource as FabricObject,\n        subTargets: this.targets,\n        dragSource: this._dragSource as FabricObject,\n        didDrop,\n        dropTarget: dropTarget as FabricObject,\n      };\n    removeListener(\n      this.upperCanvasEl,\n      'drag',\n      this._onDragProgress as EventListener,\n    );\n    this.fire('dragend', options);\n    this._dragSource && this._dragSource.fire('dragend', options);\n    delete this._dragSource;\n    // we need to call mouse up synthetically because the browser won't\n    this._onMouseUp(e);\n  }\n\n  /**\n   * fire `drag` event on canvas and drag source\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragProgress(e: DragEvent) {\n    const options = {\n      e,\n      target: this._dragSource as FabricObject | undefined,\n      dragSource: this._dragSource as FabricObject | undefined,\n      dropTarget: this._draggedoverTarget as FabricObject,\n    };\n    this.fire('drag', options);\n    this._dragSource && this._dragSource.fire('drag', options);\n  }\n\n  /**\n   * As opposed to {@link findTarget} we want the top most object to be returned w/o the active object cutting in line.\n   * Override at will\n   */\n  protected findDragTargets(e: DragEvent) {\n    this.targets = [];\n    const target = this._searchPossibleTargets(\n      this._objects,\n      this.getViewportPoint(e),\n    );\n    return {\n      target,\n      targets: [...this.targets],\n    };\n  }\n\n  /**\n   * prevent default to allow drop event to be fired\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#specifying_drop_targets\n   * @private\n   * @param {DragEvent} [e] Event object fired on Event.js shake\n   */\n  private _onDragOver(e: DragEvent) {\n    const eventType = 'dragover';\n    const { target, targets } = this.findDragTargets(e);\n    const dragSource = this._dragSource as FabricObject;\n    const options = {\n      e,\n      target,\n      subTargets: targets,\n      dragSource,\n      canDrop: false,\n      dropTarget: undefined,\n    };\n    let dropTarget;\n    //  fire on canvas\n    this.fire(eventType, options);\n    //  make sure we fire dragenter events before dragover\n    //  if dragleave is needed, object will not fire dragover so we don't need to trouble ourselves with it\n    this._fireEnterLeaveEvents(target, options);\n    if (target) {\n      if (target.canDrop(e)) {\n        dropTarget = target;\n      }\n      target.fire(eventType, options);\n    }\n    //  propagate the event to subtargets\n    for (let i = 0; i < targets.length; i++) {\n      const subTarget = targets[i];\n      // accept event only if previous targets didn't (the accepting target calls `preventDefault` to inform that the event is taken)\n      // TODO: verify if those should loop in inverse order then?\n      // what is the order of subtargets?\n      if (subTarget.canDrop(e)) {\n        dropTarget = subTarget;\n      }\n      subTarget.fire(eventType, options);\n    }\n    //  render drag effects now that relations between source and target is clear\n    this._renderDragEffects(e, dragSource, dropTarget);\n    this._dropTarget = dropTarget;\n  }\n\n  /**\n   * fire `dragleave` on `dragover` targets\n   * @private\n   * @param {Event} [e] Event object fired on Event.js shake\n   */\n  private _onDragEnter(e: DragEvent) {\n    const { target, targets } = this.findDragTargets(e);\n    const options = {\n      e,\n      target,\n      subTargets: targets,\n      dragSource: this._dragSource,\n    };\n    this.fire('dragenter', options);\n    //  fire dragenter on targets\n    this._fireEnterLeaveEvents(target, options);\n  }\n\n  /**\n   * fire `dragleave` on `dragover` targets\n   * @private\n   * @param {Event} [e] Event object fired on Event.js shake\n   */\n  private _onDragLeave(e: DragEvent) {\n    const options = {\n      e,\n      target: this._draggedoverTarget,\n      subTargets: this.targets,\n      dragSource: this._dragSource,\n    };\n    this.fire('dragleave', options);\n\n    //  fire dragleave on targets\n    this._fireEnterLeaveEvents(undefined, options);\n    this._renderDragEffects(e, this._dragSource);\n    this._dropTarget = undefined;\n    //  clear targets\n    this.targets = [];\n    this._hoveredTargets = [];\n  }\n\n  /**\n   * `drop:before` is a an event that allows you to schedule logic\n   * before the `drop` event. Prefer `drop` event always, but if you need\n   * to run some drop-disabling logic on an event, since there is no way\n   * to handle event handlers ordering, use `drop:before`\n   * @private\n   * @param {Event} e\n   */\n  private _onDrop(e: DragEvent) {\n    const { target, targets } = this.findDragTargets(e);\n    const options = this._basicEventHandler('drop:before', {\n      e,\n      target,\n      subTargets: targets,\n      dragSource: this._dragSource,\n      ...getEventPoints(this, e),\n    });\n    //  will be set by the drop target\n    options.didDrop = false;\n    //  will be set by the drop target, used in case options.target refuses the drop\n    options.dropTarget = undefined;\n    //  fire `drop`\n    this._basicEventHandler('drop', options);\n    //  inform canvas of the drop\n    //  we do this because canvas was unaware of what happened at the time the `drop` event was fired on it\n    //  use for side effects\n    this.fire('drop:after', options);\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onContextMenu(e: TPointerEvent): false {\n    const target = this.findTarget(e),\n      subTargets = this.targets || [];\n    const options = this._basicEventHandler('contextmenu:before', {\n      e,\n      target,\n      subTargets,\n    });\n    // TODO: this line is silly because the dev can subscribe to the event and prevent it themselves\n    this.stopContextMenu && stopEvent(e);\n    this._basicEventHandler('contextmenu', options);\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onClick(e: TPointerEvent) {\n    const clicks = e.detail;\n    if (clicks > 3 || clicks < 2) return;\n    this._cacheTransformEventData(e);\n    clicks == 2 && e.type === 'dblclick' && this._handleEvent(e, 'dblclick');\n    clicks == 3 && this._handleEvent(e, 'tripleclick');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Return a the id of an event.\n   * returns either the pointerId or the identifier or 0 for the mouse event\n   * @private\n   * @param {Event} evt Event object\n   */\n  getPointerId(evt: TouchEvent | PointerEvent): number {\n    const changedTouches = (evt as TouchEvent).changedTouches;\n\n    if (changedTouches) {\n      return changedTouches[0] && changedTouches[0].identifier;\n    }\n\n    if (this.enablePointerEvents) {\n      return (evt as PointerEvent).pointerId;\n    }\n\n    return -1;\n  }\n\n  /**\n   * Determines if an event has the id of the event that is considered main\n   * @private\n   * @param {evt} event Event object\n   */\n  _isMainEvent(evt: TPointerEvent): boolean {\n    if ((evt as PointerEvent).isPrimary === true) {\n      return true;\n    }\n    if ((evt as PointerEvent).isPrimary === false) {\n      return false;\n    }\n    if (evt.type === 'touchend' && (evt as TouchEvent).touches.length === 0) {\n      return true;\n    }\n    if ((evt as TouchEvent).changedTouches) {\n      return (\n        (evt as TouchEvent).changedTouches[0].identifier === this.mainTouchId\n      );\n    }\n    return true;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onTouchStart(e: TouchEvent) {\n    // we will prevent scrolling if allowTouchScrolling is not enabled and\n    let shouldPreventScrolling = !this.allowTouchScrolling;\n    const currentActiveObject = this._activeObject;\n    if (this.mainTouchId === undefined) {\n      this.mainTouchId = this.getPointerId(e);\n    }\n    this.__onMouseDown(e);\n    // after executing fabric logic for mouse down let's see\n    // if we didn't change target or if we are drawing\n    // we want to prevent scrolling anyway\n    if (\n      this.isDrawingMode ||\n      (currentActiveObject && this._target === currentActiveObject)\n    ) {\n      shouldPreventScrolling = true;\n    }\n    // prevent default, will block scrolling from start\n    shouldPreventScrolling && e.preventDefault();\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(canvasElement);\n    addListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    // if we scroll don't register the touch move event\n    shouldPreventScrolling &&\n      addListener(\n        doc,\n        'touchmove',\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n    // Unbind mousedown to prevent double triggers from touch devices\n    removeListener(\n      canvasElement,\n      `${eventTypePrefix}down`,\n      this._onMouseDown as EventListener,\n    );\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onMouseDown(e: TPointerEvent) {\n    this.__onMouseDown(e);\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    removeListener(\n      canvasElement,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    const doc = getDocumentFromElement(canvasElement);\n    addListener(doc, `${eventTypePrefix}up`, this._onMouseUp as EventListener);\n    addListener(\n      doc,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onTouchEnd(e: TouchEvent) {\n    if (e.touches.length > 0) {\n      // if there are still touches stop here\n      return;\n    }\n    this.__onMouseUp(e);\n    this._resetTransformEventData();\n    delete this.mainTouchId;\n    const eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(this.upperCanvasEl);\n    removeListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      'touchmove',\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    if (this._willAddMouseDown) {\n      clearTimeout(this._willAddMouseDown);\n    }\n    this._willAddMouseDown = setTimeout(() => {\n      // Wait 400ms before rebinding mousedown to prevent double triggers\n      // from touch devices\n      addListener(\n        this.upperCanvasEl,\n        `${eventTypePrefix}down`,\n        this._onMouseDown as EventListener,\n      );\n      this._willAddMouseDown = 0;\n    }, 400) as unknown as number;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  _onMouseUp(e: TPointerEvent) {\n    this.__onMouseUp(e);\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    if (this._isMainEvent(e)) {\n      const doc = getDocumentFromElement(this.upperCanvasEl);\n      removeListener(\n        doc,\n        `${eventTypePrefix}up`,\n        this._onMouseUp as EventListener,\n      );\n      removeListener(\n        doc,\n        `${eventTypePrefix}move`,\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n      addListener(\n        canvasElement,\n        `${eventTypePrefix}move`,\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  _onMouseMove(e: TPointerEvent) {\n    const activeObject = this.getActiveObject();\n    !this.allowTouchScrolling &&\n      (!activeObject ||\n        // a drag event sequence is started by the active object flagging itself on mousedown / mousedown:before\n        // we must not prevent the event's default behavior in order for the window to start dragging\n        !activeObject.shouldStartDragging(e)) &&\n      e.preventDefault &&\n      e.preventDefault();\n    this.__onMouseMove(e);\n  }\n\n  /**\n   * @private\n   */\n  _onResize() {\n    this.calcOffset();\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Decides whether the canvas should be redrawn in mouseup and mousedown events.\n   * @private\n   * @param {Object} target\n   */\n  _shouldRender(target: FabricObject | undefined) {\n    const activeObject = this.getActiveObject();\n    // if just one of them is available or if they are both but are different objects\n    // this covers: switch of target, from target to no target, selection of target\n    // multiSelection with key and mouse\n    return (\n      !!activeObject !== !!target ||\n      (activeObject && target && activeObject !== target)\n    );\n  }\n\n  /**\n   * Method that defines the actions when mouse is released on canvas.\n   * The method resets the currentTransform parameters, store the image corner\n   * position in the image object and render the canvas on top.\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  __onMouseUp(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'up:before');\n\n    const transform = this._currentTransform;\n    const isClick = this._isClick;\n    const target = this._target;\n\n    // if right/middle click just fire events and return\n    // target undefined will make the _handleEvent search the target\n    const { button } = e as MouseEvent;\n    if (button) {\n      ((this.fireMiddleClick && button === 1) ||\n        (this.fireRightClick && button === 2)) &&\n        this._handleEvent(e, 'up');\n      this._resetTransformEventData();\n      return;\n    }\n\n    if (this.isDrawingMode && this._isCurrentlyDrawing) {\n      this._onMouseUpInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n    let shouldRender = false;\n    if (transform) {\n      this._finalizeCurrentTransform(e);\n      shouldRender = transform.actionPerformed;\n    }\n    if (!isClick) {\n      const targetWasActive = target === this._activeObject;\n      this.handleSelection(e);\n      if (!shouldRender) {\n        shouldRender =\n          this._shouldRender(target) ||\n          (!targetWasActive && target === this._activeObject);\n      }\n    }\n    let pointer, corner;\n    if (target) {\n      const found = target.findControl(\n        this.getViewportPoint(e),\n        isTouchEvent(e),\n      );\n      const { key, control } = found || {};\n      corner = key;\n      if (\n        target.selectable &&\n        target !== this._activeObject &&\n        target.activeOn === 'up'\n      ) {\n        this.setActiveObject(target, e);\n        shouldRender = true;\n      } else if (control) {\n        const mouseUpHandler = control.getMouseUpHandler(e, target, control);\n        if (mouseUpHandler) {\n          pointer = this.getScenePoint(e);\n          mouseUpHandler.call(control, e, transform!, pointer.x, pointer.y);\n        }\n      }\n      target.isMoving = false;\n    }\n    // if we are ending up a transform on a different control or a new object\n    // fire the original mouse up from the corner that started the transform\n    if (\n      transform &&\n      (transform.target !== target || transform.corner !== corner)\n    ) {\n      const originalControl =\n          transform.target && transform.target.controls[transform.corner],\n        originalMouseUpHandler =\n          originalControl &&\n          originalControl.getMouseUpHandler(\n            e,\n            transform.target,\n            originalControl,\n          );\n      pointer = pointer || this.getScenePoint(e);\n      originalMouseUpHandler &&\n        originalMouseUpHandler.call(\n          originalControl,\n          e,\n          transform,\n          pointer.x,\n          pointer.y,\n        );\n    }\n    this._setCursorFromEvent(e, target);\n    this._handleEvent(e, 'up');\n    this._groupSelector = null;\n    this._currentTransform = null;\n    // reset the target information about which corner is selected\n    target && (target.__corner = undefined);\n    if (shouldRender) {\n      this.requestRenderAll();\n    } else if (!isClick && !(this._activeObject as IText)?.isEditing) {\n      this.renderTop();\n    }\n  }\n\n  _basicEventHandler<T extends keyof (CanvasEvents | ObjectEvents)>(\n    eventType: T,\n    options: (CanvasEvents & ObjectEvents)[T],\n  ) {\n    const { target, subTargets = [] } = options as {\n      target?: FabricObject;\n      subTargets: FabricObject[];\n    };\n    this.fire(eventType, options);\n    target && target.fire(eventType, options);\n    for (let i = 0; i < subTargets.length; i++) {\n      subTargets[i] !== target && subTargets[i].fire(eventType, options);\n    }\n    return options;\n  }\n\n  /**\n   * @private\n   * Handle event firing for target and subtargets\n   * @param {TPointerEvent} e event from mouse\n   * @param {TPointerEventNames} eventType\n   */\n  _handleEvent<T extends TPointerEventNames>(\n    e: TPointerEvent,\n    eventType: T,\n    extraData?: TEventsExtraData[T],\n  ) {\n    const target = this._target,\n      targets = this.targets || [],\n      options: CanvasEvents[`mouse:${T}`] = {\n        e,\n        target,\n        subTargets: targets,\n        ...getEventPoints(this, e),\n        transform: this._currentTransform,\n        ...(eventType === 'up:before' || eventType === 'up'\n          ? {\n              isClick: this._isClick,\n              currentTarget: this.findTarget(e),\n              // set by the preceding `findTarget` call\n              currentSubTargets: this.targets,\n            }\n          : {}),\n        ...(eventType === 'down:before' || eventType === 'down'\n          ? extraData\n          : {}),\n      } as CanvasEvents[`mouse:${T}`];\n    this.fire(`mouse:${eventType}`, options);\n    // this may be a little be more complicated of what we want to handle\n    target && target.fire(`mouse${eventType}`, options);\n    for (let i = 0; i < targets.length; i++) {\n      targets[i] !== target && targets[i].fire(`mouse${eventType}`, options);\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onMouseDownInDrawingMode(e: TPointerEvent) {\n    this._isCurrentlyDrawing = true;\n    if (this.getActiveObject()) {\n      this.discardActiveObject(e);\n      this.requestRenderAll();\n    }\n    // TODO: this is a scene point so it should be renamed\n    const pointer = this.getScenePoint(e);\n    this.freeDrawingBrush &&\n      this.freeDrawingBrush.onMouseDown(pointer, { e, pointer });\n    this._handleEvent(e, 'down', { alreadySelected: false });\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  _onMouseMoveInDrawingMode(e: TPointerEvent) {\n    if (this._isCurrentlyDrawing) {\n      const pointer = this.getScenePoint(e);\n      this.freeDrawingBrush &&\n        this.freeDrawingBrush.onMouseMove(pointer, {\n          e,\n          // this is an absolute pointer, the naming is wrong\n          pointer,\n        });\n    }\n    this.setCursor(this.freeDrawingCursor);\n    this._handleEvent(e, 'move');\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  _onMouseUpInDrawingMode(e: TPointerEvent) {\n    const pointer = this.getScenePoint(e);\n    if (this.freeDrawingBrush) {\n      this._isCurrentlyDrawing = !!this.freeDrawingBrush.onMouseUp({\n        e: e,\n        // this is an absolute pointer, the naming is wrong\n        pointer,\n      });\n    } else {\n      this._isCurrentlyDrawing = false;\n    }\n    this._handleEvent(e, 'up');\n  }\n\n  /**\n   * Method that defines the actions when mouse is clicked on canvas.\n   * The method inits the currentTransform parameters and renders all the\n   * canvas so the current image can be placed on the top canvas and the rest\n   * in on the container one.\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  __onMouseDown(e: TPointerEvent) {\n    this._isClick = true;\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'down:before');\n\n    let target: FabricObject | undefined = this._target;\n    let alreadySelected = !!target && target === this._activeObject;\n    // if right/middle click just fire events\n    const { button } = e as MouseEvent;\n    if (button) {\n      ((this.fireMiddleClick && button === 1) ||\n        (this.fireRightClick && button === 2)) &&\n        this._handleEvent(e, 'down', {\n          alreadySelected,\n        });\n      this._resetTransformEventData();\n      return;\n    }\n\n    if (this.isDrawingMode) {\n      this._onMouseDownInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n\n    // ignore if some object is being transformed at this moment\n    if (this._currentTransform) {\n      return;\n    }\n\n    let shouldRender = this._shouldRender(target);\n    let grouped = false;\n    if (this.handleMultiSelection(e, target)) {\n      // active object might have changed while grouping\n      target = this._activeObject;\n      grouped = true;\n      shouldRender = true;\n    } else if (this._shouldClearSelection(e, target)) {\n      this.discardActiveObject(e);\n    }\n    // we start a group selector rectangle if\n    // selection is enabled\n    // and there is no target, or the following 3 conditions are satisfied:\n    // target is not selectable ( otherwise we selected it )\n    // target is not editing\n    // target is not already selected ( otherwise we drag )\n    if (\n      this.selection &&\n      (!target ||\n        (!target.selectable &&\n          !(target as IText).isEditing &&\n          target !== this._activeObject))\n    ) {\n      const p = this.getScenePoint(e);\n      this._groupSelector = {\n        x: p.x,\n        y: p.y,\n        deltaY: 0,\n        deltaX: 0,\n      };\n    }\n\n    // check again because things could have changed\n    alreadySelected = !!target && target === this._activeObject;\n    if (target) {\n      if (target.selectable && target.activeOn === 'down') {\n        this.setActiveObject(target, e);\n      }\n      const handle = target.findControl(\n        this.getViewportPoint(e),\n        isTouchEvent(e),\n      );\n      if (target === this._activeObject && (handle || !grouped)) {\n        this._setupCurrentTransform(e, target, alreadySelected);\n        const control = handle ? handle.control : undefined,\n          pointer = this.getScenePoint(e),\n          mouseDownHandler =\n            control && control.getMouseDownHandler(e, target, control);\n        mouseDownHandler &&\n          mouseDownHandler.call(\n            control,\n            e,\n            this._currentTransform!,\n            pointer.x,\n            pointer.y,\n          );\n      }\n    }\n    //  we clear `_objectsToRender` in case of a change in order to repopulate it at rendering\n    //  run before firing the `down` event to give the dev a chance to populate it themselves\n    shouldRender && (this._objectsToRender = undefined);\n    this._handleEvent(e, 'down', { alreadySelected: alreadySelected });\n    // we must renderAll so that we update the visuals\n    shouldRender && this.requestRenderAll();\n  }\n\n  /**\n   * reset cache form common information needed during event processing\n   * @private\n   */\n  _resetTransformEventData() {\n    this._target = this._pointer = this._absolutePointer = undefined;\n  }\n\n  /**\n   * Cache common information needed during event processing\n   * @private\n   * @param {Event} e Event object fired on event\n   */\n  _cacheTransformEventData(e: TPointerEvent) {\n    // reset in order to avoid stale caching\n    this._resetTransformEventData();\n    this._pointer = this.getViewportPoint(e);\n    this._absolutePointer = sendPointToPlane(\n      this._pointer,\n      undefined,\n      this.viewportTransform,\n    );\n    this._target = this._currentTransform\n      ? this._currentTransform.target\n      : this.findTarget(e);\n  }\n\n  /**\n   * Method that defines the actions when mouse is hovering the canvas.\n   * The currentTransform parameter will define whether the user is rotating/scaling/translating\n   * an image or neither of them (only hovering). A group selection is also possible and would cancel\n   * all any other type of action.\n   * In case of an image transformation only the top canvas will be rendered.\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  __onMouseMove(e: TPointerEvent) {\n    this._isClick = false;\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'move:before');\n\n    if (this.isDrawingMode) {\n      this._onMouseMoveInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n\n    const groupSelector = this._groupSelector;\n\n    // We initially clicked in an empty area, so we draw a box for multiple selection\n    if (groupSelector) {\n      const pointer = this.getScenePoint(e);\n\n      groupSelector.deltaX = pointer.x - groupSelector.x;\n      groupSelector.deltaY = pointer.y - groupSelector.y;\n\n      this.renderTop();\n    } else if (!this._currentTransform) {\n      const target = this.findTarget(e);\n      this._setCursorFromEvent(e, target);\n      this._fireOverOutEvents(e, target);\n    } else {\n      this._transformObject(e);\n    }\n    this.textEditingManager.onMouseMove(e);\n    this._handleEvent(e, 'move');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Manage the mouseout, mouseover events for the fabric object on the canvas\n   * @param {Fabric.Object} target the target where the target from the mousemove event\n   * @param {Event} e Event object fired on mousemove\n   * @private\n   */\n  _fireOverOutEvents(e: TPointerEvent, target?: FabricObject) {\n    const _hoveredTarget = this._hoveredTarget,\n      _hoveredTargets = this._hoveredTargets,\n      targets = this.targets,\n      length = Math.max(_hoveredTargets.length, targets.length);\n\n    this.fireSyntheticInOutEvents('mouse', {\n      e,\n      target,\n      oldTarget: _hoveredTarget,\n      fireCanvas: true,\n    });\n    for (let i = 0; i < length; i++) {\n      this.fireSyntheticInOutEvents('mouse', {\n        e,\n        target: targets[i],\n        oldTarget: _hoveredTargets[i],\n      });\n    }\n    this._hoveredTarget = target;\n    this._hoveredTargets = this.targets.concat();\n  }\n\n  /**\n   * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\n   * @param {Fabric.Object} target the target where the target from the onDrag event\n   * @param {Object} data Event object fired on dragover\n   * @private\n   */\n  _fireEnterLeaveEvents(target: FabricObject | undefined, data: DragEventData) {\n    const draggedoverTarget = this._draggedoverTarget,\n      _hoveredTargets = this._hoveredTargets,\n      targets = this.targets,\n      length = Math.max(_hoveredTargets.length, targets.length);\n\n    this.fireSyntheticInOutEvents('drag', {\n      ...data,\n      target,\n      oldTarget: draggedoverTarget,\n      fireCanvas: true,\n    });\n    for (let i = 0; i < length; i++) {\n      this.fireSyntheticInOutEvents('drag', {\n        ...data,\n        target: targets[i],\n        oldTarget: _hoveredTargets[i],\n      });\n    }\n    this._draggedoverTarget = target;\n  }\n\n  /**\n   * Manage the synthetic in/out events for the fabric objects on the canvas\n   * @param {Fabric.Object} target the target where the target from the supported events\n   * @param {Object} data Event object fired\n   * @param {Object} config configuration for the function to work\n   * @param {String} config.targetName property on the canvas where the old target is stored\n   * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\n   * @param {String} config.evtOut name of the event to fire for out\n   * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\n   * @param {String} config.evtIn name of the event to fire for in\n   * @private\n   */\n  fireSyntheticInOutEvents<T extends keyof TSyntheticEventContext>(\n    type: T,\n    {\n      target,\n      oldTarget,\n      fireCanvas,\n      e,\n      ...data\n    }: TSyntheticEventContext[T] & {\n      target?: FabricObject;\n      oldTarget?: FabricObject;\n      fireCanvas?: boolean;\n    },\n  ) {\n    const { targetIn, targetOut, canvasIn, canvasOut } =\n      syntheticEventConfig[type];\n    const targetChanged = oldTarget !== target;\n\n    if (oldTarget && targetChanged) {\n      const outOpt: CanvasEvents[typeof canvasOut] = {\n        ...data,\n        e,\n        target: oldTarget,\n        nextTarget: target,\n        ...getEventPoints(this, e),\n      };\n      fireCanvas && this.fire(canvasOut, outOpt);\n      oldTarget.fire(targetOut, outOpt);\n    }\n    if (target && targetChanged) {\n      const inOpt: CanvasEvents[typeof canvasIn] = {\n        ...data,\n        e,\n        target,\n        previousTarget: oldTarget,\n        ...getEventPoints(this, e),\n      };\n      fireCanvas && this.fire(canvasIn, inOpt);\n      target.fire(targetIn, inOpt);\n    }\n  }\n\n  /**\n   * Method that defines actions when an Event Mouse Wheel\n   * @param {Event} e Event object fired on mouseup\n   */\n  __onMouseWheel(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'wheel');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event fired on mousemove\n   */\n  _transformObject(e: TPointerEvent) {\n    const scenePoint = this.getScenePoint(e),\n      transform = this._currentTransform!,\n      target = transform.target,\n      //  transform pointer to target's containing coordinate plane\n      //  both pointer and object should agree on every point\n      localPointer = target.group\n        ? sendPointToPlane(\n            scenePoint,\n            undefined,\n            target.group.calcTransformMatrix(),\n          )\n        : scenePoint;\n    transform.shiftKey = e.shiftKey;\n    transform.altKey = !!this.centeredKey && e[this.centeredKey];\n\n    this._performTransformAction(e, transform, localPointer);\n    transform.actionPerformed && this.requestRenderAll();\n  }\n\n  /**\n   * @private\n   */\n  _performTransformAction(\n    e: TPointerEvent,\n    transform: Transform,\n    pointer: Point,\n  ) {\n    const { action, actionHandler, target } = transform;\n\n    const actionPerformed =\n      !!actionHandler && actionHandler(e, transform, pointer.x, pointer.y);\n    actionPerformed && target.setCoords();\n\n    // this object could be created from the function in the control handlers\n    if (action === 'drag' && actionPerformed) {\n      transform.target.isMoving = true;\n      this.setCursor(transform.target.moveCursor || this.moveCursor);\n    }\n    transform.actionPerformed = transform.actionPerformed || actionPerformed;\n  }\n\n  /**\n   * Sets the cursor depending on where the canvas is being hovered.\n   * Note: very buggy in Opera\n   * @param {Event} e Event object\n   * @param {Object} target Object that the mouse is hovering, if so.\n   */\n  _setCursorFromEvent(e: TPointerEvent, target?: FabricObject) {\n    if (!target) {\n      this.setCursor(this.defaultCursor);\n      return;\n    }\n    let hoverCursor = target.hoverCursor || this.hoverCursor;\n    const activeSelection = isActiveSelection(this._activeObject)\n        ? this._activeObject\n        : null,\n      // only show proper corner when group selection is not active\n      corner =\n        (!activeSelection || target.group !== activeSelection) &&\n        // here we call findTargetCorner always with undefined for the touch parameter.\n        // we assume that if you are using a cursor you do not need to interact with\n        // the bigger touch area.\n        target.findControl(this.getViewportPoint(e));\n\n    if (!corner) {\n      if ((target as Group).subTargetCheck) {\n        // hoverCursor should come from top-most subTarget,\n        // so we walk the array backwards\n        this.targets\n          .concat()\n          .reverse()\n          .map((_target) => {\n            hoverCursor = _target.hoverCursor || hoverCursor;\n          });\n      }\n      this.setCursor(hoverCursor);\n    } else {\n      const control = corner.control;\n      this.setCursor(control.cursorStyleHandler(e, control, target));\n    }\n  }\n\n  /**\n   * ## Handles multiple selection\n   * - toggles `target` selection (selects/deselects `target` if it isn't/is selected respectively)\n   * - sets the active object in case it is not set or in case there is a single active object left under active selection.\n   * ---\n   * - If the active object is the active selection we add/remove `target` from it\n   * - If not, add the active object and `target` to the active selection and make it the active object.\n   * @private\n   * @param {TPointerEvent} e Event object\n   * @param {FabricObject} target target of event to select/deselect\n   * @returns true if grouping occurred\n   */\n  protected handleMultiSelection(e: TPointerEvent, target?: FabricObject) {\n    const activeObject = this._activeObject;\n    const isAS = isActiveSelection(activeObject);\n    if (\n      // check if an active object exists on canvas and if the user is pressing the `selectionKey` while canvas supports multi selection.\n      !!activeObject &&\n      this._isSelectionKeyPressed(e) &&\n      this.selection &&\n      // on top of that the user also has to hit a target that is selectable.\n      !!target &&\n      target.selectable &&\n      // group target and active object only if they are different objects\n      // else we try to find a subtarget of `ActiveSelection`\n      (activeObject !== target || isAS) &&\n      //  make sure `activeObject` and `target` aren't ancestors of each other in case `activeObject` is not `ActiveSelection`\n      // if it is then we want to remove `target` from it\n      (isAS ||\n        (!target.isDescendantOf(activeObject) &&\n          !activeObject.isDescendantOf(target))) &&\n      //  target accepts selection\n      !target.onSelect({ e }) &&\n      // make sure we are not on top of a control\n      !activeObject.getActiveControl()\n    ) {\n      if (isAS) {\n        const prevActiveObjects = activeObject.getObjects();\n        if (target === activeObject) {\n          const pointer = this.getViewportPoint(e);\n          target =\n            // first search active objects for a target to remove\n            this.searchPossibleTargets(prevActiveObjects, pointer) ||\n            //  if not found, search under active selection for a target to add\n            // `prevActiveObjects` will be searched but we already know they will not be found\n            this.searchPossibleTargets(this._objects, pointer);\n          // if nothing is found bail out\n          if (!target || !target.selectable) {\n            return false;\n          }\n        }\n        if (target.group === activeObject) {\n          // `target` is part of active selection => remove it\n          activeObject.remove(target);\n          this._hoveredTarget = target;\n          this._hoveredTargets = [...this.targets];\n          // if after removing an object we are left with one only...\n          if (activeObject.size() === 1) {\n            // activate last remaining object\n            // deselecting the active selection will remove the remaining object from it\n            this._setActiveObject(activeObject.item(0), e);\n          }\n        } else {\n          // `target` isn't part of active selection => add it\n          activeObject.multiSelectAdd(target);\n          this._hoveredTarget = activeObject;\n          this._hoveredTargets = [...this.targets];\n        }\n        this._fireSelectionEvents(prevActiveObjects, e);\n      } else {\n        (activeObject as IText).isEditing &&\n          (activeObject as IText).exitEditing();\n        // add the active object and the target to the active selection and set it as the active object\n        const klass =\n          classRegistry.getClass<typeof ActiveSelection>('ActiveSelection');\n        const newActiveSelection = new klass([], {\n          /**\n           * it is crucial to pass the canvas ref before calling {@link ActiveSelection#multiSelectAdd}\n           * since it uses {@link FabricObject#isInFrontOf} which relies on the canvas ref\n           */\n          canvas: this,\n        });\n        newActiveSelection.multiSelectAdd(activeObject, target);\n        this._hoveredTarget = newActiveSelection;\n        // ISSUE 4115: should we consider subTargets here?\n        // this._hoveredTargets = [];\n        // this._hoveredTargets = this.targets.concat();\n        this._setActiveObject(newActiveSelection, e);\n        this._fireSelectionEvents([activeObject], e);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * ## Handles selection\n   * - selects objects that are contained in (and possibly intersecting) the selection bounding box\n   * - sets the active object\n   * ---\n   * runs on mouse up after a mouse move\n   */\n  protected handleSelection(e: TPointerEvent) {\n    if (!this.selection || !this._groupSelector) {\n      return false;\n    }\n    const { x, y, deltaX, deltaY } = this._groupSelector,\n      point1 = new Point(x, y),\n      point2 = point1.add(new Point(deltaX, deltaY)),\n      tl = point1.min(point2),\n      br = point1.max(point2),\n      size = br.subtract(tl);\n\n    const collectedObjects = this.collectObjects(\n      {\n        left: tl.x,\n        top: tl.y,\n        width: size.x,\n        height: size.y,\n      },\n      { includeIntersecting: !this.selectionFullyContained },\n    ) as FabricObject[];\n\n    const objects =\n      // though this method runs only after mouse move the pointer could do a mouse up on the same position as mouse down\n      // should it be handled as is?\n      point1.eq(point2)\n        ? collectedObjects[0]\n          ? [collectedObjects[0]]\n          : []\n        : collectedObjects.length > 1\n          ? collectedObjects\n              .filter((object) => !object.onSelect({ e }))\n              .reverse()\n          : // `setActiveObject` will call `onSelect(collectedObjects[0])` in this case\n            collectedObjects;\n\n    // set active object\n    if (objects.length === 1) {\n      // set as active object\n      this.setActiveObject(objects[0], e);\n    } else if (objects.length > 1) {\n      // add to active selection and make it the active object\n      const klass =\n        classRegistry.getClass<typeof ActiveSelection>('ActiveSelection');\n      this.setActiveObject(new klass(objects, { canvas: this }), e);\n    }\n\n    // cleanup\n    this._groupSelector = null;\n    return true;\n  }\n\n  /**\n   * @override clear {@link textEditingManager}\n   */\n  clear() {\n    this.textEditingManager.clear();\n    super.clear();\n  }\n\n  /**\n   * @override clear {@link textEditingManager}\n   */\n  destroy() {\n    this.removeListeners();\n    this.textEditingManager.dispose();\n    super.destroy();\n  }\n}\n", "export const linearDefaultCoords = {\n  x1: 0,\n  y1: 0,\n  x2: 0,\n  y2: 0,\n};\n\nexport const radialDefaultCoords = {\n  ...linearDefaultCoords,\n  r1: 0,\n  r2: 0,\n};\n", "/**\n *\n * @param value value to check if NaN\n * @param [valueIfNaN]\n * @returns `fallback` is `value is NaN\n */\nexport const ifNaN = (value: number, valueIfNaN?: number) => {\n  return isNaN(value) && typeof valueIfNaN === 'number' ? valueIfNaN : value;\n};\n", "import { ifNaN } from '../util/internals/ifNaN';\nimport { capValue } from '../util/misc/capValue';\n\nconst RE_PERCENT = /^(\\d+\\.\\d+)%|(\\d+)%$/;\n\nexport function isPercent(value: string | null) {\n  return value && RE_PERCENT.test(value);\n}\n\n/**\n *\n * @param value\n * @param valueIfNaN\n * @returns ∈ [0, 1]\n */\nexport function parsePercent(\n  value: string | number | null | undefined,\n  valueIfNaN?: number,\n) {\n  const parsed =\n    typeof value === 'number'\n      ? value\n      : typeof value === 'string'\n        ? parseFloat(value) / (isPercent(value) ? 100 : 1)\n        : NaN;\n  return capValue(0, ifNaN(parsed, valueIfNaN), 1);\n}\n", "import { Color } from '../../color/Color';\nimport { parsePercent } from '../../parser/percent';\nimport { ifNaN } from '../../util/internals/ifNaN';\nimport type { ColorStop } from '../typedefs';\n\nconst RE_KEY_VALUE_PAIRS = /\\s*;\\s*/;\nconst RE_KEY_VALUE = /\\s*:\\s*/;\n\nfunction parseColorStop(el: SVGStopElement, multiplier: number) {\n  let colorValue, opacity;\n  const style = el.getAttribute('style');\n  if (style) {\n    const keyValuePairs = style.split(RE_KEY_VALUE_PAIRS);\n\n    if (keyValuePairs[keyValuePairs.length - 1] === '') {\n      keyValuePairs.pop();\n    }\n\n    for (let i = keyValuePairs.length; i--; ) {\n      const [key, value] = keyValuePairs[i]\n        .split(RE_KEY_VALUE)\n        .map((s) => s.trim());\n      if (key === 'stop-color') {\n        colorValue = value;\n      } else if (key === 'stop-opacity') {\n        opacity = value;\n      }\n    }\n  }\n\n  const color = new Color(\n    colorValue || el.getAttribute('stop-color') || 'rgb(0,0,0)',\n  );\n\n  return {\n    offset: parsePercent(el.getAttribute('offset'), 0),\n    color: color.toRgb(),\n    opacity:\n      ifNaN(parseFloat(opacity || el.getAttribute('stop-opacity') || ''), 1) *\n      color.getAlpha() *\n      multiplier,\n  };\n}\n\nexport function parseColorStops(\n  el: SVGGradientElement,\n  opacityAttr: string | null,\n) {\n  const colorStops: ColorStop[] = [],\n    colorStopEls = el.getElementsByTagName('stop'),\n    multiplier = parsePercent(opacityAttr, 1);\n  for (let i = colorStopEls.length; i--; ) {\n    colorStops.push(parseColorStop(colorStopEls[i], multiplier));\n  }\n  return colorStops;\n}\n", "import type { GradientType, GradientUnits } from '../typedefs';\n\nexport function parseType(el: SVGGradientElement): GradientType {\n  return el.nodeName === 'linearGradient' || el.nodeName === 'LINEARGRADIENT'\n    ? 'linear'\n    : 'radial';\n}\n\nexport function parseGradientUnits(el: SVGGradientElement): GradientUnits {\n  return el.getAttribute('gradientUnits') === 'userSpaceOnUse'\n    ? 'pixels'\n    : 'percentage';\n}\n", "import { isPercent } from '../../parser/percent';\nimport type { TSize } from '../../typedefs';\nimport type { GradientCoords, GradientType, GradientUnits } from '../typedefs';\nimport { parseGradientUnits, parseType } from './misc';\n\nfunction convertPercentUnitsToValues<\n  T extends GradientType,\n  K extends keyof GradientCoords<T>,\n>(\n  valuesToConvert: Record<K, string | number>,\n  { width, height, gradientUnits }: TSize & { gradientUnits: GradientUnits },\n) {\n  let finalValue;\n  return (Object.keys(valuesToConvert) as K[]).reduce(\n    (acc, prop) => {\n      const propValue = valuesToConvert[prop];\n      if (propValue === 'Infinity') {\n        finalValue = 1;\n      } else if (propValue === '-Infinity') {\n        finalValue = 0;\n      } else {\n        finalValue =\n          typeof propValue === 'string' ? parseFloat(propValue) : propValue;\n        if (typeof propValue === 'string' && isPercent(propValue)) {\n          finalValue *= 0.01;\n          if (gradientUnits === 'pixels') {\n            // then we need to fix those percentages here in svg parsing\n            if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n              finalValue *= width;\n            }\n            if (prop === 'y1' || prop === 'y2') {\n              finalValue *= height;\n            }\n          }\n        }\n      }\n      acc[prop] = finalValue;\n      return acc;\n    },\n    {} as Record<K, number>,\n  );\n}\n\nfunction getValue(el: SVGGradientElement, key: string) {\n  return el.getAttribute(key);\n}\n\nexport function parseLinearCoords(el: SVGGradientElement) {\n  return {\n    x1: getValue(el, 'x1') || 0,\n    y1: getValue(el, 'y1') || 0,\n    x2: getValue(el, 'x2') || '100%',\n    y2: getValue(el, 'y2') || 0,\n  };\n}\n\nexport function parseRadialCoords(el: SVGGradientElement) {\n  return {\n    x1: getValue(el, 'fx') || getValue(el, 'cx') || '50%',\n    y1: getValue(el, 'fy') || getValue(el, 'cy') || '50%',\n    r1: 0,\n    x2: getValue(el, 'cx') || '50%',\n    y2: getValue(el, 'cy') || '50%',\n    r2: getValue(el, 'r') || '50%',\n  };\n}\n\nexport function parseCoords(el: SVGGradientElement, size: TSize) {\n  return convertPercentUnitsToValues(\n    parseType(el) === 'linear' ? parseLinearCoords(el) : parseRadialCoords(el),\n    {\n      ...size,\n      gradientUnits: parseGradientUnits(el),\n    },\n  );\n}\n", "import { Color } from '../color/Color';\nimport { iMatrix } from '../constants';\nimport { parseTransformAttribute } from '../parser/parseTransformAttribute';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TMat2D } from '../typedefs';\nimport { uid } from '../util/internals/uid';\nimport { pick } from '../util/misc/pick';\nimport { matrixToSVG } from '../util/misc/svgExport';\nimport { linearDefaultCoords, radialDefaultCoords } from './constants';\nimport { parseColorStops } from './parser/parseColorStops';\nimport { parseCoords } from './parser/parseCoords';\nimport { parseType, parseGradientUnits } from './parser/misc';\nimport type {\n  ColorStop,\n  GradientCoords,\n  GradientOptions,\n  GradientType,\n  GradientUnits,\n  SVGOptions,\n} from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { isPath } from '../util/typeAssertions';\n\n/**\n * Gradient class\n * @class Gradient\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}\n */\nexport class Gradient<\n  S,\n  T extends GradientType = S extends GradientType ? S : 'linear',\n> {\n  /**\n   * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\n   * @type Number\n   * @default 0\n   */\n  declare offsetX: number;\n\n  /**\n   * Vertical offset for aligning gradients coming from SVG when outside pathgroups\n   * @type Number\n   * @default 0\n   */\n  declare offsetY: number;\n\n  /**\n   * A transform matrix to apply to the gradient before painting.\n   * Imported from svg gradients, is not applied with the current transform in the center.\n   * Before this transform is applied, the origin point is at the top left corner of the object\n   * plus the addition of offsetY and offsetX.\n   * @type Number[]\n   * @default null\n   */\n  declare gradientTransform?: TMat2D;\n\n  /**\n   * coordinates units for coords.\n   * If `pixels`, the number of coords are in the same unit of width / height.\n   * If set as `percentage` the coords are still a number, but 1 means 100% of width\n   * for the X and 100% of the height for the y. It can be bigger than 1 and negative.\n   * allowed values pixels or percentage.\n   * @type GradientUnits\n   * @default 'pixels'\n   */\n  declare gradientUnits: GradientUnits;\n\n  /**\n   * Gradient type linear or radial\n   * @type GradientType\n   * @default 'linear'\n   */\n  declare type: T;\n\n  /**\n   * Defines how the gradient is located in space and spread\n   * @type GradientCoords\n   */\n  declare coords: GradientCoords<T>;\n\n  /**\n   * Defines how many colors a gradient has and how they are located on the axis\n   * defined by coords\n   * @type GradientCoords\n   */\n  declare colorStops: ColorStop[];\n\n  /**\n   * If true, this object will not be exported during the serialization of a canvas\n   * @type boolean\n   */\n  declare excludeFromExport?: boolean;\n\n  /**\n   * ID used for SVG export functionalities\n   * @type number | string\n   */\n  declare readonly id: string | number;\n\n  static type = 'Gradient';\n\n  constructor(options: GradientOptions<T>) {\n    const {\n      type = 'linear' as T,\n      gradientUnits = 'pixels',\n      coords = {},\n      colorStops = [],\n      offsetX = 0,\n      offsetY = 0,\n      gradientTransform,\n      id,\n    } = options || {};\n    Object.assign(this, {\n      type,\n      gradientUnits,\n      coords: {\n        ...(type === 'radial' ? radialDefaultCoords : linearDefaultCoords),\n        ...coords,\n      },\n      colorStops,\n      offsetX,\n      offsetY,\n      gradientTransform,\n      id: id ? `${id}_${uid()}` : uid(),\n    });\n  }\n\n  /**\n   * Adds another colorStop\n   * @param {Record<string, string>} colorStop Object with offset and color\n   * @return {Gradient} thisArg\n   */\n  addColorStop(colorStops: Record<string, string>) {\n    for (const position in colorStops) {\n      const color = new Color(colorStops[position]);\n      this.colorStops.push({\n        offset: parseFloat(position),\n        color: color.toRgb(),\n        opacity: color.getAlpha(),\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Returns object representation of a gradient\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {object}\n   */\n  toObject(propertiesToInclude?: (keyof this | string)[]) {\n    return {\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      type: this.type,\n      coords: { ...this.coords },\n      colorStops: this.colorStops.map((colorStop) => ({ ...colorStop })),\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      gradientUnits: this.gradientUnits,\n      gradientTransform: this.gradientTransform\n        ? [...this.gradientTransform]\n        : undefined,\n    };\n  }\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of an gradient\n   * @param {FabricObject} object Object to create a gradient for\n   * @return {String} SVG representation of an gradient (linear/radial)\n   */\n  toSVG(\n    object: FabricObject,\n    {\n      additionalTransform: preTransform,\n    }: { additionalTransform?: string } = {},\n  ) {\n    const markup = [],\n      transform = (\n        this.gradientTransform\n          ? this.gradientTransform.concat()\n          : iMatrix.concat()\n      ) as TMat2D,\n      gradientUnits =\n        this.gradientUnits === 'pixels'\n          ? 'userSpaceOnUse'\n          : 'objectBoundingBox';\n    // colorStops must be sorted ascending, and guarded against deep mutations\n    const colorStops = this.colorStops\n      .map((colorStop) => ({ ...colorStop }))\n      .sort((a, b) => {\n        return a.offset - b.offset;\n      });\n\n    let offsetX = -this.offsetX,\n      offsetY = -this.offsetY;\n    if (gradientUnits === 'objectBoundingBox') {\n      offsetX /= object.width;\n      offsetY /= object.height;\n    } else {\n      offsetX += object.width / 2;\n      offsetY += object.height / 2;\n    }\n    // todo what about polygon/polyline?\n    if (isPath(object) && this.gradientUnits !== 'percentage') {\n      offsetX -= object.pathOffset.x;\n      offsetY -= object.pathOffset.y;\n    }\n    transform[4] -= offsetX;\n    transform[5] -= offsetY;\n\n    const commonAttributes = [\n      `id=\"SVGID_${this.id}\"`,\n      `gradientUnits=\"${gradientUnits}\"`,\n      `gradientTransform=\"${\n        preTransform ? preTransform + ' ' : ''\n      }${matrixToSVG(transform)}\"`,\n      '',\n    ].join(' ');\n\n    if (this.type === 'linear') {\n      const { x1, y1, x2, y2 } = this.coords;\n      markup.push(\n        '<linearGradient ',\n        commonAttributes,\n        ' x1=\"',\n        x1,\n        '\" y1=\"',\n        y1,\n        '\" x2=\"',\n        x2,\n        '\" y2=\"',\n        y2,\n        '\">\\n',\n      );\n    } else if (this.type === 'radial') {\n      const { x1, y1, x2, y2, r1, r2 } = this\n        .coords as GradientCoords<'radial'>;\n      const needsSwap = r1 > r2;\n      // svg radial gradient has just 1 radius. the biggest.\n      markup.push(\n        '<radialGradient ',\n        commonAttributes,\n        ' cx=\"',\n        needsSwap ? x1 : x2,\n        '\" cy=\"',\n        needsSwap ? y1 : y2,\n        '\" r=\"',\n        needsSwap ? r1 : r2,\n        '\" fx=\"',\n        needsSwap ? x2 : x1,\n        '\" fy=\"',\n        needsSwap ? y2 : y1,\n        '\">\\n',\n      );\n      if (needsSwap) {\n        // svg goes from internal to external radius. if radius are inverted, swap color stops.\n        colorStops.reverse(); //  mutates array\n        colorStops.forEach((colorStop) => {\n          colorStop.offset = 1 - colorStop.offset;\n        });\n      }\n      const minRadius = Math.min(r1, r2);\n      if (minRadius > 0) {\n        // i have to shift all colorStops and add new one in 0.\n        const maxRadius = Math.max(r1, r2),\n          percentageShift = minRadius / maxRadius;\n        colorStops.forEach((colorStop) => {\n          colorStop.offset += percentageShift * (1 - colorStop.offset);\n        });\n      }\n    }\n\n    colorStops.forEach(({ color, offset, opacity }) => {\n      markup.push(\n        '<stop ',\n        'offset=\"',\n        offset * 100 + '%',\n        '\" style=\"stop-color:',\n        color,\n        typeof opacity !== 'undefined' ? ';stop-opacity: ' + opacity : ';',\n        '\"/>\\n',\n      );\n    });\n\n    markup.push(\n      this.type === 'linear' ? '</linearGradient>' : '</radialGradient>',\n      '\\n',\n    );\n\n    return markup.join('');\n  }\n  /* _TO_SVG_END_ */\n\n  /**\n   * Returns an instance of CanvasGradient\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @return {CanvasGradient}\n   */\n  toLive(ctx: CanvasRenderingContext2D): CanvasGradient {\n    const { x1, y1, x2, y2, r1, r2 } = this.coords as GradientCoords<'radial'>;\n    const gradient =\n      this.type === 'linear'\n        ? ctx.createLinearGradient(x1, y1, x2, y2)\n        : ctx.createRadialGradient(x1, y1, r1, x2, y2, r2);\n\n    this.colorStops.forEach(({ color, opacity, offset }) => {\n      gradient.addColorStop(\n        offset,\n        typeof opacity !== 'undefined'\n          ? new Color(color).setAlpha(opacity).toRgba()\n          : color,\n      );\n    });\n\n    return gradient;\n  }\n\n  static async fromObject(\n    options: GradientOptions<'linear'>,\n  ): Promise<Gradient<'radial'>>;\n  static async fromObject(\n    options: GradientOptions<'radial'>,\n  ): Promise<Gradient<'radial'>>;\n  static async fromObject(\n    options: GradientOptions<'linear'> | GradientOptions<'radial'>,\n  ) {\n    const { colorStops, gradientTransform } = options;\n    return new this({\n      ...options,\n      colorStops: colorStops\n        ? colorStops.map((colorStop) => ({ ...colorStop }))\n        : undefined,\n      gradientTransform: gradientTransform ? [...gradientTransform] : undefined,\n    });\n  }\n\n  /* _FROM_SVG_START_ */\n  /**\n   * Returns {@link Gradient} instance from an SVG element\n   * @static\n   * @memberOf Gradient\n   * @param {SVGGradientElement} el SVG gradient element\n   * @param {FabricObject} instance\n   * @param {String} opacity A fill-opacity or stroke-opacity attribute to multiply to each stop's opacity.\n   * @param {SVGOptions} svgOptions an object containing the size of the SVG in order to parse correctly gradients\n   * that uses gradientUnits as 'userSpaceOnUse' and percentages.\n   * @return {Gradient} Gradient instance\n   * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\n   * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\n   *\n   *  @example\n   *\n   *  <linearGradient id=\"linearGrad1\">\n   *    <stop offset=\"0%\" stop-color=\"white\"/>\n   *    <stop offset=\"100%\" stop-color=\"black\"/>\n   *  </linearGradient>\n   *\n   *  OR\n   *\n   *  <linearGradient id=\"linearGrad2\">\n   *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\n   *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\n   *  </linearGradient>\n   *\n   *  OR\n   *\n   *  <radialGradient id=\"radialGrad1\">\n   *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\n   *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\n   *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\n   *  </radialGradient>\n   *\n   *  OR\n   *\n   *  <radialGradient id=\"radialGrad2\">\n   *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\n   *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\n   *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\n   *  </radialGradient>\n   *\n   */\n  static fromElement(\n    el: SVGGradientElement,\n    instance: FabricObject,\n    svgOptions: SVGOptions,\n  ): Gradient<GradientType> {\n    const gradientUnits = parseGradientUnits(el);\n    const center = instance._findCenterFromElement();\n    return new this({\n      id: el.getAttribute('id') || undefined,\n      type: parseType(el),\n      coords: parseCoords(el, {\n        width: svgOptions.viewBoxWidth || svgOptions.width,\n        height: svgOptions.viewBoxHeight || svgOptions.height,\n      }),\n      colorStops: parseColorStops(el, svgOptions.opacity),\n      gradientUnits,\n      gradientTransform: parseTransformAttribute(\n        el.getAttribute('gradientTransform') || '',\n      ),\n      ...(gradientUnits === 'pixels'\n        ? {\n            offsetX: instance.width / 2 - center.x,\n            offsetY: instance.height / 2 - center.y,\n          }\n        : {\n            offsetX: 0,\n            offsetY: 0,\n          }),\n    });\n  }\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Gradient, 'gradient');\nclassRegistry.setClass(Gradient, 'linear');\nclassRegistry.setClass(Gradient, 'radial');\n", "import { config } from '../config';\nimport type { Abortable, TCrossOrigin, TMat2D, TSize } from '../typedefs';\nimport { ifNaN } from '../util/internals/ifNaN';\nimport { uid } from '../util/internals/uid';\nimport { loadImage } from '../util/misc/objectEnlive';\nimport { pick } from '../util/misc/pick';\nimport { toFixed } from '../util/misc/toFixed';\nimport { classRegistry } from '../ClassRegistry';\nimport type {\n  PatternRepeat,\n  PatternOptions,\n  SerializedPatternOptions,\n} from './types';\nimport { log } from '../util/internals/console';\n\n/**\n * @see {@link http://fabricjs.com/patterns demo}\n * @see {@link http://fabricjs.com/dynamic-patterns demo}\n */\nexport class Pattern {\n  static type = 'Pattern';\n\n  /**\n   * Legacy identifier of the class. Prefer using this.constructor.type 'Pattern'\n   * or utils like isPattern, or instance of to indentify a pattern in your code.\n   * Will be removed in future versiones\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    return 'pattern';\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * @type PatternRepeat\n   * @defaults\n   */\n  repeat: PatternRepeat = 'repeat';\n\n  /**\n   * Pattern horizontal offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetX = 0;\n\n  /**\n   * Pattern vertical offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetY = 0;\n\n  /**\n   * @type TCrossOrigin\n   * @default\n   */\n  crossOrigin: TCrossOrigin = '';\n\n  /**\n   * transform matrix to change the pattern, imported from svgs.\n   * @todo verify if using the identity matrix as default makes the rest of the code more easy\n   * @type Array\n   * @default\n   */\n  declare patternTransform?: TMat2D;\n\n  /**\n   * The actual pixel source of the pattern\n   */\n  declare source: CanvasImageSource;\n\n  /**\n   * If true, this object will not be exported during the serialization of a canvas\n   * @type boolean\n   */\n  declare excludeFromExport?: boolean;\n\n  /**\n   * ID used for SVG export functionalities\n   * @type number\n   */\n  declare readonly id: number;\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   * @param {option.source} [source] the pattern source, eventually empty or a drawable\n   */\n  constructor(options: PatternOptions) {\n    this.id = uid();\n    Object.assign(this, options);\n  }\n\n  /**\n   * @returns true if {@link source} is an <img> element\n   */\n  isImageSource(): this is { source: HTMLImageElement } {\n    return (\n      !!this.source && typeof (this.source as HTMLImageElement).src === 'string'\n    );\n  }\n\n  /**\n   * @returns true if {@link source} is a <canvas> element\n   */\n  isCanvasSource(): this is { source: HTMLCanvasElement } {\n    return !!this.source && !!(this.source as HTMLCanvasElement).toDataURL;\n  }\n\n  sourceToString(): string {\n    return this.isImageSource()\n      ? this.source.src\n      : this.isCanvasSource()\n        ? this.source.toDataURL()\n        : '';\n  }\n\n  /**\n   * Returns an instance of CanvasPattern\n   * @param {CanvasRenderingContext2D} ctx Context to create pattern\n   * @return {CanvasPattern}\n   */\n  toLive(ctx: CanvasRenderingContext2D): CanvasPattern | null {\n    if (\n      // if the image failed to load, return, and allow rest to continue loading\n      !this.source ||\n      // if an image\n      (this.isImageSource() &&\n        (!this.source.complete ||\n          this.source.naturalWidth === 0 ||\n          this.source.naturalHeight === 0))\n    ) {\n      return null;\n    }\n\n    return ctx.createPattern(this.source, this.repeat)!;\n  }\n\n  /**\n   * Returns object representation of a pattern\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {object} Object representation of a pattern instance\n   */\n  toObject(propertiesToInclude: string[] = []): Record<string, any> {\n    const { repeat, crossOrigin } = this;\n    return {\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      type: 'pattern',\n      source: this.sourceToString(),\n      repeat,\n      crossOrigin,\n      offsetX: toFixed(this.offsetX, config.NUM_FRACTION_DIGITS),\n      offsetY: toFixed(this.offsetY, config.NUM_FRACTION_DIGITS),\n      patternTransform: this.patternTransform\n        ? [...this.patternTransform]\n        : null,\n    };\n  }\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of a pattern\n   */\n  toSVG({ width, height }: TSize): string {\n    const { source: patternSource, repeat, id } = this,\n      patternOffsetX = ifNaN(this.offsetX / width, 0),\n      patternOffsetY = ifNaN(this.offsetY / height, 0),\n      patternWidth =\n        repeat === 'repeat-y' || repeat === 'no-repeat'\n          ? 1 + Math.abs(patternOffsetX || 0)\n          : ifNaN(\n              ((patternSource as HTMLImageElement).width as number) / width,\n              0,\n            ),\n      patternHeight =\n        repeat === 'repeat-x' || repeat === 'no-repeat'\n          ? 1 + Math.abs(patternOffsetY || 0)\n          : ifNaN(\n              ((patternSource as HTMLImageElement).height as number) / height,\n              0,\n            );\n\n    return [\n      `<pattern id=\"SVGID_${id}\" x=\"${patternOffsetX}\" y=\"${patternOffsetY}\" width=\"${patternWidth}\" height=\"${patternHeight}\">`,\n      `<image x=\"0\" y=\"0\" width=\"${\n        (patternSource as HTMLImageElement).width\n      }\" height=\"${\n        (patternSource as HTMLImageElement).height\n      }\" xlink:href=\"${this.sourceToString()}\"></image>`,\n      `</pattern>`,\n      '',\n    ].join('\\n');\n  }\n  /* _TO_SVG_END_ */\n\n  static async fromObject(\n    {\n      type,\n      source,\n      patternTransform,\n      ...otherOptions\n    }: SerializedPatternOptions,\n    options?: Abortable,\n  ): Promise<Pattern> {\n    const img = await loadImage(source, {\n      ...options,\n      crossOrigin: otherOptions.crossOrigin,\n    });\n    return new this({\n      ...otherOptions,\n      patternTransform:\n        patternTransform && (patternTransform.slice(0) as TMat2D),\n      source: img,\n    });\n  }\n}\n\nclassRegistry.setClass(Pattern);\n// kept for compatibility reason\nclassRegistry.setClass(Pattern, 'pattern');\n", "import { Color } from '../color/Color';\nimport type { Point } from '../Point';\nimport type { Shadow } from '../Shadow';\nimport type { Canvas } from '../canvas/Canvas';\nimport type { TBrushEventData } from './typedefs';\n\n/**\n * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\n */\nexport abstract class BaseBrush {\n  /**\n   * Color of a brush\n   * @type String\n   * @default\n   */\n  color = 'rgb(0, 0, 0)';\n\n  /**\n   * Width of a brush, has to be a Number, no string literals\n   * @type Number\n   * @default\n   */\n  width = 1;\n\n  /**\n   * Shadow object representing shadow of this shape.\n   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\n   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\n   * @type Shadow\n   * @default\n   */\n  shadow: Shadow | null = null;\n\n  /**\n   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\n   * @type String\n   * @default\n   */\n  strokeLineCap: CanvasLineCap = 'round';\n\n  /**\n   * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\n   * @type String\n   * @default\n   */\n  strokeLineJoin: CanvasLineJoin = 'round';\n\n  /**\n   * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\n   * @type Number\n   * @default\n   */\n  strokeMiterLimit = 10;\n\n  /**\n   * Stroke Dash Array.\n   * @type Array\n   * @default\n   */\n  strokeDashArray: number[] | null = null;\n\n  /**\n   * When `true`, the free drawing is limited to the whiteboard size. Default to false.\n   * @type Boolean\n   * @default false\n   */\n\n  limitedToCanvasSize = false;\n\n  /**\n   * @todo add type\n   */\n  declare canvas: Canvas;\n\n  constructor(canvas: Canvas) {\n    this.canvas = canvas;\n  }\n\n  abstract _render(): void;\n  abstract onMouseDown(pointer: Point, ev: TBrushEventData): void;\n  abstract onMouseMove(pointer: Point, ev: TBrushEventData): void;\n  /**\n   * @returns true if brush should continue blocking interaction\n   */\n  abstract onMouseUp(ev: TBrushEventData): boolean | void;\n\n  /**\n   * Sets brush styles\n   * @private\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles(ctx: CanvasRenderingContext2D) {\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = this.width;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.miterLimit = this.strokeMiterLimit;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.setLineDash(this.strokeDashArray || []);\n  }\n\n  /**\n   * Sets the transformation on given context\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   * @private\n   */\n  protected _saveAndTransform(ctx: CanvasRenderingContext2D) {\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n  }\n\n  protected needsFullRender() {\n    const color = new Color(this.color);\n    return color.getAlpha() < 1 || !!this.shadow;\n  }\n\n  /**\n   * Sets brush shadow styles\n   * @private\n   */\n  protected _setShadow() {\n    if (!this.shadow || !this.canvas) {\n      return;\n    }\n\n    const canvas = this.canvas,\n      shadow = this.shadow,\n      ctx = canvas.contextTop,\n      zoom = canvas.getZoom() * canvas.getRetinaScaling();\n\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur = shadow.blur * zoom;\n    ctx.shadowOffsetX = shadow.offsetX * zoom;\n    ctx.shadowOffsetY = shadow.offsetY * zoom;\n  }\n\n  /**\n   * Removes brush shadow styles\n   * @private\n   */\n  protected _resetShadow() {\n    const ctx = this.canvas.contextTop;\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * Check is pointer is outside canvas boundaries\n   * @param {Object} pointer\n   * @private\n   */\n  protected _isOutSideCanvas(pointer: Point) {\n    return (\n      pointer.x < 0 ||\n      pointer.x > this.canvas.getWidth() ||\n      pointer.y < 0 ||\n      pointer.y > this.canvas.getHeight()\n    );\n  }\n}\n", "import { config } from '../config';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { XY } from '../Point';\nimport { Point } from '../Point';\nimport { makeBoundingBoxFromPoints } from '../util/misc/boundingBoxFromPoints';\nimport { toFixed } from '../util/misc/toFixed';\nimport {\n  getBoundsOfCurve,\n  joinPath,\n  makePathSimpler,\n  parsePath,\n} from '../util/path';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type {\n  TComplexPathData,\n  TPathSegmentInfo,\n  TSimplePathData,\n} from '../util/path/typedefs';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type {\n  TBBox,\n  TClassProperties,\n  TSVGReviver,\n  TOptions,\n} from '../typedefs';\nimport { CENTER, LEFT, TOP } from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\ninterface UniquePathProps {\n  sourcePath?: string;\n  path?: TSimplePathData;\n}\n\nexport interface SerializedPathProps\n  extends SerializedObjectProps,\n    UniquePathProps {}\n\nexport interface PathProps extends FabricObjectProps, UniquePathProps {}\n\nexport interface IPathBBox extends TBBox {\n  left: number;\n  top: number;\n  pathOffset: Point;\n}\n\nexport class Path<\n  Props extends TOptions<PathProps> = Partial<PathProps>,\n  SProps extends SerializedPathProps = SerializedPathProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  /**\n   * Array of path points\n   * @type Array\n   * @default\n   */\n  declare path: TSimplePathData;\n\n  declare pathOffset: Point;\n\n  declare sourcePath?: string;\n\n  declare segmentsInfo?: TPathSegmentInfo[];\n\n  static type = 'Path';\n\n  static cacheProperties = [...cacheProperties, 'path', 'fillRule'];\n\n  /**\n   * Constructor\n   * @param {TComplexPathData} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n   * @param {Partial<PathProps>} [options] Options object\n   * @return {Path} thisArg\n   */\n  constructor(\n    path: TComplexPathData | string,\n    // todo: evaluate this spread here\n    { path: _, left, top, ...options }: Partial<Props> = {},\n  ) {\n    super();\n    Object.assign(this, Path.ownDefaults);\n    this.setOptions(options);\n    this._setPath(path || [], true);\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  /**\n   * @private\n   * @param {TComplexPathData | string} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n   * @param {boolean} [adjustPosition] pass true to reposition the object according to the bounding box\n   * @returns {Point} top left position of the bounding box, useful for complementary positioning\n   */\n  _setPath(path: TComplexPathData | string, adjustPosition?: boolean) {\n    this.path = makePathSimpler(Array.isArray(path) ? path : parsePath(path));\n    this.setBoundingBox(adjustPosition);\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates, by look at the polyline/polygon points.\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    const bbox = this._calcBoundsFromPath();\n    return new Point(bbox.left + bbox.width / 2, bbox.top + bbox.height / 2);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render path on\n   */\n  _renderPathCommands(ctx: CanvasRenderingContext2D) {\n    const l = -this.pathOffset.x,\n      t = -this.pathOffset.y;\n\n    ctx.beginPath();\n\n    for (const command of this.path) {\n      switch (\n        command[0] // first letter\n      ) {\n        case 'L': // lineto, absolute\n          ctx.lineTo(command[1] + l, command[2] + t);\n          break;\n\n        case 'M': // moveTo, absolute\n          ctx.moveTo(command[1] + l, command[2] + t);\n          break;\n\n        case 'C': // bezierCurveTo, absolute\n          ctx.bezierCurveTo(\n            command[1] + l,\n            command[2] + t,\n            command[3] + l,\n            command[4] + t,\n            command[5] + l,\n            command[6] + t,\n          );\n          break;\n\n        case 'Q': // quadraticCurveTo, absolute\n          ctx.quadraticCurveTo(\n            command[1] + l,\n            command[2] + t,\n            command[3] + l,\n            command[4] + t,\n          );\n          break;\n\n        case 'Z':\n          ctx.closePath();\n          break;\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render path on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    this._renderPathCommands(ctx);\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {string} string representation of an instance\n   */\n  toString() {\n    return `#<Path (${this.complexity()}): { \"top\": ${this.top}, \"left\": ${\n      this.left\n    } }>`;\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      path: this.path.map((pathCmd) => pathCmd.slice()),\n    };\n  }\n\n  /**\n   * Returns dataless object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toDatalessObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    const o = this.toObject<T, K>(propertiesToInclude);\n    if (this.sourcePath) {\n      delete o.path;\n      o.sourcePath = this.sourcePath;\n    }\n    return o;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const path = joinPath(this.path, config.NUM_FRACTION_DIGITS);\n    return [\n      '<path ',\n      'COMMON_PARTS',\n      `d=\"${path}\" stroke-linecap=\"round\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @return the path command's translate transform attribute\n   */\n  _getOffsetTransform() {\n    const digits = config.NUM_FRACTION_DIGITS;\n    return ` translate(${toFixed(-this.pathOffset.x, digits)}, ${toFixed(\n      -this.pathOffset.y,\n      digits,\n    )})`;\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {string} svg representation of an instance\n   */\n  toClipPathSVG(reviver?: TSVGReviver): string {\n    const additionalTransform = this._getOffsetTransform();\n    return (\n      '\\t' +\n      this._createBaseClipPathSVGMarkup(this._toSVG(), {\n        reviver,\n        additionalTransform: additionalTransform,\n      })\n    );\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {string} svg representation of an instance\n   */\n  toSVG(reviver?: TSVGReviver): string {\n    const additionalTransform = this._getOffsetTransform();\n    return this._createBaseSVGMarkup(this._toSVG(), {\n      reviver,\n      additionalTransform: additionalTransform,\n    });\n  }\n\n  /**\n   * Returns number representation of an instance complexity\n   * @return {number} complexity of this instance\n   */\n  complexity() {\n    return this.path.length;\n  }\n\n  setDimensions() {\n    this.setBoundingBox();\n  }\n\n  setBoundingBox(adjustPosition?: boolean) {\n    const { width, height, pathOffset } = this._calcDimensions();\n    this.set({ width, height, pathOffset });\n    // using pathOffset because it match the use case.\n    // if pathOffset change here we need to use left + width/2 , top + height/2\n    adjustPosition && this.setPositionByOrigin(pathOffset, CENTER, CENTER);\n  }\n\n  _calcBoundsFromPath(): TBBox {\n    const bounds: XY[] = [];\n    let subpathStartX = 0,\n      subpathStartY = 0,\n      x = 0, // current x\n      y = 0; // current y\n\n    for (const command of this.path) {\n      // current instruction\n      switch (\n        command[0] // first letter\n      ) {\n        case 'L': // lineto, absolute\n          x = command[1];\n          y = command[2];\n          bounds.push({ x: subpathStartX, y: subpathStartY }, { x, y });\n          break;\n\n        case 'M': // moveTo, absolute\n          x = command[1];\n          y = command[2];\n          subpathStartX = x;\n          subpathStartY = y;\n          break;\n\n        case 'C': // bezierCurveTo, absolute\n          bounds.push(\n            ...getBoundsOfCurve(\n              x,\n              y,\n              command[1],\n              command[2],\n              command[3],\n              command[4],\n              command[5],\n              command[6],\n            ),\n          );\n          x = command[5];\n          y = command[6];\n          break;\n\n        case 'Q': // quadraticCurveTo, absolute\n          bounds.push(\n            ...getBoundsOfCurve(\n              x,\n              y,\n              command[1],\n              command[2],\n              command[1],\n              command[2],\n              command[3],\n              command[4],\n            ),\n          );\n          x = command[3];\n          y = command[4];\n          break;\n\n        case 'Z':\n          x = subpathStartX;\n          y = subpathStartY;\n          break;\n      }\n    }\n    return makeBoundingBoxFromPoints(bounds);\n  }\n\n  /**\n   * @private\n   */\n  _calcDimensions(): IPathBBox {\n    const bbox = this._calcBoundsFromPath();\n\n    return {\n      ...bbox,\n      pathOffset: new Point(\n        bbox.left + bbox.width / 2,\n        bbox.top + bbox.height / 2,\n      ),\n    };\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `Path.fromElement`)\n   * @static\n   * @memberOf Path\n   * @see http://www.w3.org/TR/SVG/paths.html#PathElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES, 'd'];\n\n  /**\n   * Creates an instance of Path from an object\n   * @static\n   * @memberOf Path\n   * @param {Object} object\n   * @returns {Promise<Path>}\n   */\n  static fromObject<T extends TOptions<SerializedPathProps>>(object: T) {\n    return this._fromObject<Path>(object, {\n      extraParam: 'path',\n    });\n  }\n\n  /**\n   * Creates an instance of Path from an SVG <path> element\n   * @static\n   * @memberOf Path\n   * @param {HTMLElement} element to parse\n   * @param {Partial<PathProps>} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Partial<PathProps>,\n    cssRules?: CSSRules,\n  ) {\n    const { d, ...parsedAttributes } = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n    return new this(d, {\n      ...parsedAttributes,\n      ...options,\n      // we pass undefined to instruct the constructor to position the object using the bbox\n      left: undefined,\n      top: undefined,\n    });\n  }\n}\n\nclassRegistry.setClass(Path);\nclassRegistry.setSVGClass(Path);\n\n/* _FROM_SVG_START_ */\n", "import type { ModifierKey, TEvent } from '../EventTypeDefs';\nimport type { Point } from '../Point';\nimport { Shadow } from '../Shadow';\nimport { Path } from '../shapes/Path';\nimport { getSmoothPathFromPoints, joinPath } from '../util/path';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { TSimplePathData } from '../util/path/typedefs';\n\n/**\n * @private\n * @param {TSimplePathData} pathData SVG path commands\n * @returns {boolean}\n */\nfunction isEmptySVGPath(pathData: TSimplePathData): boolean {\n  return joinPath(pathData) === 'M 0 0 Q 0 0 0 0 L 0 0';\n}\n\nexport class PencilBrush extends BaseBrush {\n  /**\n   * Discard points that are less than `decimate` pixel distant from each other\n   * @type Number\n   * @default 0.4\n   */\n  decimate = 0.4;\n\n  /**\n   * Draws a straight line between last recorded point to current pointer\n   * Used for `shift` functionality\n   *\n   * @type boolean\n   * @default false\n   */\n  drawStraightLine = false;\n\n  /**\n   * The event modifier key that makes the brush draw a straight line.\n   * If `null` or 'none' or any other string that is not a modifier key the feature is disabled.\n   * @type {ModifierKey | undefined | null}\n   */\n  straightLineKey: ModifierKey | undefined | null = 'shiftKey';\n\n  protected declare _points: Point[];\n  protected declare _hasStraightLine: boolean;\n  protected declare oldEnd?: Point;\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this._points = [];\n    this._hasStraightLine = false;\n  }\n\n  needsFullRender() {\n    return super.needsFullRender() || this._hasStraightLine;\n  }\n\n  static drawSegment(ctx: CanvasRenderingContext2D, p1: Point, p2: Point) {\n    const midPoint = p1.midPointFrom(p2);\n    ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n    return midPoint;\n  }\n\n  /**\n   * Invoked on mouse down\n   * @param {Point} pointer\n   */\n  onMouseDown(pointer: Point, { e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return;\n    }\n    this.drawStraightLine = !!this.straightLineKey && e[this.straightLineKey];\n    this._prepareForDrawing(pointer);\n    // capture coordinates immediately\n    // this allows to draw dots (when movement never occurs)\n    this._addPoint(pointer);\n    this._render();\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point, { e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return;\n    }\n    this.drawStraightLine = !!this.straightLineKey && e[this.straightLineKey];\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    if (this._addPoint(pointer) && this._points.length > 1) {\n      if (this.needsFullRender()) {\n        // redraw curve\n        // clear top canvas\n        this.canvas.clearContext(this.canvas.contextTop);\n        this._render();\n      } else {\n        const points = this._points,\n          length = points.length,\n          ctx = this.canvas.contextTop;\n        // draw the curve update\n        this._saveAndTransform(ctx);\n        if (this.oldEnd) {\n          ctx.beginPath();\n          ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\n        }\n        this.oldEnd = PencilBrush.drawSegment(\n          ctx,\n          points[length - 2],\n          points[length - 1],\n        );\n        ctx.stroke();\n        ctx.restore();\n      }\n    }\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp({ e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return true;\n    }\n    this.drawStraightLine = false;\n    this.oldEnd = undefined;\n    this._finalizeAndAddPath();\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {Point} pointer Actual mouse position related to the canvas.\n   */\n  _prepareForDrawing(pointer: Point) {\n    this._reset();\n    this._addPoint(pointer);\n    this.canvas.contextTop.moveTo(pointer.x, pointer.y);\n  }\n\n  /**\n   * @private\n   * @param {Point} point Point to be added to points array\n   */\n  _addPoint(point: Point) {\n    if (\n      this._points.length > 1 &&\n      point.eq(this._points[this._points.length - 1])\n    ) {\n      return false;\n    }\n    if (this.drawStraightLine && this._points.length > 1) {\n      this._hasStraightLine = true;\n      this._points.pop();\n    }\n    this._points.push(point);\n    return true;\n  }\n\n  /**\n   * Clear points array and set contextTop canvas style.\n   * @private\n   */\n  _reset() {\n    this._points = [];\n    this._setBrushStyles(this.canvas.contextTop);\n    this._setShadow();\n    this._hasStraightLine = false;\n  }\n\n  /**\n   * Draw a smooth path on the topCanvas using quadraticCurveTo\n   * @private\n   * @param {CanvasRenderingContext2D} [ctx]\n   */\n  _render(ctx: CanvasRenderingContext2D = this.canvas.contextTop) {\n    let p1 = this._points[0],\n      p2 = this._points[1];\n    this._saveAndTransform(ctx);\n    ctx.beginPath();\n    //if we only have 2 points in the path and they are the same\n    //it means that the user only clicked the canvas without moving the mouse\n    //then we should be drawing a dot. A path isn't drawn between two identical dots\n    //that's why we set them apart a bit\n    if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n      const width = this.width / 1000;\n      p1.x -= width;\n      p2.x += width;\n    }\n    ctx.moveTo(p1.x, p1.y);\n\n    for (let i = 1; i < this._points.length; i++) {\n      // we pick the point between pi + 1 & pi + 2 as the\n      // end point and p1 as our control point.\n      PencilBrush.drawSegment(ctx, p1, p2);\n      p1 = this._points[i];\n      p2 = this._points[i + 1];\n    }\n    // Draw last line as a straight line while\n    // we wait for the next point to be able to calculate\n    // the bezier control point\n    ctx.lineTo(p1.x, p1.y);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * Converts points to SVG path\n   * @param {Point[]} points Array of points\n   * @return {TSimplePathData} SVG path commands\n   */\n  convertPointsToSVGPath(points: Point[]): TSimplePathData {\n    const correction = this.width / 1000;\n    return getSmoothPathFromPoints(points, correction);\n  }\n\n  /**\n   * Creates a Path object to add on canvas\n   * @param {TSimplePathData} pathData Path data\n   * @return {Path} Path to add on canvas\n   */\n  createPath(pathData: TSimplePathData): Path {\n    const path = new Path(pathData, {\n      fill: null,\n      stroke: this.color,\n      strokeWidth: this.width,\n      strokeLineCap: this.strokeLineCap,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeDashArray: this.strokeDashArray,\n    });\n    if (this.shadow) {\n      this.shadow.affectStroke = true;\n      path.shadow = new Shadow(this.shadow);\n    }\n\n    return path;\n  }\n\n  /**\n   * Decimate points array with the decimate value\n   */\n  decimatePoints(points: Point[], distance: number) {\n    if (points.length <= 2) {\n      return points;\n    }\n    let lastPoint = points[0],\n      cDistance;\n    const zoom = this.canvas.getZoom(),\n      adjustedDistance = Math.pow(distance / zoom, 2),\n      l = points.length - 1,\n      newPoints = [lastPoint];\n    for (let i = 1; i < l - 1; i++) {\n      cDistance =\n        Math.pow(lastPoint.x - points[i].x, 2) +\n        Math.pow(lastPoint.y - points[i].y, 2);\n      if (cDistance >= adjustedDistance) {\n        lastPoint = points[i];\n        newPoints.push(lastPoint);\n      }\n    }\n    // Add the last point from the original line to the end of the array.\n    // This ensures decimate doesn't delete the last point on the line, and ensures the line is > 1 point.\n    newPoints.push(points[l]);\n    return newPoints;\n  }\n\n  /**\n   * On mouseup after drawing the path on contextTop canvas\n   * we use the points captured to create an new Path object\n   * and add it to the canvas.\n   */\n  _finalizeAndAddPath() {\n    const ctx = this.canvas.contextTop;\n    ctx.closePath();\n    if (this.decimate) {\n      this._points = this.decimatePoints(this._points, this.decimate);\n    }\n    const pathData = this.convertPointsToSVGPath(this._points);\n    if (isEmptySVGPath(pathData)) {\n      // do not create 0 width/height paths, as they are\n      // rendered inconsistently across browsers\n      // Firefox 4, for example, renders a dot,\n      // whereas Chrome 10 renders nothing\n      this.canvas.requestRenderAll();\n      return;\n    }\n\n    const path = this.createPath(pathData);\n    this.canvas.clearContext(this.canvas.contextTop);\n    this.canvas.fire('before:path:created', { path: path });\n    this.canvas.add(path);\n    this.canvas.requestRenderAll();\n    path.setCoords();\n    this._resetShadow();\n\n    // fire event 'path' created\n    this.canvas.fire('path:created', { path: path });\n  }\n}\n", "import type { ObjectEvents } from '../EventTypeDefs';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport { cos } from '../util/misc/cos';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { sin } from '../util/misc/sin';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { CSSRules } from '../parser/typedefs';\nimport { SCALE_X, SCALE_Y } from '../constants';\n\ninterface UniqueCircleProps {\n  /**\n   * Radius of this circle\n   * @type Number\n   * @default 0\n   */\n  radius: number;\n\n  /**\n   * Angle for the start of the circle, in degrees.\n   * @type TDegree 0 - 359\n   * @default 0\n   */\n  startAngle: number;\n\n  /**\n   * Angle for the end of the circle, in degrees\n   * @type TDegree 1 - 360\n   * @default 360\n   */\n  endAngle: number;\n\n  /**\n   * Orientation for the direction of the circle.\n   * Setting to true will switch the arc of the circle to traverse from startAngle to endAngle in a counter-clockwise direction.\n   * Note: this will only change how the circle is drawn, and does not affect rotational transformation.\n   * @default false\n   */\n  counterClockwise: boolean;\n}\n\nexport interface SerializedCircleProps\n  extends SerializedObjectProps,\n    UniqueCircleProps {}\n\nexport interface CircleProps extends FabricObjectProps, UniqueCircleProps {}\n\nconst CIRCLE_PROPS = [\n  'radius',\n  'startAngle',\n  'endAngle',\n  'counterClockwise',\n] as const;\n\nexport const circleDefaultValues: Partial<TClassProperties<Circle>> = {\n  radius: 0,\n  startAngle: 0,\n  endAngle: 360,\n  counterClockwise: false,\n};\n\nexport class Circle<\n    Props extends TOptions<CircleProps> = Partial<CircleProps>,\n    SProps extends SerializedCircleProps = SerializedCircleProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements UniqueCircleProps\n{\n  declare radius: number;\n  declare startAngle: number;\n  declare endAngle: number;\n  declare counterClockwise: boolean;\n\n  static type = 'Circle';\n\n  static cacheProperties = [...cacheProperties, ...CIRCLE_PROPS];\n\n  static ownDefaults = circleDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Circle.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Circle.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n\n    if (key === 'radius') {\n      this.setRadius(value);\n    }\n\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.arc(\n      0,\n      0,\n      this.radius,\n      degreesToRadians(this.startAngle),\n      degreesToRadians(this.endAngle),\n      this.counterClockwise,\n    );\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns horizontal radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRadiusX(): number {\n    return this.get('radius') * this.get(SCALE_X);\n  }\n\n  /**\n   * Returns vertical radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRadiusY(): number {\n    return this.get('radius') * this.get(SCALE_Y);\n  }\n\n  /**\n   * Sets radius of an object (and updates width accordingly)\n   */\n  setRadius(value: number) {\n    this.radius = value;\n    this.set({ width: value * 2, height: value * 2 });\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...CIRCLE_PROPS, ...propertiesToInclude]);\n  }\n\n  /* _TO_SVG_START_ */\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(): string[] {\n    const angle = (this.endAngle - this.startAngle) % 360;\n\n    if (angle === 0) {\n      return [\n        '<circle ',\n        'COMMON_PARTS',\n        'cx=\"0\" cy=\"0\" ',\n        'r=\"',\n        `${this.radius}`,\n        '\" />\\n',\n      ];\n    } else {\n      const { radius } = this;\n      const start = degreesToRadians(this.startAngle),\n        end = degreesToRadians(this.endAngle),\n        startX = cos(start) * radius,\n        startY = sin(start) * radius,\n        endX = cos(end) * radius,\n        endY = sin(end) * radius,\n        largeFlag = angle > 180 ? 1 : 0,\n        sweepFlag = this.counterClockwise ? 0 : 1;\n      return [\n        `<path d=\"M ${startX} ${startY} A ${radius} ${radius} 0 ${largeFlag} ${sweepFlag} ${endX} ${endY}\" `,\n        'COMMON_PARTS',\n        ' />\\n',\n      ];\n    }\n  }\n  /* _TO_SVG_END_ */\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Circle.fromElement})\n   * @static\n   * @memberOf Circle\n   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\n   */\n  static ATTRIBUTE_NAMES = ['cx', 'cy', 'r', ...SHARED_ATTRIBUTES];\n\n  /**\n   * Returns {@link Circle} instance from an SVG element\n   * @static\n   * @memberOf Circle\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Partial Circle object to default missing properties on the element.\n   * @throws {Error} If value of `r` attribute is missing or invalid\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ): Promise<Circle> {\n    const {\n      left = 0,\n      top = 0,\n      radius = 0,\n      ...otherParsedAttributes\n    } = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    ) as Partial<CircleProps>;\n\n    // this probably requires to be fixed for default origins not being top/left.\n\n    return new this({\n      ...otherParsedAttributes,\n      radius,\n      left: left - radius,\n      top: top - radius,\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * @todo how do we declare this??\n   */\n  static fromObject<T extends TOptions<SerializedCircleProps>>(object: T) {\n    return super._fromObject<Circle>(object);\n  }\n}\n\nclassRegistry.setClass(Circle);\nclassRegistry.setSVGClass(Circle);\n", "import { Color } from '../color/Color';\nimport type { Point } from '../Point';\nimport { Shadow } from '../Shadow';\nimport { Circle } from '../shapes/Circle';\nimport { Group } from '../shapes/Group';\nimport { getRandomInt } from '../util/internals/getRandomInt';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { CircleBrushPoint } from './typedefs';\nimport { CENTER } from '../constants';\n\nexport class CircleBrush extends BaseBrush {\n  /**\n   * Width of a brush\n   * @type Number\n   * @default\n   */\n  width = 10;\n\n  declare points: CircleBrushPoint[];\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this.points = [];\n  }\n\n  /**\n   * Invoked inside on mouse down and mouse move\n   * @param {Point} pointer\n   */\n  drawDot(pointer: Point) {\n    const point = this.addPoint(pointer),\n      ctx = this.canvas.contextTop;\n    this._saveAndTransform(ctx);\n    this.dot(ctx, point);\n    ctx.restore();\n  }\n\n  dot(ctx: CanvasRenderingContext2D, point: CircleBrushPoint) {\n    ctx.fillStyle = point.fill;\n    ctx.beginPath();\n    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  /**\n   * Invoked on mouse down\n   */\n  onMouseDown(pointer: Point) {\n    this.points = [];\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n    this.drawDot(pointer);\n  }\n\n  /**\n   * Render the full state of the brush\n   * @private\n   */\n  _render() {\n    const ctx = this.canvas.contextTop,\n      points = this.points;\n    this._saveAndTransform(ctx);\n    for (let i = 0; i < points.length; i++) {\n      this.dot(ctx, points[i]);\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    if (this.needsFullRender()) {\n      this.canvas.clearContext(this.canvas.contextTop);\n      this.addPoint(pointer);\n      this._render();\n    } else {\n      this.drawDot(pointer);\n    }\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp() {\n    const originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    const circles: Circle[] = [];\n\n    for (let i = 0; i < this.points.length; i++) {\n      const point = this.points[i],\n        circle = new Circle({\n          radius: point.radius,\n          left: point.x,\n          top: point.y,\n          originX: CENTER,\n          originY: CENTER,\n          fill: point.fill,\n        });\n\n      this.shadow && (circle.shadow = new Shadow(this.shadow));\n\n      circles.push(circle);\n    }\n    const group = new Group(circles, { canvas: this.canvas });\n\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  }\n\n  /**\n   * @param {Object} pointer\n   * @return {Point} Just added pointer point\n   */\n  addPoint({ x, y }: Point) {\n    const pointerPoint: CircleBrushPoint = {\n      x,\n      y,\n      radius: getRandomInt(Math.max(0, this.width - 20), this.width + 20) / 2,\n      fill: new Color(this.color).setAlpha(getRandomInt(0, 100) / 100).toRgba(),\n    };\n\n    this.points.push(pointerPoint);\n\n    return pointerPoint;\n  }\n}\n", "import type { Point } from '../Point';\nimport { Group } from '../shapes/Group';\nimport { Shadow } from '../Shadow';\nimport { Rect } from '../shapes/Rect';\nimport { getRandomInt } from '../util/internals/getRandomInt';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { SprayBrushPoint } from './typedefs';\nimport { CENTER } from '../constants';\n\n/**\n *\n * @param rects\n * @returns\n */\nfunction getUniqueRects(rects: Rect[]) {\n  const uniqueRects: Record<string, boolean> = {};\n  const uniqueRectsArray: Rect[] = [];\n\n  for (let i = 0, key: string; i < rects.length; i++) {\n    key = `${rects[i].left}${rects[i].top}`;\n    if (!uniqueRects[key]) {\n      uniqueRects[key] = true;\n      uniqueRectsArray.push(rects[i]);\n    }\n  }\n\n  return uniqueRectsArray;\n}\n\nexport class SprayBrush extends BaseBrush {\n  /**\n   * Width of a spray\n   * @type Number\n   * @default\n   */\n  width = 10;\n\n  /**\n   * Density of a spray (number of dots per chunk)\n   * @type Number\n   * @default\n   */\n  density = 20;\n\n  /**\n   * Width of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidth = 1;\n\n  /**\n   * Width variance of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidthVariance = 1;\n\n  /**\n   * Whether opacity of a dot should be random\n   * @type Boolean\n   * @default\n   */\n  randomOpacity = false;\n\n  /**\n   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\n   * @type Boolean\n   * @default\n   */\n  optimizeOverlapping = true;\n\n  private declare sprayChunks: SprayBrushPoint[][];\n\n  private declare sprayChunk: SprayBrushPoint[];\n\n  /**\n   * Constructor\n   * @param {Canvas} canvas\n   * @return {SprayBrush} Instance of a spray brush\n   */\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this.sprayChunks = [];\n    this.sprayChunk = [];\n  }\n\n  /**\n   * Invoked on mouse down\n   * @param {Point} pointer\n   */\n  onMouseDown(pointer: Point) {\n    this.sprayChunks = [];\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n\n    this.addSprayChunk(pointer);\n    this.renderChunck(this.sprayChunk);\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    this.addSprayChunk(pointer);\n    this.renderChunck(this.sprayChunk);\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp() {\n    const originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    const rects: Rect[] = [];\n\n    for (let i = 0; i < this.sprayChunks.length; i++) {\n      const sprayChunk = this.sprayChunks[i];\n      for (let j = 0; j < sprayChunk.length; j++) {\n        const chunck = sprayChunk[j];\n        const rect = new Rect({\n          width: chunck.width,\n          height: chunck.width,\n          left: chunck.x + 1,\n          top: chunck.y + 1,\n          originX: CENTER,\n          originY: CENTER,\n          fill: this.color,\n        });\n        rects.push(rect);\n      }\n    }\n\n    const group = new Group(\n      this.optimizeOverlapping ? getUniqueRects(rects) : rects,\n      {\n        objectCaching: true,\n        subTargetCheck: false,\n        interactive: false,\n      },\n    );\n    this.shadow && group.set('shadow', new Shadow(this.shadow));\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  }\n\n  renderChunck(sprayChunck: SprayBrushPoint[]) {\n    const ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (let i = 0; i < sprayChunck.length; i++) {\n      const point = sprayChunck[i];\n      ctx.globalAlpha = point.opacity;\n      ctx.fillRect(point.x, point.y, point.width, point.width);\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Render all spray chunks\n   */\n  _render() {\n    const ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (let i = 0; i < this.sprayChunks.length; i++) {\n      this.renderChunck(this.sprayChunks[i]);\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @param {Point} pointer\n   */\n  addSprayChunk(pointer: Point) {\n    this.sprayChunk = [];\n    const radius = this.width / 2;\n\n    for (let i = 0; i < this.density; i++) {\n      this.sprayChunk.push({\n        x: getRandomInt(pointer.x - radius, pointer.x + radius),\n        y: getRandomInt(pointer.y - radius, pointer.y + radius),\n        width: this.dotWidthVariance\n          ? getRandomInt(\n              // bottom clamp width to 1\n              Math.max(1, this.dotWidth - this.dotWidthVariance),\n              this.dotWidth + this.dotWidthVariance,\n            )\n          : this.dotWidth,\n        opacity: this.randomOpacity ? getRandomInt(0, 100) / 100 : 1,\n      });\n    }\n\n    this.sprayChunks.push(this.sprayChunk);\n  }\n}\n", "import { Pattern } from '../Pattern';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type { Canvas } from '../canvas/Canvas';\nimport { PencilBrush } from './PencilBrush';\nimport type { TSimplePathData } from '../util/path/typedefs';\n\nexport class PatternBrush extends PencilBrush {\n  declare source?: CanvasImageSource;\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n  }\n\n  getPatternSrc() {\n    const dotWidth = 20,\n      dotDistance = 5,\n      patternCanvas = createCanvasElement(),\n      patternCtx = patternCanvas.getContext('2d');\n\n    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n    if (patternCtx) {\n      patternCtx.fillStyle = this.color;\n      patternCtx.beginPath();\n      patternCtx.arc(\n        dotWidth / 2,\n        dotWidth / 2,\n        dotWidth / 2,\n        0,\n        Math.PI * 2,\n        false,\n      );\n      patternCtx.closePath();\n      patternCtx.fill();\n    }\n    return patternCanvas;\n  }\n\n  /**\n   * Creates \"pattern\" instance property\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  getPattern(ctx: CanvasRenderingContext2D) {\n    return ctx.createPattern(this.source || this.getPatternSrc(), 'repeat');\n  }\n\n  /**\n   * Sets brush styles\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles(ctx: CanvasRenderingContext2D) {\n    super._setBrushStyles(ctx);\n    const pattern = this.getPattern(ctx);\n    pattern && (ctx.strokeStyle = pattern);\n  }\n\n  /**\n   * Creates path\n   */\n  createPath(pathData: TSimplePathData) {\n    const path = super.createPath(pathData),\n      topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\n\n    path.stroke = new Pattern({\n      source: this.source || this.getPatternSrc(),\n      offsetX: -topLeft.x,\n      offsetY: -topLeft.y,\n    });\n    return path;\n  }\n}\n", "import { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport { Point } from '../Point';\nimport { isFiller } from '../util/typeAssertions';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { makeBoundingBoxFromPoints } from '../util';\nimport { CENTER, LEFT, TOP } from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\n// @TODO this code is terrible and Line should be a special case of polyline.\n\nconst coordProps = ['x1', 'x2', 'y1', 'y2'] as const;\n\ninterface UniqueLineProps {\n  x1: number;\n  x2: number;\n  y1: number;\n  y2: number;\n}\n\nexport interface SerializedLineProps\n  extends SerializedObjectProps,\n    UniqueLineProps {}\n\nexport class Line<\n    Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n    SProps extends SerializedLineProps = SerializedLineProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements UniqueLineProps\n{\n  /**\n   * x value or first line edge\n   * @type number\n   * @default\n   */\n  declare x1: number;\n\n  /**\n   * y value or first line edge\n   * @type number\n   * @default\n   */\n  declare y1: number;\n\n  /**\n   * x value or second line edge\n   * @type number\n   * @default\n   */\n  declare x2: number;\n\n  /**\n   * y value or second line edge\n   * @type number\n   * @default\n   */\n  declare y2: number;\n\n  static type = 'Line';\n\n  static cacheProperties = [...cacheProperties, ...coordProps];\n  /**\n   * Constructor\n   * @param {Array} [points] Array of points\n   * @param {Object} [options] Options object\n   * @return {Line} thisArg\n   */\n  constructor([x1, y1, x2, y2] = [0, 0, 0, 0], options: Partial<Props> = {}) {\n    super();\n    Object.assign(this, Line.ownDefaults);\n    this.setOptions(options);\n    this.x1 = x1;\n    this.x2 = x2;\n    this.y1 = y1;\n    this.y2 = y2;\n    this._setWidthHeight();\n    const { left, top } = options;\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  /**\n   * @private\n   * @param {Object} [options] Options\n   */\n  _setWidthHeight() {\n    const { x1, y1, x2, y2 } = this;\n    this.width = Math.abs(x2 - x1);\n    this.height = Math.abs(y2 - y1);\n    const { left, top, width, height } = makeBoundingBoxFromPoints([\n      { x: x1, y: y1 },\n      { x: x2, y: y2 },\n    ]);\n    const position = new Point(left + width / 2, top + height / 2);\n    this.setPositionByOrigin(position, CENTER, CENTER);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n    if (coordProps.includes(key as keyof UniqueLineProps)) {\n      // this doesn't make sense very much, since setting x1 when top or left\n      // are already set, is just going to show a strange result since the\n      // line will move way more than the developer expect.\n      // in fabric5 it worked only when the line didn't have extra transformations,\n      // in fabric6 too. With extra transform they behave bad in different ways.\n      // This needs probably a good rework or a tutorial if you have to create a dynamic line\n      this._setWidthHeight();\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n\n    const p = this.calcLinePoints();\n    ctx.moveTo(p.x1, p.y1);\n    ctx.lineTo(p.x2, p.y2);\n\n    ctx.lineWidth = this.strokeWidth;\n\n    // TODO: test this\n    // make sure setting \"fill\" changes color of a line\n    // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\n    const origStrokeStyle = ctx.strokeStyle;\n    if (isFiller(this.stroke)) {\n      ctx.strokeStyle = this.stroke.toLive(ctx)!;\n    } else {\n      ctx.strokeStyle = this.stroke ?? ctx.fillStyle;\n    }\n    this.stroke && this._renderStroke(ctx);\n    ctx.strokeStyle = origStrokeStyle;\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    return new Point((this.x1 + this.x2) / 2, (this.y1 + this.y2) / 2);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @method toObject\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      ...this.calcLinePoints(),\n    };\n  }\n\n  /*\n   * Calculate object dimensions from its properties\n   * @private\n   */\n  _getNonTransformedDimensions(): Point {\n    const dim = super._getNonTransformedDimensions();\n    if (this.strokeLineCap === 'butt') {\n      if (this.width === 0) {\n        dim.y -= this.strokeWidth;\n      }\n      if (this.height === 0) {\n        dim.x -= this.strokeWidth;\n      }\n    }\n    return dim;\n  }\n\n  /**\n   * Recalculates line points given width and height\n   * Those points are simply placed around the center,\n   * This is not useful outside internal render functions and svg output\n   * Is not meant to be for the developer.\n   * @private\n   */\n  calcLinePoints(): UniqueLineProps {\n    const { x1: _x1, x2: _x2, y1: _y1, y2: _y2, width, height } = this;\n    const xMult = _x1 <= _x2 ? -1 : 1,\n      yMult = _y1 <= _y2 ? -1 : 1,\n      x1 = (xMult * width) / 2,\n      y1 = (yMult * height) / 2,\n      x2 = (xMult * -width) / 2,\n      y2 = (yMult * -height) / 2;\n\n    return {\n      x1,\n      x2,\n      y1,\n      y2,\n    };\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const { x1, x2, y1, y2 } = this.calcLinePoints();\n    return [\n      '<line ',\n      'COMMON_PARTS',\n      `x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\" />\\n`,\n    ];\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Line.fromElement})\n   * @static\n   * @memberOf Line\n   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\n   */\n  static ATTRIBUTE_NAMES = SHARED_ATTRIBUTES.concat(coordProps);\n\n  /**\n   * Returns Line instance from an SVG element\n   * @static\n   * @memberOf Line\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {Function} [callback] callback function invoked after parsing\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const {\n      x1 = 0,\n      y1 = 0,\n      x2 = 0,\n      y2 = 0,\n      ...parsedAttributes\n    } = parseAttributes(element, this.ATTRIBUTE_NAMES, cssRules);\n    return new this([x1, y1, x2, y2], parsedAttributes);\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns Line instance from an object representation\n   * @static\n   * @memberOf Line\n   * @param {Object} object Object to create an instance from\n   * @returns {Promise<Line>}\n   */\n  static fromObject<T extends TOptions<SerializedLineProps>>({\n    x1,\n    y1,\n    x2,\n    y2,\n    ...object\n  }: T) {\n    return this._fromObject<Line>(\n      {\n        ...object,\n        points: [x1, y1, x2, y2],\n      },\n      {\n        extraParam: 'points',\n      },\n    );\n  }\n}\n\nclassRegistry.setClass(Line);\nclassRegistry.setSVGClass(Line);\n", "import { classRegistry } from '../ClassRegistry';\nimport { FabricObject } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { TClassProperties, TOptions } from '../typedefs';\nimport type { ObjectEvents } from '../EventTypeDefs';\n\nexport const triangleDefaultValues: Partial<TClassProperties<Triangle>> = {\n  width: 100,\n  height: 100,\n};\n\nexport class Triangle<\n    Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  static type = 'Triangle';\n\n  static ownDefaults = triangleDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...Triangle.ownDefaults };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Triangle.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const widthBy2 = this.width / 2,\n      heightBy2 = this.height / 2;\n\n    ctx.beginPath();\n    ctx.moveTo(-widthBy2, heightBy2);\n    ctx.lineTo(0, -heightBy2);\n    ctx.lineTo(widthBy2, heightBy2);\n    ctx.closePath();\n\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const widthBy2 = this.width / 2,\n      heightBy2 = this.height / 2,\n      points = `${-widthBy2} ${heightBy2},0 ${-heightBy2},${widthBy2} ${heightBy2}`;\n    return ['<polygon ', 'COMMON_PARTS', 'points=\"', points, '\" />'];\n  }\n}\n\nclassRegistry.setClass(Triangle);\nclassRegistry.setSVGClass(Triangle);\n", "import { SCALE_X, SCALE_Y, twoMathPi } from '../constants';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const ellipseDefaultValues: Partial<TClassProperties<Ellipse>> = {\n  rx: 0,\n  ry: 0,\n};\n\ninterface UniqueEllipseProps {\n  rx: number;\n  ry: number;\n}\n\nexport interface SerializedEllipseProps\n  extends SerializedObjectProps,\n    UniqueEllipseProps {}\n\nexport interface EllipseProps extends FabricObjectProps, UniqueEllipseProps {}\n\nconst ELLIPSE_PROPS = ['rx', 'ry'] as const;\n\nexport class Ellipse<\n    Props extends TOptions<EllipseProps> = Partial<EllipseProps>,\n    SProps extends SerializedEllipseProps = SerializedEllipseProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements EllipseProps\n{\n  /**\n   * Horizontal radius\n   * @type Number\n   * @default\n   */\n  declare rx: number;\n\n  /**\n   * Vertical radius\n   * @type Number\n   * @default\n   */\n  declare ry: number;\n\n  static type = 'Ellipse';\n\n  static cacheProperties = [...cacheProperties, ...ELLIPSE_PROPS];\n\n  static ownDefaults = ellipseDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Ellipse.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Ellipse.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   * @return {Ellipse} thisArg\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n    switch (key) {\n      case 'rx':\n        this.rx = value;\n        this.set('width', value * 2);\n        break;\n\n      case 'ry':\n        this.ry = value;\n        this.set('height', value * 2);\n        break;\n    }\n    return this;\n  }\n\n  /**\n   * Returns horizontal radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRx() {\n    return this.get('rx') * this.get(SCALE_X);\n  }\n\n  /**\n   * Returns Vertical radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRy() {\n    return this.get('ry') * this.get(SCALE_Y);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...ELLIPSE_PROPS, ...propertiesToInclude]);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(): string[] {\n    return [\n      '<ellipse ',\n      'COMMON_PARTS',\n      `cx=\"0\" cy=\"0\" rx=\"${this.rx}\" ry=\"${this.ry}\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.save();\n    ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);\n    ctx.arc(0, 0, this.rx, 0, twoMathPi, false);\n    ctx.restore();\n    this._renderPaintInOrder(ctx);\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Ellipse.fromElement})\n   * @static\n   * @memberOf Ellipse\n   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES, 'cx', 'cy', 'rx', 'ry'];\n\n  /**\n   * Returns {@link Ellipse} instance from an SVG element\n   * @static\n   * @memberOf Ellipse\n   * @param {HTMLElement} element Element to parse\n   * @return {Ellipse}\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n\n    parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;\n    parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;\n    return new this(parsedAttributes);\n  }\n\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Ellipse);\nclassRegistry.setSVGClass(Ellipse);\n", "import type { XY } from '../Point';\n\n/**\n * Parses \"points\" attribute, returning an array of values\n * @static\n * @memberOf fabric\n * @param {String} points points attribute string\n * @return {Array} array of points\n */\nexport function parsePointsAttribute(points: string | null): XY[] {\n  // points attribute is required and must not be empty\n  if (!points) {\n    return [];\n  }\n\n  // replace commas with whitespace and remove bookending whitespace\n  const pointsSplit: string[] = points.replace(/,/g, ' ').trim().split(/\\s+/);\n\n  const parsedPoints = [];\n\n  for (let i = 0; i < pointsSplit.length; i += 2) {\n    parsedPoints.push({\n      x: parseFloat(pointsSplit[i]),\n      y: parseFloat(pointsSplit[i + 1]),\n    });\n  }\n\n  // odd number of points is an error\n  // if (parsedPoints.length % 2 !== 0) {\n  //   return null;\n  // }\n  return parsedPoints;\n}\n", "import { config } from '../config';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport { parsePointsAttribute } from '../parser/parsePointsAttribute';\nimport type { XY } from '../Point';\nimport { Point } from '../Point';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { makeBoundingBoxFromPoints } from '../util/misc/boundingBoxFromPoints';\nimport { calcDimensionsMatrix, transformPoint } from '../util/misc/matrix';\nimport { projectStrokeOnPoints } from '../util/misc/projectStroke';\nimport type { TProjectStrokeOnPointsOptions } from '../util/misc/projectStroke/types';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { toFixed } from '../util/misc/toFixed';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport {\n  CENTER,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  SKEW_X,\n  SKEW_Y,\n  TOP,\n} from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const polylineDefaultValues: Partial<TClassProperties<Polyline>> = {\n  /**\n   * @deprecated transient option soon to be removed in favor of a different design\n   */\n  exactBoundingBox: false,\n};\n\nexport interface SerializedPolylineProps extends SerializedObjectProps {\n  points: XY[];\n}\n\nexport class Polyline<\n  Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n  SProps extends SerializedPolylineProps = SerializedPolylineProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  /**\n   * Points array\n   * @type Array\n   * @default\n   */\n  declare points: XY[];\n\n  /**\n   * WARNING: Feature in progress\n   * Calculate the exact bounding box taking in account strokeWidth on acute angles\n   * this will be turned to true by default on fabric 6.0\n   * maybe will be left in as an optimization since calculations may be slow\n   * @deprecated transient option soon to be removed in favor of a different design\n   * @type Boolean\n   * @default false\n   */\n  declare exactBoundingBox: boolean;\n\n  private declare initialized: true | undefined;\n\n  static ownDefaults = polylineDefaultValues;\n\n  static type = 'Polyline';\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Polyline.ownDefaults,\n    };\n  }\n\n  /**\n   * A list of properties that if changed trigger a recalculation of dimensions\n   * @todo check if you really need to recalculate for all cases\n   */\n  static layoutProperties: (keyof Polyline)[] = [\n    SKEW_X,\n    SKEW_Y,\n    'strokeLineCap',\n    'strokeLineJoin',\n    'strokeMiterLimit',\n    'strokeWidth',\n    'strokeUniform',\n    'points',\n  ];\n\n  declare pathOffset: Point;\n\n  declare strokeOffset: Point;\n\n  static cacheProperties = [...cacheProperties, 'points'];\n\n  strokeDiff: Point;\n\n  /**\n   * Constructor\n   * @param {Array} points Array of points (where each point is an object with x and y)\n   * @param {Object} [options] Options object\n   * @return {Polyline} thisArg\n   * @example\n   * var poly = new Polyline([\n   *     { x: 10, y: 10 },\n   *     { x: 50, y: 30 },\n   *     { x: 40, y: 70 },\n   *     { x: 60, y: 50 },\n   *     { x: 100, y: 150 },\n   *     { x: 40, y: 100 }\n   *   ], {\n   *   stroke: 'red',\n   *   left: 100,\n   *   top: 100\n   * });\n   */\n  constructor(points: XY[] = [], options: Props = {} as Props) {\n    super();\n    Object.assign(this, Polyline.ownDefaults);\n    this.setOptions(options);\n    this.points = points;\n    const { left, top } = options;\n    this.initialized = true;\n    this.setBoundingBox(true);\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  protected isOpen() {\n    return true;\n  }\n\n  private _projectStrokeOnPoints(options: TProjectStrokeOnPointsOptions) {\n    return projectStrokeOnPoints(this.points, options, this.isOpen());\n  }\n\n  /**\n   * Calculate the polygon bounding box\n   * @private\n   */\n  _calcDimensions(options?: Partial<TProjectStrokeOnPointsOptions>) {\n    options = {\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      skewX: this.skewX,\n      skewY: this.skewY,\n      strokeLineCap: this.strokeLineCap,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeUniform: this.strokeUniform,\n      strokeWidth: this.strokeWidth,\n      ...(options || {}),\n    };\n    const points = this.exactBoundingBox\n      ? this._projectStrokeOnPoints(\n          options as TProjectStrokeOnPointsOptions,\n        ).map((projection) => projection.projectedPoint)\n      : this.points;\n    if (points.length === 0) {\n      return {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0,\n        pathOffset: new Point(),\n        strokeOffset: new Point(),\n        strokeDiff: new Point(),\n      };\n    }\n    const bbox = makeBoundingBoxFromPoints(points),\n      // Remove scale effect, since it's applied after\n      matrix = calcDimensionsMatrix({ ...options, scaleX: 1, scaleY: 1 }),\n      bboxNoStroke = makeBoundingBoxFromPoints(\n        this.points.map((p) => transformPoint(p, matrix, true)),\n      ),\n      scale = new Point(this.scaleX, this.scaleY);\n    let offsetX = bbox.left + bbox.width / 2,\n      offsetY = bbox.top + bbox.height / 2;\n    if (this.exactBoundingBox) {\n      offsetX = offsetX - offsetY * Math.tan(degreesToRadians(this.skewX));\n      // Order of those assignments is important.\n      // offsetY relies on offsetX being already changed by the line above\n      offsetY = offsetY - offsetX * Math.tan(degreesToRadians(this.skewY));\n    }\n\n    return {\n      ...bbox,\n      pathOffset: new Point(offsetX, offsetY),\n      strokeOffset: new Point(bboxNoStroke.left, bboxNoStroke.top)\n        .subtract(new Point(bbox.left, bbox.top))\n        .multiply(scale),\n      strokeDiff: new Point(bbox.width, bbox.height)\n        .subtract(new Point(bboxNoStroke.width, bboxNoStroke.height))\n        .multiply(scale),\n    };\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates, by look at the polyline/polygon points.\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    const bbox = makeBoundingBoxFromPoints(this.points);\n    return new Point(bbox.left + bbox.width / 2, bbox.top + bbox.height / 2);\n  }\n\n  setDimensions() {\n    this.setBoundingBox();\n  }\n\n  setBoundingBox(adjustPosition?: boolean) {\n    const { left, top, width, height, pathOffset, strokeOffset, strokeDiff } =\n      this._calcDimensions();\n    this.set({ width, height, pathOffset, strokeOffset, strokeDiff });\n    adjustPosition &&\n      this.setPositionByOrigin(\n        new Point(left + width / 2, top + height / 2),\n        CENTER,\n        CENTER,\n      );\n  }\n\n  /**\n   * @deprecated intermidiate method to be removed, do not use\n   */\n  protected isStrokeAccountedForInDimensions() {\n    return this.exactBoundingBox;\n  }\n\n  /**\n   * @override stroke is taken in account in size\n   */\n  _getNonTransformedDimensions() {\n    return this.exactBoundingBox\n      ? // TODO: fix this\n        new Point(this.width, this.height)\n      : super._getNonTransformedDimensions();\n  }\n\n  /**\n   * @override stroke and skewing are taken into account when projecting stroke on points,\n   * therefore we don't want the default calculation to account for skewing as well.\n   * Though it is possible to pass `width` and `height` in `options`, doing so is very strange, use with discretion.\n   *\n   * @private\n   */\n  _getTransformedDimensions(options: any = {}) {\n    if (this.exactBoundingBox) {\n      let size: Point;\n      /* When `strokeUniform = true`, any changes to the properties require recalculating the `width` and `height` because\n        the stroke projections are affected.\n        When `strokeUniform = false`, we don't need to recalculate for scale transformations, as the effect of scale on\n        projections follows a linear function (e.g. scaleX of 2 just multiply width by 2)*/\n      if (\n        Object.keys(options).some(\n          (key) =>\n            this.strokeUniform ||\n            (this.constructor as typeof Polyline).layoutProperties.includes(\n              key as keyof TProjectStrokeOnPointsOptions,\n            ),\n        )\n      ) {\n        const { width, height } = this._calcDimensions(options);\n        size = new Point(options.width ?? width, options.height ?? height);\n      } else {\n        size = new Point(\n          options.width ?? this.width,\n          options.height ?? this.height,\n        );\n      }\n      return size.multiply(\n        new Point(options.scaleX || this.scaleX, options.scaleY || this.scaleY),\n      );\n    } else {\n      return super._getTransformedDimensions(options);\n    }\n  }\n\n  /**\n   * Recalculates dimensions when changing skew and scale\n   * @private\n   */\n  _set(key: string, value: any) {\n    const changed = this.initialized && this[key as keyof this] !== value;\n    const output = super._set(key, value);\n    if (\n      this.exactBoundingBox &&\n      changed &&\n      (((key === SCALE_X || key === SCALE_Y) &&\n        this.strokeUniform &&\n        (this.constructor as typeof Polyline).layoutProperties.includes(\n          'strokeUniform',\n        )) ||\n        (this.constructor as typeof Polyline).layoutProperties.includes(\n          key as keyof Polyline,\n        ))\n    ) {\n      this.setDimensions();\n    }\n    return output;\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      points: this.points.map(({ x, y }) => ({ x, y })),\n    };\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const points = [],\n      diffX = this.pathOffset.x,\n      diffY = this.pathOffset.y,\n      NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS;\n\n    for (let i = 0, len = this.points.length; i < len; i++) {\n      points.push(\n        toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS),\n        ',',\n        toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS),\n        ' ',\n      );\n    }\n    return [\n      `<${\n        (this.constructor as typeof Polyline).type.toLowerCase() as\n          | 'polyline'\n          | 'polygon'\n      } `,\n      'COMMON_PARTS',\n      `points=\"${points.join('')}\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const len = this.points.length,\n      x = this.pathOffset.x,\n      y = this.pathOffset.y;\n\n    if (!len || isNaN(this.points[len - 1].y)) {\n      // do not draw if no points or odd points\n      // NaN comes from parseFloat of a empty string in parser\n      return;\n    }\n    ctx.beginPath();\n    ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\n    for (let i = 0; i < len; i++) {\n      const point = this.points[i];\n      ctx.lineTo(point.x - x, point.y - y);\n    }\n    !this.isOpen() && ctx.closePath();\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance\n   */\n  complexity(): number {\n    return this.points.length;\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Polyline.fromElement})\n   * @static\n   * @memberOf Polyline\n   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES];\n\n  /**\n   * Returns Polyline instance from an SVG element\n   * @static\n   * @memberOf Polyline\n   * @param {HTMLElement} element Element to parser\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const points = parsePointsAttribute(element.getAttribute('points')),\n      // we omit left and top to instruct the constructor to position the object using the bbox\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      { left, top, ...parsedAttributes } = parseAttributes(\n        element,\n        this.ATTRIBUTE_NAMES,\n        cssRules,\n      );\n    return new this(points, {\n      ...parsedAttributes,\n      ...options,\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns Polyline instance from an object representation\n   * @static\n   * @memberOf Polyline\n   * @param {Object} object Object to create an instance from\n   * @returns {Promise<Polyline>}\n   */\n  static fromObject<T extends TOptions<SerializedPolylineProps>>(object: T) {\n    return this._fromObject<Polyline>(object, {\n      extraParam: 'points',\n    });\n  }\n}\n\nclassRegistry.setClass(Polyline);\nclassRegistry.setSVGClass(Polyline);\n", "import { classRegistry } from '../ClassRegistry';\nimport { Polyline, polylineDefaultValues } from './Polyline';\n\nexport class Polygon extends Polyline {\n  static ownDefaults = polylineDefaultValues;\n\n  static type = 'Polygon';\n\n  protected isOpen() {\n    return false;\n  }\n}\n\nclassRegistry.setClass(Polygon);\nclassRegistry.setSVGClass(Polygon);\n", "import { FILL, LEFT, STROKE, reNewline } from '../../constants';\nimport type { TClassProperties } from '../../typedefs';\nimport type { FabricText } from './Text';\n\nconst fontProperties = [\n  'fontSize',\n  'fontWeight',\n  'fontFamily',\n  'fontStyle',\n] as const;\n\nexport const textDecorationProperties = [\n  'underline',\n  'overline',\n  'linethrough',\n] as const;\n\nexport const textLayoutProperties: string[] = [\n  ...fontProperties,\n  'lineHeight',\n  'text',\n  'charSpacing',\n  'textAlign',\n  'styles',\n  'path',\n  'pathStartOffset',\n  'pathSide',\n  'pathAlign',\n];\n\nexport const additionalProps = [\n  ...textLayoutProperties,\n  ...textDecorationProperties,\n  'textBackgroundColor',\n  'direction',\n] as const;\n\nexport type StylePropertiesType =\n  | 'fill'\n  | 'stroke'\n  | 'strokeWidth'\n  | 'fontSize'\n  | 'fontFamily'\n  | 'fontWeight'\n  | 'fontStyle'\n  | 'textBackgroundColor'\n  | 'deltaY'\n  | 'overline'\n  | 'underline'\n  | 'linethrough';\n\nexport const styleProperties: Readonly<StylePropertiesType[]> = [\n  ...fontProperties,\n  ...textDecorationProperties,\n  STROKE,\n  'strokeWidth',\n  FILL,\n  'deltaY',\n  'textBackgroundColor',\n] as const;\n\n// @TODO: Many things here are configuration related and shouldn't be on the class nor prototype\n// regexes, list of properties that are not suppose to change by instances, magic consts.\n// this will be a separated effort\nexport const textDefaultValues: Partial<TClassProperties<FabricText>> = {\n  _reNewline: reNewline,\n  _reSpacesAndTabs: /[ \\t\\r]/g,\n  _reSpaceAndTab: /[ \\t\\r]/,\n  _reWords: /\\S+/g,\n  fontSize: 40,\n  fontWeight: 'normal',\n  fontFamily: 'Times New Roman',\n  underline: false,\n  overline: false,\n  linethrough: false,\n  textAlign: LEFT,\n  fontStyle: 'normal',\n  lineHeight: 1.16,\n  superscript: {\n    size: 0.6, // fontSize factor\n    baseline: -0.35, // baseline-shift factor (upwards)\n  },\n  subscript: {\n    size: 0.6, // fontSize factor\n    baseline: 0.11, // baseline-shift factor (downwards)\n  },\n  textBackgroundColor: '',\n  stroke: null,\n  shadow: null,\n  path: undefined,\n  pathStartOffset: 0,\n  pathSide: LEFT,\n  pathAlign: 'baseline',\n  _fontSizeFraction: 0.222,\n  offsets: {\n    underline: 0.1,\n    linethrough: -0.315,\n    overline: -0.88,\n  },\n  _fontSizeMult: 1.13,\n  charSpacing: 0,\n  deltaY: 0,\n  direction: 'ltr',\n  CACHE_FONT_SIZE: 400,\n  MIN_TEXT_WIDTH: 2,\n};\n\nexport const JUSTIFY = 'justify';\nexport const JUSTIFY_LEFT = 'justify-left';\nexport const JUSTIFY_RIGHT = 'justify-right';\nexport const JUSTIFY_CENTER = 'justify-center';\n", "import type { ObjectEvents } from '../../EventTypeDefs';\nimport type { FabricObjectProps, SerializedObjectProps } from '../Object/types';\nimport type { TOptions } from '../../typedefs';\nimport { FabricObject } from '../Object/FabricObject';\nimport { styleProperties } from './constants';\nimport type { StylePropertiesType } from './constants';\nimport type { FabricText } from './Text';\nimport { pick } from '../../util';\nimport { pickBy } from '../../util/misc/pick';\n\nexport type CompleteTextStyleDeclaration = Pick<\n  FabricText,\n  StylePropertiesType\n>;\n\nexport type TextStyleDeclaration = Partial<CompleteTextStyleDeclaration>;\n\nexport type TextStyle = {\n  [line: number | string]: { [char: number | string]: TextStyleDeclaration };\n};\n\nexport abstract class StyledText<\n  Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  declare abstract styles: TextStyle;\n  protected declare abstract _textLines: string[][];\n  protected declare _forceClearCache: boolean;\n  static _styleProperties: Readonly<StylePropertiesType[]> = styleProperties;\n  abstract get2DCursorLocation(\n    selectionStart: number,\n    skipWrapping?: boolean,\n  ): { charIndex: number; lineIndex: number };\n\n  /**\n   * Returns true if object has no styling or no styling in a line\n   * @param {Number} lineIndex , lineIndex is on wrapped lines.\n   * @return {Boolean}\n   */\n  isEmptyStyles(lineIndex?: number): boolean {\n    if (!this.styles) {\n      return true;\n    }\n    if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n      return true;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { line: this.styles[lineIndex] };\n    for (const p1 in obj) {\n      for (const p2 in obj[p1]) {\n        // eslint-disable-next-line no-unused-vars\n        for (const p3 in obj[p1][p2]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns true if object has a style property or has it ina specified line\n   * This function is used to detect if a text will use a particular property or not.\n   * @param {String} property to check for\n   * @param {Number} lineIndex to check the style on\n   * @return {Boolean}\n   */\n  styleHas(property: keyof TextStyleDeclaration, lineIndex?: number): boolean {\n    if (!this.styles) {\n      return false;\n    }\n    if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n      return false;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { 0: this.styles[lineIndex] };\n    // eslint-disable-next-line\n    for (const p1 in obj) {\n      // eslint-disable-next-line\n      for (const p2 in obj[p1]) {\n        if (typeof obj[p1][p2][property] !== 'undefined') {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if characters in a text have a value for a property\n   * whose value matches the textbox's value for that property.  If so,\n   * the character-level property is deleted.  If the character\n   * has no other properties, then it is also deleted.  Finally,\n   * if the line containing that character has no other characters\n   * then it also is deleted.\n   */\n  cleanStyle(property: keyof TextStyleDeclaration) {\n    if (!this.styles) {\n      return false;\n    }\n    const obj = this.styles;\n    let stylesCount = 0,\n      letterCount,\n      stylePropertyValue,\n      allStyleObjectPropertiesMatch = true,\n      graphemeCount = 0;\n    for (const p1 in obj) {\n      letterCount = 0;\n      for (const p2 in obj[p1]) {\n        const styleObject = obj[p1][p2] || {},\n          stylePropertyHasBeenSet = styleObject[property] !== undefined;\n\n        stylesCount++;\n\n        if (stylePropertyHasBeenSet) {\n          if (!stylePropertyValue) {\n            stylePropertyValue = styleObject[property];\n          } else if (styleObject[property] !== stylePropertyValue) {\n            allStyleObjectPropertiesMatch = false;\n          }\n\n          if (styleObject[property] === this[property as keyof this]) {\n            delete styleObject[property];\n          }\n        } else {\n          allStyleObjectPropertiesMatch = false;\n        }\n\n        if (Object.keys(styleObject).length !== 0) {\n          letterCount++;\n        } else {\n          delete obj[p1][p2];\n        }\n      }\n\n      if (letterCount === 0) {\n        delete obj[p1];\n      }\n    }\n    // if every grapheme has the same style set then\n    // delete those styles and set it on the parent\n    for (let i = 0; i < this._textLines.length; i++) {\n      graphemeCount += this._textLines[i].length;\n    }\n    if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\n      this[property as keyof this] = stylePropertyValue as any;\n      this.removeStyle(property);\n    }\n  }\n\n  /**\n   * Remove a style property or properties from all individual character styles\n   * in a text object.  Deletes the character style object if it contains no other style\n   * props.  Deletes a line style object if it contains no other character styles.\n   *\n   * @param {String} props The property to remove from character styles.\n   */\n  removeStyle(property: keyof TextStyleDeclaration) {\n    if (!this.styles) {\n      return;\n    }\n    const obj = this.styles;\n    let line, lineNum, charNum;\n    for (lineNum in obj) {\n      line = obj[lineNum];\n      for (charNum in line) {\n        delete line[charNum][property];\n        if (Object.keys(line[charNum]).length === 0) {\n          delete line[charNum];\n        }\n      }\n      if (Object.keys(line).length === 0) {\n        delete obj[lineNum];\n      }\n    }\n  }\n\n  private _extendStyles(index: number, style: TextStyleDeclaration): void {\n    const { lineIndex, charIndex } = this.get2DCursorLocation(index);\n\n    if (!this._getLineStyle(lineIndex)) {\n      this._setLineStyle(lineIndex);\n    }\n\n    const newStyle = pickBy(\n      {\n        // first create a new object that is a merge of existing and new\n        ...this._getStyleDeclaration(lineIndex, charIndex),\n        ...style,\n        // use the predicate to discard undefined values\n      },\n      (value) => value !== undefined,\n    );\n\n    // finally assign to the old position the new style\n    this._setStyleDeclaration(lineIndex, charIndex, newStyle);\n  }\n\n  /**\n   * Gets style of a current selection/cursor (at the start position)\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} endIndex End index to get styles at, if not specified startIndex + 1\n   * @param {Boolean} [complete] get full style or not\n   * @return {Array} styles an array with one, zero or more Style objects\n   */\n  getSelectionStyles(\n    startIndex: number,\n    endIndex?: number,\n    complete?: boolean,\n  ): TextStyleDeclaration[] {\n    const styles: TextStyleDeclaration[] = [];\n    for (let i = startIndex; i < (endIndex || startIndex); i++) {\n      styles.push(this.getStyleAtPosition(i, complete));\n    }\n    return styles;\n  }\n\n  /**\n   * Gets style of a current selection/cursor position\n   * @param {Number} position  to get styles at\n   * @param {Boolean} [complete] full style if true\n   * @return {Object} style Style object at a specified index\n   * @private\n   */\n  getStyleAtPosition(position: number, complete?: boolean) {\n    const { lineIndex, charIndex } = this.get2DCursorLocation(position);\n    return complete\n      ? this.getCompleteStyleDeclaration(lineIndex, charIndex)\n      : this._getStyleDeclaration(lineIndex, charIndex);\n  }\n\n  /**\n   * Sets style of a current selection, if no selection exist, do not set anything.\n   * @param {Object} styles Styles object\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} [endIndex] End index to get styles at, if not specified startIndex + 1\n   */\n  setSelectionStyles(styles: object, startIndex: number, endIndex?: number) {\n    for (let i = startIndex; i < (endIndex || startIndex); i++) {\n      this._extendStyles(i, styles);\n    }\n    /* not included in _extendStyles to avoid clearing cache more than once */\n    this._forceClearCache = true;\n  }\n\n  /**\n   * Get a reference, not a clone, to the style object for a given character,\n   * if no style is set for a line or char, return a new empty object.\n   * This is tricky and confusing because when you get an empty object you can't\n   * determine if it is a reference or a new one.\n   * @TODO this should always return a reference or always a clone or undefined when necessary.\n   * @protected\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {TextStyleDeclaration} a style object reference to the existing one or a new empty object when undefined\n   */\n  _getStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): TextStyleDeclaration {\n    const lineStyle = this.styles && this.styles[lineIndex];\n    return lineStyle ? lineStyle[charIndex] ?? {} : {};\n  }\n\n  /**\n   * return a new object that contains all the style property for a character\n   * the object returned is newly created\n   * @param {Number} lineIndex of the line where the character is\n   * @param {Number} charIndex position of the character on the line\n   * @return {Object} style object\n   */\n  getCompleteStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): CompleteTextStyleDeclaration {\n    return {\n      ...pick(\n        this,\n        (this.constructor as typeof StyledText)\n          ._styleProperties as (keyof this)[],\n      ),\n      ...this._getStyleDeclaration(lineIndex, charIndex),\n    } as CompleteTextStyleDeclaration;\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n    style: object,\n  ) {\n    this.styles[lineIndex][charIndex] = style;\n  }\n\n  /**\n   *\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @private\n   */\n  protected _deleteStyleDeclaration(lineIndex: number, charIndex: number) {\n    delete this.styles[lineIndex][charIndex];\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @return {Boolean} if the line exists or not\n   * @private\n   */\n  protected _getLineStyle(lineIndex: number): boolean {\n    return !!this.styles[lineIndex];\n  }\n\n  /**\n   * Set the line style to an empty object so that is initialized\n   * @param {Number} lineIndex\n   * @private\n   */\n  protected _setLineStyle(lineIndex: number) {\n    this.styles[lineIndex] = {};\n  }\n\n  protected _deleteLineStyle(lineIndex: number) {\n    delete this.styles[lineIndex];\n  }\n}\n", "import { config } from '../../config';\nimport type { TSVGReviver } from '../../typedefs';\nimport { escapeXml } from '../../util/lang_string';\nimport { colorPropToSVG, createSVGRect } from '../../util/misc/svgParsing';\nimport { hasStyleChanged } from '../../util/misc/textStyles';\nimport { toFixed } from '../../util/misc/toFixed';\nimport { FabricObjectSVGExportMixin } from '../Object/FabricObjectSVGExportMixin';\nimport { type TextStyleDeclaration } from './StyledText';\nimport { JUSTIFY } from '../Text/constants';\nimport type { FabricText, GraphemeBBox } from './Text';\nimport { STROKE, FILL } from '../../constants';\nimport { createRotateMatrix } from '../../util/misc/matrix';\nimport { radiansToDegrees } from '../../util/misc/radiansDegreesConversion';\nimport { Point } from '../../Point';\nimport { matrixToSVG } from '../../util/misc/svgExport';\n\nconst multipleSpacesRegex = /  +/g;\nconst dblQuoteRegex = /\"/g;\n\nfunction createSVGInlineRect(\n  color: string,\n  left: number,\n  top: number,\n  width: number,\n  height: number,\n) {\n  return `\\t\\t${createSVGRect(color, { left, top, width, height })}\\n`;\n}\n\nexport class TextSVGExportMixin extends FabricObjectSVGExportMixin {\n  _toSVG(this: TextSVGExportMixin & FabricText): string[] {\n    const offsets = this._getSVGLeftTopOffsets(),\n      textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\n    return this._wrapSVGTextAndBg(textAndBg);\n  }\n\n  toSVG(this: TextSVGExportMixin & FabricText, reviver?: TSVGReviver): string {\n    const textSvg = this._createBaseSVGMarkup(this._toSVG(), {\n        reviver,\n        noStyle: true,\n        withShadow: true,\n      }),\n      path = this.path;\n    if (path) {\n      return (\n        textSvg +\n        path._createBaseSVGMarkup(path._toSVG(), {\n          reviver,\n          withShadow: true,\n          additionalTransform: matrixToSVG(this.calcOwnMatrix()),\n        })\n      );\n    }\n    return textSvg;\n  }\n\n  private _getSVGLeftTopOffsets(this: TextSVGExportMixin & FabricText) {\n    return {\n      textLeft: -this.width / 2,\n      textTop: -this.height / 2,\n      lineTop: this.getHeightOfLine(0),\n    };\n  }\n\n  private _wrapSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    {\n      textBgRects,\n      textSpans,\n    }: {\n      textSpans: string[];\n      textBgRects: string[];\n    },\n  ) {\n    const noShadow = true,\n      textDecoration = this.getSvgTextDecoration(this);\n    return [\n      textBgRects.join(''),\n      '\\t\\t<text xml:space=\"preserve\" ',\n      this.fontFamily\n        ? `font-family=\"${this.fontFamily.replace(dblQuoteRegex, \"'\")}\" `\n        : '',\n      this.fontSize ? `font-size=\"${this.fontSize}\" ` : '',\n      this.fontStyle ? `font-style=\"${this.fontStyle}\" ` : '',\n      this.fontWeight ? `font-weight=\"${this.fontWeight}\" ` : '',\n      textDecoration ? `text-decoration=\"${textDecoration}\" ` : '',\n      this.direction === 'rtl' ? `direction=\"${this.direction}\" ` : '',\n      'style=\"',\n      this.getSvgStyles(noShadow),\n      '\"',\n      this.addPaintOrder(),\n      ' >',\n      textSpans.join(''),\n      '</text>\\n',\n    ];\n  }\n\n  /**\n   * @private\n   * @param {Number} textTopOffset Text top offset\n   * @param {Number} textLeftOffset Text left offset\n   * @return {Object}\n   */\n  private _getSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    textTopOffset: number,\n    textLeftOffset: number,\n  ) {\n    const textSpans: string[] = [],\n      textBgRects: string[] = [];\n    let height = textTopOffset,\n      lineOffset;\n\n    // bounding-box background\n    this.backgroundColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          this.backgroundColor,\n          -this.width / 2,\n          -this.height / 2,\n          this.width,\n          this.height,\n        ),\n      );\n\n    // text and text-background\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineOffset = this._getLineLeftOffset(i);\n      if (this.direction === 'rtl') {\n        lineOffset += this.width;\n      }\n      if (this.textBackgroundColor || this.styleHas('textBackgroundColor', i)) {\n        this._setSVGTextLineBg(\n          textBgRects,\n          i,\n          textLeftOffset + lineOffset,\n          height,\n        );\n      }\n      this._setSVGTextLineText(\n        textSpans,\n        i,\n        textLeftOffset + lineOffset,\n        height,\n      );\n      height += this.getHeightOfLine(i);\n    }\n\n    return {\n      textSpans,\n      textBgRects,\n    };\n  }\n\n  private _createTextCharSpan(\n    this: TextSVGExportMixin & FabricText,\n    char: string,\n    styleDecl: TextStyleDeclaration,\n    left: number,\n    top: number,\n    charBox: GraphemeBBox,\n  ) {\n    const numFractionDigit = config.NUM_FRACTION_DIGITS;\n    const styleProps = this.getSvgSpanStyles(\n        styleDecl,\n        char !== char.trim() || !!char.match(multipleSpacesRegex),\n      ),\n      fillStyles = styleProps ? `style=\"${styleProps}\"` : '',\n      dy = styleDecl.deltaY,\n      dySpan = dy ? ` dy=\"${toFixed(dy, numFractionDigit)}\" ` : '',\n      { angle, renderLeft, renderTop, width } = charBox;\n    let angleAttr = '';\n    if (renderLeft !== undefined) {\n      const wBy2 = width / 2;\n      angle &&\n        (angleAttr = ` rotate=\"${toFixed(radiansToDegrees(angle), numFractionDigit)}\"`);\n      const m = createRotateMatrix({ angle: radiansToDegrees(angle!) });\n      m[4] = renderLeft!;\n      m[5] = renderTop!;\n      const renderPoint = new Point(-wBy2, 0).transform(m);\n      left = renderPoint.x;\n      top = renderPoint.y;\n    }\n\n    return `<tspan x=\"${toFixed(left, numFractionDigit)}\" y=\"${toFixed(\n      top,\n      numFractionDigit,\n    )}\" ${dySpan}${angleAttr}${fillStyles}>${escapeXml(char)}</tspan>`;\n  }\n\n  private _setSVGTextLineText(\n    this: TextSVGExportMixin & FabricText,\n    textSpans: string[],\n    lineIndex: number,\n    textLeftOffset: number,\n    textTopOffset: number,\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      line = this._textLines[lineIndex];\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      style,\n      boxWidth = 0,\n      timeToRender;\n\n    textTopOffset +=\n      (lineHeight * (1 - this._fontSizeFraction)) / this.lineHeight;\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing || this.path;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i];\n      if (boxWidth === 0) {\n        textLeftOffset += charBox.kernedWidth - charBox.width;\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing or a path, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, true);\n      }\n      if (timeToRender) {\n        style = this._getStyleDeclaration(lineIndex, i);\n        textSpans.push(\n          this._createTextCharSpan(\n            charsToRender,\n            style,\n            textLeftOffset,\n            textTopOffset,\n            charBox,\n          ),\n        );\n        charsToRender = '';\n        actualStyle = nextStyle;\n        if (this.direction === 'rtl') {\n          textLeftOffset -= boxWidth;\n        } else {\n          textLeftOffset += boxWidth;\n        }\n        boxWidth = 0;\n      }\n    }\n  }\n\n  private _setSVGTextLineBg(\n    this: TextSVGExportMixin & FabricText,\n    textBgRects: (string | number)[],\n    i: number,\n    leftOffset: number,\n    textTopOffset: number,\n  ) {\n    const line = this._textLines[i],\n      heightOfLine = this.getHeightOfLine(i) / this.lineHeight;\n    let boxWidth = 0,\n      boxStart = 0,\n      currentColor,\n      lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n    for (let j = 0; j < line.length; j++) {\n      const { left, width, kernedWidth } = this.__charBounds[i][j];\n      currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n      if (currentColor !== lastColor) {\n        lastColor &&\n          textBgRects.push(\n            ...createSVGInlineRect(\n              lastColor,\n              leftOffset + boxStart,\n              textTopOffset,\n              boxWidth,\n              heightOfLine,\n            ),\n          );\n        boxStart = left;\n        boxWidth = width;\n        lastColor = currentColor;\n      } else {\n        boxWidth += kernedWidth;\n      }\n    }\n    currentColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          lastColor,\n          leftOffset + boxStart,\n          textTopOffset,\n          boxWidth,\n          heightOfLine,\n        ),\n      );\n  }\n\n  /**\n   * @deprecated unused\n   */\n  _getSVGLineTopOffset(\n    this: TextSVGExportMixin & FabricText,\n    lineIndex: number,\n  ) {\n    let lineTopOffset = 0,\n      j;\n    for (j = 0; j < lineIndex; j++) {\n      lineTopOffset += this.getHeightOfLine(j);\n    }\n    const lastHeight = this.getHeightOfLine(j);\n    return {\n      lineTop: lineTopOffset,\n      offset:\n        ((this._fontSizeMult - this._fontSizeFraction) * lastHeight) /\n        (this.lineHeight * this._fontSizeMult),\n    };\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(this: TextSVGExportMixin & FabricText, skipShadow?: boolean) {\n    return `${super.getSvgStyles(skipShadow)} white-space: pre;`;\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.\n   * @return {String}\n   */\n  getSvgSpanStyles(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n    useWhiteSpace?: boolean,\n  ) {\n    const {\n      fontFamily,\n      strokeWidth,\n      stroke,\n      fill,\n      fontSize,\n      fontStyle,\n      fontWeight,\n      deltaY,\n    } = style;\n\n    const textDecoration = this.getSvgTextDecoration(style);\n\n    return [\n      stroke ? colorPropToSVG(STROKE, stroke) : '',\n      strokeWidth ? `stroke-width: ${strokeWidth}; ` : '',\n      fontFamily\n        ? `font-family: ${\n            !fontFamily.includes(\"'\") && !fontFamily.includes('\"')\n              ? `'${fontFamily}'`\n              : fontFamily\n          }; `\n        : '',\n      fontSize ? `font-size: ${fontSize}px; ` : '',\n      fontStyle ? `font-style: ${fontStyle}; ` : '',\n      fontWeight ? `font-weight: ${fontWeight}; ` : '',\n      textDecoration ? `text-decoration: ${textDecoration}; ` : textDecoration,\n      fill ? colorPropToSVG(FILL, fill) : '',\n      deltaY ? `baseline-shift: ${-deltaY}; ` : '',\n      useWhiteSpace ? 'white-space: pre; ' : '',\n    ].join('');\n  }\n\n  /**\n   * Returns text-decoration property for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @return {String}\n   */\n  getSvgTextDecoration(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n  ) {\n    return (['overline', 'underline', 'line-through'] as const)\n      .filter(\n        (decoration) =>\n          style[\n            decoration.replace('-', '') as\n              | 'overline'\n              | 'underline'\n              | 'linethrough'\n          ],\n      )\n      .join(' ');\n  }\n}\n", "import { cache } from '../../cache';\nimport { DEFAULT_SVG_FONT_SIZE, FILL, STROKE } from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type {\n  CompleteTextStyleDeclaration,\n  TextStyle,\n  TextStyleDeclaration,\n} from './StyledText';\nimport { StyledText } from './StyledText';\nimport { SHARED_ATTRIBUTES } from '../../parser/attributes';\nimport { parseAttributes } from '../../parser/parseAttributes';\nimport type {\n  Abortable,\n  TCacheCanvasDimensions,\n  TClassProperties,\n  TFiller,\n  TOptions,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { graphemeSplit } from '../../util/lang_string';\nimport { createCanvasElementFor } from '../../util/misc/dom';\nimport type { TextStyleArray } from '../../util/misc/textStyles';\nimport {\n  hasStyleChanged,\n  stylesFromArray,\n  stylesToArray,\n} from '../../util/misc/textStyles';\nimport { getPathSegmentsInfo, getPointOnPath } from '../../util/path';\nimport { cacheProperties } from '../Object/FabricObject';\nimport type { Path } from '../Path';\nimport { TextSVGExportMixin } from './TextSVGExportMixin';\nimport { applyMixins } from '../../util/applyMixins';\nimport type { FabricObjectProps, SerializedObjectProps } from '../Object/types';\nimport type { StylePropertiesType } from './constants';\nimport {\n  additionalProps,\n  textDefaultValues,\n  textLayoutProperties,\n  JUSTIFY,\n  JUSTIFY_CENTER,\n  JUSTIFY_LEFT,\n  JUSTIFY_RIGHT,\n} from './constants';\nimport { CENTER, LEFT, RIGHT, TOP, BOTTOM } from '../../constants';\nimport { isFiller } from '../../util/typeAssertions';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { CSSRules } from '../../parser/typedefs';\n\nlet measuringContext: CanvasRenderingContext2D | null;\n\n/**\n * Return a context for measurement of text string.\n * if created it gets stored for reuse\n */\nfunction getMeasuringContext() {\n  if (!measuringContext) {\n    const canvas = createCanvasElementFor({\n      width: 0,\n      height: 0,\n    });\n    measuringContext = canvas.getContext('2d');\n  }\n  return measuringContext;\n}\n\nexport type TPathSide = 'left' | 'right';\n\nexport type TPathAlign = 'baseline' | 'center' | 'ascender' | 'descender';\n\nexport type TextLinesInfo = {\n  lines: string[];\n  graphemeLines: string[][];\n  graphemeText: string[];\n  _unwrappedLines: string[][];\n};\n\n/**\n * Measure and return the info of a single grapheme.\n * needs the the info of previous graphemes already filled\n * Override to customize measuring\n */\nexport type GraphemeBBox = {\n  width: number;\n  height: number;\n  kernedWidth: number;\n  left: number;\n  deltaY: number;\n  renderLeft?: number;\n  renderTop?: number;\n  angle?: number;\n};\n\n// @TODO this is not complete\ninterface UniqueTextProps {\n  charSpacing: number;\n  lineHeight: number;\n  fontSize: number;\n  fontWeight: string | number;\n  fontFamily: string;\n  fontStyle: string;\n  pathSide: TPathSide;\n  pathAlign: TPathAlign;\n  underline: boolean;\n  overline: boolean;\n  linethrough: boolean;\n  textAlign: string;\n  direction: CanvasDirection;\n  path?: Path;\n}\n\nexport interface SerializedTextProps\n  extends SerializedObjectProps,\n    UniqueTextProps {\n  styles: TextStyleArray | TextStyle;\n}\n\nexport interface TextProps extends FabricObjectProps, UniqueTextProps {\n  styles: TextStyle;\n}\n\n/**\n * Text class\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\n */\nexport class FabricText<\n    Props extends TOptions<TextProps> = Partial<TextProps>,\n    SProps extends SerializedTextProps = SerializedTextProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends StyledText<Props, SProps, EventSpec>\n  implements UniqueTextProps\n{\n  /**\n   * Properties that requires a text layout recalculation when changed\n   * @type string[]\n   * @protected\n   */\n  static textLayoutProperties: string[] = textLayoutProperties;\n\n  /**\n   * @private\n   */\n  declare _reNewline: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespaces that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpacesAndTabs: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespace that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpaceAndTab: RegExp;\n\n  /**\n   * Use this regular expression to filter consecutive groups of non spaces.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reWords: RegExp;\n\n  declare text: string;\n\n  /**\n   * Font size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare fontSize: number;\n\n  /**\n   * Font weight (e.g. bold, normal, 400, 600, 800)\n   * @type {(Number|String)}\n   * @default\n   */\n  declare fontWeight: string | number;\n\n  /**\n   * Font family\n   * @type String\n   * @default\n   */\n  declare fontFamily: string;\n\n  /**\n   * Text decoration underline.\n   * @type Boolean\n   * @default\n   */\n  declare underline: boolean;\n\n  /**\n   * Text decoration overline.\n   * @type Boolean\n   * @default\n   */\n  declare overline: boolean;\n\n  /**\n   * Text decoration linethrough.\n   * @type Boolean\n   * @default\n   */\n  declare linethrough: boolean;\n\n  /**\n   * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\n   * \"justify-left\", \"justify-center\" or \"justify-right\".\n   * @type String\n   * @default\n   */\n  declare textAlign: string;\n\n  /**\n   * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n   * @type String\n   * @default\n   */\n  declare fontStyle: string;\n\n  /**\n   * Line height\n   * @type Number\n   * @default\n   */\n  declare lineHeight: number;\n\n  /**\n   * Superscript schema object (minimum overlap)\n   */\n  declare superscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (upwards)\n     * @default -0.35\n     */\n    baseline: number;\n  };\n\n  /**\n   * Subscript schema object (minimum overlap)\n   */\n  declare subscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (downwards)\n     * @default 0.11\n     */\n    baseline: number;\n  };\n\n  /**\n   * Background color of text lines\n   * @type String\n   * @default\n   */\n  declare textBackgroundColor: string;\n\n  declare styles: TextStyle;\n\n  /**\n   * Path that the text should follow.\n   * since 4.6.0 the path will be drawn automatically.\n   * if you want to make the path visible, give it a stroke and strokeWidth or fill value\n   * if you want it to be hidden, assign visible = false to the path.\n   * This feature is in BETA, and SVG import/export is not yet supported.\n   * @type Path\n   * @example\n   * const textPath = new Text('Text on a path', {\n   *     top: 150,\n   *     left: 150,\n   *     textAlign: 'center',\n   *     charSpacing: -50,\n   *     path: new Path('M 0 0 C 50 -100 150 -100 200 0', {\n   *         strokeWidth: 1,\n   *         visible: false\n   *     }),\n   *     pathSide: 'left',\n   *     pathStartOffset: 0\n   * });\n   * @default\n   */\n  declare path?: Path;\n\n  /**\n   * Offset amount for text path starting position\n   * Only used when text has a path\n   * @type Number\n   * @default\n   */\n  declare pathStartOffset: number;\n\n  /**\n   * Which side of the path the text should be drawn on.\n   * Only used when text has a path\n   * @type {TPathSide} 'left|right'\n   * @default\n   */\n  declare pathSide: TPathSide;\n\n  /**\n   * How text is aligned to the path. This property determines\n   * the perpendicular position of each character relative to the path.\n   * (one of \"baseline\", \"center\", \"ascender\", \"descender\")\n   * This feature is in BETA, and its behavior may change\n   * @type TPathAlign\n   * @default\n   */\n  declare pathAlign: TPathAlign;\n\n  /**\n   * @private\n   */\n  declare _fontSizeFraction: number;\n\n  /**\n   * @private\n   */\n  declare offsets: { underline: number; linethrough: number; overline: number };\n\n  /**\n   * Text Line proportion to font Size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare _fontSizeMult: number;\n\n  /**\n   * additional space between characters\n   * expressed in thousands of em unit\n   * @type Number\n   * @default\n   */\n  declare charSpacing: number;\n\n  /**\n   * Baseline shift, styles only, keep at 0 for the main text object\n   * @type {Number}\n   * @default\n   */\n  declare deltaY: number;\n\n  /**\n   * WARNING: EXPERIMENTAL. NOT SUPPORTED YET\n   * determine the direction of the text.\n   * This has to be set manually together with textAlign and originX for proper\n   * experience.\n   * some interesting link for the future\n   * https://www.w3.org/International/questions/qa-bidi-unicode-controls\n   * @since 4.5.0\n   * @type {CanvasDirection} 'ltr|rtl'\n   * @default\n   */\n  declare direction: CanvasDirection;\n\n  /**\n   * contains characters bounding boxes\n   * This variable is considered to be protected.\n   * But for how mixins are implemented right now, we can't leave it private\n   * @protected\n   */\n  __charBounds: GraphemeBBox[][] = [];\n\n  /**\n   * use this size when measuring text. To avoid IE11 rounding errors\n   * @type {Number}\n   * @default\n   * @readonly\n   * @private\n   */\n  declare CACHE_FONT_SIZE: number;\n\n  /**\n   * contains the min text width to avoid getting 0\n   * @type {Number}\n   * @default\n   */\n  declare MIN_TEXT_WIDTH: number;\n\n  /**\n   * contains the the text of the object, divided in lines as they are displayed\n   * on screen. Wrapping will divide the text independently of line breaks\n   * @type {string[]}\n   * @default\n   */\n  declare textLines: string[];\n\n  /**\n   * same as textlines, but each line is an array of graphemes as split by splitByGrapheme\n   * @type {string[]}\n   * @default\n   */\n  declare _textLines: string[][];\n\n  declare _unwrappedTextLines: string[][];\n  declare _text: string[];\n  declare cursorWidth: number;\n  declare __lineHeights: number[];\n  declare __lineWidths: number[];\n  declare initialized?: true;\n\n  static cacheProperties = [...cacheProperties, ...additionalProps];\n\n  static ownDefaults = textDefaultValues;\n\n  static type = 'Text';\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...FabricText.ownDefaults };\n  }\n\n  constructor(text: string, options?: Props) {\n    super();\n    Object.assign(this, FabricText.ownDefaults);\n    this.setOptions(options);\n    if (!this.styles) {\n      this.styles = {};\n    }\n    this.text = text;\n    this.initialized = true;\n    if (this.path) {\n      this.setPathInfo();\n    }\n    this.initDimensions();\n    this.setCoords();\n  }\n\n  /**\n   * If text has a path, it will add the extra information needed\n   * for path and text calculations\n   */\n  setPathInfo() {\n    const path = this.path;\n    if (path) {\n      path.segmentsInfo = getPathSegmentsInfo(path.path);\n    }\n  }\n\n  /**\n   * @private\n   * Divides text into lines of text and lines of graphemes.\n   */\n  _splitText(): TextLinesInfo {\n    const newLines = this._splitTextIntoLines(this.text);\n    this.textLines = newLines.lines;\n    this._textLines = newLines.graphemeLines;\n    this._unwrappedTextLines = newLines._unwrappedLines;\n    this._text = newLines.graphemeText;\n    return newLines;\n  }\n\n  /**\n   * Initialize or update text dimensions.\n   * Updates this.width and this.height with the proper values.\n   * Does not return dimensions.\n   */\n  initDimensions() {\n    this._splitText();\n    this._clearCache();\n    this.dirty = true;\n    if (this.path) {\n      this.width = this.path.width;\n      this.height = this.path.height;\n    } else {\n      this.width =\n        this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\n      this.height = this.calcTextHeight();\n    }\n    if (this.textAlign.includes(JUSTIFY)) {\n      // once text is measured we need to make space fatter to make justified text.\n      this.enlargeSpaces();\n    }\n  }\n\n  /**\n   * Enlarge space boxes and shift the others\n   */\n  enlargeSpaces() {\n    let diffSpace,\n      currentLineWidth,\n      numberOfSpaces,\n      accumulatedSpace,\n      line,\n      charBound,\n      spaces;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      if (\n        this.textAlign !== JUSTIFY &&\n        (i === len - 1 || this.isEndOfWrapping(i))\n      ) {\n        continue;\n      }\n      accumulatedSpace = 0;\n      line = this._textLines[i];\n      currentLineWidth = this.getLineWidth(i);\n      if (\n        currentLineWidth < this.width &&\n        (spaces = this.textLines[i].match(this._reSpacesAndTabs))\n      ) {\n        numberOfSpaces = spaces.length;\n        diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\n        for (let j = 0; j <= line.length; j++) {\n          charBound = this.__charBounds[i][j];\n          if (this._reSpaceAndTab.test(line[j])) {\n            charBound.width += diffSpace;\n            charBound.kernedWidth += diffSpace;\n            charBound.left += accumulatedSpace;\n            accumulatedSpace += diffSpace;\n          } else {\n            charBound.left += accumulatedSpace;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Detect if the text line is ended with an hard break\n   * text and itext do not have wrapping, return false\n   * @return {Boolean}\n   */\n  isEndOfWrapping(lineIndex: number): boolean {\n    return lineIndex === this._textLines.length - 1;\n  }\n\n  /**\n   * Detect if a line has a linebreak and so we need to account for it when moving\n   * and counting style.\n   * It return always 1 for text and Itext. Textbox has its own implementation\n   * @return Number\n   */\n  missingNewlineOffset(lineIndex: number, skipWrapping?: boolean): 0 | 1;\n  missingNewlineOffset(_lineIndex: number): 1 {\n    return 1;\n  }\n\n  /**\n   * Returns 2d representation (lineIndex and charIndex) of cursor\n   * @param {Number} selectionStart\n   * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n   */\n  get2DCursorLocation(selectionStart: number, skipWrapping?: boolean) {\n    const lines = skipWrapping ? this._unwrappedTextLines : this._textLines;\n    let i: number;\n    for (i = 0; i < lines.length; i++) {\n      if (selectionStart <= lines[i].length) {\n        return {\n          lineIndex: i,\n          charIndex: selectionStart,\n        };\n      }\n      selectionStart -=\n        lines[i].length + this.missingNewlineOffset(i, skipWrapping);\n    }\n    return {\n      lineIndex: i - 1,\n      charIndex:\n        lines[i - 1].length < selectionStart\n          ? lines[i - 1].length\n          : selectionStart,\n    };\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of text object\n   */\n  toString(): string {\n    return `#<Text (${this.complexity()}): { \"text\": \"${\n      this.text\n    }\", \"fontFamily\": \"${this.fontFamily}\" }>`;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @param {Object} dim.x width of object to be cached\n   * @param {Object} dim.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const dims = super._getCacheCanvasDimensions();\n    const fontSize = this.fontSize;\n    dims.width += fontSize * dims.zoomX;\n    dims.height += fontSize * dims.zoomY;\n    return dims;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const path = this.path;\n    path && !path.isNotVisible() && path._render(ctx);\n    this._setTextStyles(ctx);\n    this._renderTextLinesBackground(ctx);\n    this._renderTextDecoration(ctx, 'underline');\n    this._renderText(ctx);\n    this._renderTextDecoration(ctx, 'overline');\n    this._renderTextDecoration(ctx, 'linethrough');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderText(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === STROKE) {\n      this._renderTextStroke(ctx);\n      this._renderTextFill(ctx);\n    } else {\n      this._renderTextFill(ctx);\n      this._renderTextStroke(ctx);\n    }\n  }\n\n  /**\n   * Set the font parameter of the context with the object properties or with charStyle\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Object} [charStyle] object with font style properties\n   * @param {String} [charStyle.fontFamily] Font Family\n   * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\n   * @param {String} [charStyle.fontWeight] Font weight\n   * @param {String} [charStyle.fontStyle] Font style (italic|normal)\n   */\n  _setTextStyles(\n    ctx: CanvasRenderingContext2D,\n    charStyle?: any,\n    forMeasuring?: boolean,\n  ) {\n    ctx.textBaseline = 'alphabetic';\n    if (this.path) {\n      switch (this.pathAlign) {\n        case CENTER:\n          ctx.textBaseline = 'middle';\n          break;\n        case 'ascender':\n          ctx.textBaseline = TOP;\n          break;\n        case 'descender':\n          ctx.textBaseline = BOTTOM;\n          break;\n      }\n    }\n    ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\n  }\n\n  /**\n   * calculate and return the text Width measuring each line.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @return {Number} Maximum width of Text object\n   */\n  calcTextWidth(): number {\n    let maxWidth = this.getLineWidth(0);\n\n    for (let i = 1, len = this._textLines.length; i < len; i++) {\n      const currentLineWidth = this.getLineWidth(i);\n      if (currentLineWidth > maxWidth) {\n        maxWidth = currentLineWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  /**\n   * @private\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} line Text to render\n   * @param {Number} left Left position of text\n   * @param {Number} top Top position of text\n   * @param {Number} lineIndex Index of a line in a text\n   */\n  _renderTextLine(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: string[],\n    left: number,\n    top: number,\n    lineIndex: number,\n  ) {\n    this._renderChars(method, ctx, line, left, top, lineIndex);\n  }\n\n  /**\n   * Renders the text background for lines, taking care of style\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextLinesBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {\n      return;\n    }\n    const originalFill = ctx.fillStyle,\n      leftOffset = this._getLeftOffset();\n    let lineTopOffset = this._getTopOffset();\n\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (\n        !this.textBackgroundColor &&\n        !this.styleHas('textBackgroundColor', i)\n      ) {\n        lineTopOffset += heightOfLine;\n        continue;\n      }\n      const jlen = this._textLines[i].length;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxWidth = 0;\n      let boxStart = 0;\n      let drawStart;\n      let currentColor;\n      let lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n      for (let j = 0; j < jlen; j++) {\n        // at this point charbox are either standard or full with pathInfo if there is a path.\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n        if (this.path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillStyle = currentColor;\n          currentColor &&\n            ctx.fillRect(\n              -charBox.width / 2,\n              (-heightOfLine / this.lineHeight) * (1 - this._fontSizeFraction),\n              charBox.width,\n              heightOfLine / this.lineHeight,\n            );\n          ctx.restore();\n        } else if (currentColor !== lastColor) {\n          drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          ctx.fillStyle = lastColor;\n          lastColor &&\n            ctx.fillRect(\n              drawStart,\n              lineTopOffset,\n              boxWidth,\n              heightOfLine / this.lineHeight,\n            );\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastColor = currentColor;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      if (currentColor && !this.path) {\n        drawStart = leftOffset + lineLeftOffset + boxStart;\n        if (this.direction === 'rtl') {\n          drawStart = this.width - drawStart - boxWidth;\n        }\n        ctx.fillStyle = currentColor;\n        ctx.fillRect(\n          drawStart,\n          lineTopOffset,\n          boxWidth,\n          heightOfLine / this.lineHeight,\n        );\n      }\n      lineTopOffset += heightOfLine;\n    }\n    ctx.fillStyle = originalFill;\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * measure and return the width of a single character.\n   * possibly overridden to accommodate different measure logic or\n   * to hook some external lib for character measurement\n   * @private\n   * @param {String} _char, char to be measured\n   * @param {Object} charStyle style of char to be measured\n   * @param {String} [previousChar] previous char\n   * @param {Object} [prevCharStyle] style of previous char\n   */\n  _measureChar(\n    _char: string,\n    charStyle: CompleteTextStyleDeclaration,\n    previousChar: string | undefined,\n    prevCharStyle: CompleteTextStyleDeclaration | Record<string, never>,\n  ) {\n    const fontCache = cache.getFontCache(charStyle),\n      fontDeclaration = this._getFontDeclaration(charStyle),\n      couple = previousChar + _char,\n      stylesAreEqual =\n        previousChar &&\n        fontDeclaration === this._getFontDeclaration(prevCharStyle),\n      fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE;\n    let width: number | undefined,\n      coupleWidth: number | undefined,\n      previousWidth: number | undefined,\n      kernedWidth: number | undefined;\n\n    if (previousChar && fontCache[previousChar] !== undefined) {\n      previousWidth = fontCache[previousChar];\n    }\n    if (fontCache[_char] !== undefined) {\n      kernedWidth = width = fontCache[_char];\n    }\n    if (stylesAreEqual && fontCache[couple] !== undefined) {\n      coupleWidth = fontCache[couple];\n      kernedWidth = coupleWidth - previousWidth!;\n    }\n    if (\n      width === undefined ||\n      previousWidth === undefined ||\n      coupleWidth === undefined\n    ) {\n      const ctx = getMeasuringContext()!;\n      // send a TRUE to specify measuring font size CACHE_FONT_SIZE\n      this._setTextStyles(ctx, charStyle, true);\n      if (width === undefined) {\n        kernedWidth = width = ctx.measureText(_char).width;\n        fontCache[_char] = width;\n      }\n      if (previousWidth === undefined && stylesAreEqual && previousChar) {\n        previousWidth = ctx.measureText(previousChar).width;\n        fontCache[previousChar] = previousWidth;\n      }\n      if (stylesAreEqual && coupleWidth === undefined) {\n        // we can measure the kerning couple and subtract the width of the previous character\n        coupleWidth = ctx.measureText(couple).width;\n        fontCache[couple] = coupleWidth;\n        // safe to use the non-null since if undefined we defined it before.\n        kernedWidth = coupleWidth - previousWidth!;\n      }\n    }\n    return {\n      width: width * fontMultiplier,\n      kernedWidth: kernedWidth! * fontMultiplier,\n    };\n  }\n\n  /**\n   * Computes height of character at given position\n   * @param {Number} line the line index number\n   * @param {Number} _char the character index number\n   * @return {Number} fontSize of the character\n   */\n  getHeightOfChar(line: number, _char: number): number {\n    return this.getValueOfPropertyAt(line, _char, 'fontSize');\n  }\n\n  /**\n   * measure a text line measuring all characters.\n   * @param {Number} lineIndex line number\n   */\n  measureLine(lineIndex: number) {\n    const lineInfo = this._measureLine(lineIndex);\n    if (this.charSpacing !== 0) {\n      lineInfo.width -= this._getWidthOfCharSpacing();\n    }\n    if (lineInfo.width < 0) {\n      lineInfo.width = 0;\n    }\n    return lineInfo;\n  }\n\n  /**\n   * measure every grapheme of a line, populating __charBounds\n   * @param {Number} lineIndex\n   * @return {Object} object.width total width of characters\n   * @return {Object} object.numOfSpaces length of chars that match this._reSpacesAndTabs\n   */\n  _measureLine(lineIndex: number) {\n    let width = 0,\n      prevGrapheme: string | undefined,\n      graphemeInfo: GraphemeBBox | undefined;\n\n    const reverse = this.pathSide === RIGHT,\n      path = this.path,\n      line = this._textLines[lineIndex],\n      llength = line.length,\n      lineBounds = new Array<GraphemeBBox>(llength);\n\n    this.__charBounds[lineIndex] = lineBounds;\n    for (let i = 0; i < llength; i++) {\n      const grapheme = line[i];\n      graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\n      lineBounds[i] = graphemeInfo;\n      width += graphemeInfo.kernedWidth;\n      prevGrapheme = grapheme;\n    }\n    // this latest bound box represent the last character of the line\n    // to simplify cursor handling in interactive mode.\n    lineBounds[llength] = {\n      left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\n      width: 0,\n      kernedWidth: 0,\n      height: this.fontSize,\n      deltaY: 0,\n    } as GraphemeBBox;\n    if (path && path.segmentsInfo) {\n      let positionInPath = 0;\n      const totalPathLength =\n        path.segmentsInfo[path.segmentsInfo.length - 1].length;\n      switch (this.textAlign) {\n        case LEFT:\n          positionInPath = reverse ? totalPathLength - width : 0;\n          break;\n        case CENTER:\n          positionInPath = (totalPathLength - width) / 2;\n          break;\n        case RIGHT:\n          positionInPath = reverse ? 0 : totalPathLength - width;\n          break;\n        //todo - add support for justify\n      }\n      positionInPath += this.pathStartOffset * (reverse ? -1 : 1);\n      for (\n        let i = reverse ? llength - 1 : 0;\n        reverse ? i >= 0 : i < llength;\n        reverse ? i-- : i++\n      ) {\n        graphemeInfo = lineBounds[i];\n        if (positionInPath > totalPathLength) {\n          positionInPath %= totalPathLength;\n        } else if (positionInPath < 0) {\n          positionInPath += totalPathLength;\n        }\n        // it would probably much faster to send all the grapheme position for a line\n        // and calculate path position/angle at once.\n        this._setGraphemeOnPath(positionInPath, graphemeInfo);\n        positionInPath += graphemeInfo.kernedWidth;\n      }\n    }\n    return { width: width, numOfSpaces: 0 };\n  }\n\n  /**\n   * Calculate the angle  and the left,top position of the char that follow a path.\n   * It appends it to graphemeInfo to be reused later at rendering\n   * @private\n   * @param {Number} positionInPath to be measured\n   * @param {GraphemeBBox} graphemeInfo current grapheme box information\n   * @param {Object} startingPoint position of the point\n   */\n  _setGraphemeOnPath(positionInPath: number, graphemeInfo: GraphemeBBox) {\n    const centerPosition = positionInPath + graphemeInfo.kernedWidth / 2,\n      path = this.path!;\n\n    // we are at currentPositionOnPath. we want to know what point on the path is.\n    const info = getPointOnPath(path.path, centerPosition, path.segmentsInfo)!;\n    graphemeInfo.renderLeft = info.x - path.pathOffset.x;\n    graphemeInfo.renderTop = info.y - path.pathOffset.y;\n    graphemeInfo.angle = info.angle + (this.pathSide === RIGHT ? Math.PI : 0);\n  }\n\n  /**\n   *\n   * @param {String} grapheme to be measured\n   * @param {Number} lineIndex index of the line where the char is\n   * @param {Number} charIndex position in the line\n   * @param {String} [prevGrapheme] character preceding the one to be measured\n   * @returns {GraphemeBBox} grapheme bbox\n   */\n  _getGraphemeBox(\n    grapheme: string,\n    lineIndex: number,\n    charIndex: number,\n    prevGrapheme?: string,\n    skipLeft?: boolean,\n  ): GraphemeBBox {\n    const style = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      prevStyle = prevGrapheme\n        ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1)\n        : {},\n      info = this._measureChar(grapheme, style, prevGrapheme, prevStyle);\n    let kernedWidth = info.kernedWidth,\n      width = info.width,\n      charSpacing;\n\n    if (this.charSpacing !== 0) {\n      charSpacing = this._getWidthOfCharSpacing();\n      width += charSpacing;\n      kernedWidth += charSpacing;\n    }\n\n    const box: GraphemeBBox = {\n      width,\n      left: 0,\n      height: style.fontSize,\n      kernedWidth,\n      deltaY: style.deltaY,\n    };\n    if (charIndex > 0 && !skipLeft) {\n      const previousBox = this.__charBounds[lineIndex][charIndex - 1];\n      box.left =\n        previousBox.left + previousBox.width + info.kernedWidth - info.width;\n    }\n    return box;\n  }\n\n  /**\n   * Calculate height of line at 'lineIndex'\n   * @param {Number} lineIndex index of line to calculate\n   * @return {Number}\n   */\n  getHeightOfLine(lineIndex: number): number {\n    if (this.__lineHeights[lineIndex]) {\n      return this.__lineHeights[lineIndex];\n    }\n\n    // char 0 is measured before the line cycle because it needs to char\n    // emptylines\n    let maxHeight = this.getHeightOfChar(lineIndex, 0);\n    for (let i = 1, len = this._textLines[lineIndex].length; i < len; i++) {\n      maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\n    }\n\n    return (this.__lineHeights[lineIndex] =\n      maxHeight * this.lineHeight * this._fontSizeMult);\n  }\n\n  /**\n   * Calculate text box height\n   */\n  calcTextHeight() {\n    let lineHeight,\n      height = 0;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineHeight = this.getHeightOfLine(i);\n      height += i === len - 1 ? lineHeight / this.lineHeight : lineHeight;\n    }\n    return height;\n  }\n\n  /**\n   * @private\n   * @return {Number} Left offset\n   */\n  _getLeftOffset(): number {\n    return this.direction === 'ltr' ? -this.width / 2 : this.width / 2;\n  }\n\n  /**\n   * @private\n   * @return {Number} Top offset\n   */\n  _getTopOffset(): number {\n    return -this.height / 2;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   */\n  _renderTextCommon(\n    ctx: CanvasRenderingContext2D,\n    method: 'fillText' | 'strokeText',\n  ) {\n    ctx.save();\n    let lineHeights = 0;\n    const left = this._getLeftOffset(),\n      top = this._getTopOffset();\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i),\n        maxHeight = heightOfLine / this.lineHeight,\n        leftOffset = this._getLineLeftOffset(i);\n      this._renderTextLine(\n        method,\n        ctx,\n        this._textLines[i],\n        left + leftOffset,\n        top + lineHeights + maxHeight,\n        i,\n      );\n      lineHeights += heightOfLine;\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill && !this.styleHas(FILL)) {\n      return;\n    }\n\n    this._renderTextCommon(ctx, 'fillText');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextStroke(ctx: CanvasRenderingContext2D) {\n    if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    this._setLineDash(ctx, this.strokeDashArray);\n    ctx.beginPath();\n    this._renderTextCommon(ctx, 'strokeText');\n    ctx.closePath();\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {String} method fillText or strokeText.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Array} line Content of the line, splitted in an array by grapheme\n   * @param {Number} left\n   * @param {Number} top\n   * @param {Number} lineIndex\n   */\n  _renderChars(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: Array<any>,\n    left: number,\n    top: number,\n    lineIndex: number,\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      path = this.path,\n      shortCut =\n        !isJustify &&\n        this.charSpacing === 0 &&\n        this.isEmptyStyles(lineIndex) &&\n        !path,\n      isLtr = this.direction === 'ltr',\n      sign = this.direction === 'ltr' ? 1 : -1,\n      // this was changed in the PR #7674\n      // currentDirection = ctx.canvas.getAttribute('dir');\n      currentDirection = ctx.direction;\n\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      boxWidth = 0,\n      timeToRender,\n      drawingLeft;\n\n    ctx.save();\n    if (currentDirection !== this.direction) {\n      ctx.canvas.setAttribute('dir', isLtr ? 'ltr' : 'rtl');\n      ctx.direction = isLtr ? 'ltr' : 'rtl';\n      ctx.textAlign = isLtr ? LEFT : RIGHT;\n    }\n    top -= (lineHeight * this._fontSizeFraction) / this.lineHeight;\n    if (shortCut) {\n      // render all the line in one pass without checking\n      // drawingLeft = isLtr ? left : left - this.getLineWidth(lineIndex);\n      this._renderChar(method, ctx, lineIndex, 0, line.join(''), left, top);\n      ctx.restore();\n      return;\n    }\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing || path;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i] as Required<GraphemeBBox>;\n      if (boxWidth === 0) {\n        left += sign * (charBox.kernedWidth - charBox.width);\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, false);\n      }\n      if (timeToRender) {\n        if (path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            -boxWidth / 2,\n            0,\n          );\n          ctx.restore();\n        } else {\n          drawingLeft = left;\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            drawingLeft,\n            top,\n          );\n        }\n        charsToRender = '';\n        actualStyle = nextStyle;\n        left += sign * boxWidth;\n        boxWidth = 0;\n      }\n    }\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {TFiller} filler a fabric gradient instance\n   * @return {CanvasPattern} a pattern to use as fill/stroke style\n   */\n  _applyPatternGradientTransformText(filler: TFiller) {\n    // TODO: verify compatibility with strokeUniform\n    const width = this.width + this.strokeWidth,\n      height = this.height + this.strokeWidth,\n      pCanvas = createCanvasElementFor({\n        width,\n        height,\n      }),\n      pCtx = pCanvas.getContext('2d')!;\n    pCanvas.width = width;\n    pCanvas.height = height;\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.fillStyle = filler.toLive(pCtx)!;\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fill();\n    return pCtx.createPattern(pCanvas, 'no-repeat')!;\n  }\n\n  handleFiller<T extends 'fill' | 'stroke'>(\n    ctx: CanvasRenderingContext2D,\n    property: `${T}Style`,\n    filler: TFiller | string,\n  ): { offsetX: number; offsetY: number } {\n    let offsetX: number, offsetY: number;\n    if (isFiller(filler)) {\n      if (\n        (filler as Gradient<'linear'>).gradientUnits === 'percentage' ||\n        (filler as Gradient<'linear'>).gradientTransform ||\n        (filler as Pattern).patternTransform\n      ) {\n        // need to transform gradient in a pattern.\n        // this is a slow process. If you are hitting this codepath, and the object\n        // is not using caching, you should consider switching it on.\n        // we need a canvas as big as the current object caching canvas.\n        offsetX = -this.width / 2;\n        offsetY = -this.height / 2;\n        ctx.translate(offsetX, offsetY);\n        ctx[property] = this._applyPatternGradientTransformText(filler);\n        return { offsetX, offsetY };\n      } else {\n        // is a simple gradient or pattern\n        ctx[property] = filler.toLive(ctx)!;\n        return this._applyPatternGradientTransform(ctx, filler);\n      }\n    } else {\n      // is a color\n      ctx[property] = filler;\n    }\n    return { offsetX: 0, offsetY: 0 };\n  }\n\n  /**\n   * This function prepare the canvas for a stroke style, and stroke and strokeWidth\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with stroke and strokeWidth defined\n   * @returns\n   */\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    {\n      stroke,\n      strokeWidth,\n    }: Pick<CompleteTextStyleDeclaration, 'stroke' | 'strokeWidth'>,\n  ) {\n    ctx.lineWidth = strokeWidth;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.lineDashOffset = this.strokeDashOffset;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.miterLimit = this.strokeMiterLimit;\n    return this.handleFiller(ctx, 'strokeStyle', stroke!);\n  }\n\n  /**\n   * This function prepare the canvas for a ill style, and fill\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with ill defined\n   * @returns\n   */\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    return this.handleFiller(ctx, 'fillStyle', fill!);\n  }\n\n  /**\n   * @private\n   * @param {String} method\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {String} _char\n   * @param {Number} left Left coordinate\n   * @param {Number} top Top coordinate\n   * @param {Number} lineHeight Height of the line\n   */\n  _renderChar(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    lineIndex: number,\n    charIndex: number,\n    _char: string,\n    left: number,\n    top: number,\n  ) {\n    const decl = this._getStyleDeclaration(lineIndex, charIndex),\n      fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      shouldFill = method === 'fillText' && fullDecl.fill,\n      shouldStroke =\n        method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth;\n\n    if (!shouldStroke && !shouldFill) {\n      return;\n    }\n    ctx.save();\n\n    ctx.font = this._getFontDeclaration(fullDecl);\n\n    if (decl.textBackgroundColor) {\n      this._removeShadow(ctx);\n    }\n    if (decl.deltaY) {\n      top += decl.deltaY;\n    }\n\n    if (shouldFill) {\n      const fillOffsets = this._setFillStyles(ctx, fullDecl);\n      ctx.fillText(\n        _char,\n        left - fillOffsets.offsetX,\n        top - fillOffsets.offsetY,\n      );\n    }\n\n    if (shouldStroke) {\n      const strokeOffsets = this._setStrokeStyles(ctx, fullDecl);\n      ctx.strokeText(\n        _char,\n        left - strokeOffsets.offsetX,\n        top - strokeOffsets.offsetY,\n      );\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Turns the character into a 'superior figure' (i.e. 'superscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSuperscript(start: number, end: number) {\n    this._setScript(start, end, this.superscript);\n  }\n\n  /**\n   * Turns the character into an 'inferior figure' (i.e. 'subscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSubscript(start: number, end: number) {\n    this._setScript(start, end, this.subscript);\n  }\n\n  /**\n   * Applies 'schema' at given position\n   * @private\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   * @param {Number} schema\n   */\n  protected _setScript(\n    start: number,\n    end: number,\n    schema: {\n      size: number;\n      baseline: number;\n    },\n  ) {\n    const loc = this.get2DCursorLocation(start, true),\n      fontSize = this.getValueOfPropertyAt(\n        loc.lineIndex,\n        loc.charIndex,\n        'fontSize',\n      ),\n      dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),\n      style = {\n        fontSize: fontSize * schema.size,\n        deltaY: dy + fontSize * schema.baseline,\n      };\n    this.setSelectionStyles(style, start, end);\n  }\n\n  /**\n   * @private\n   * @param {Number} lineIndex index text line\n   * @return {Number} Line left offset\n   */\n  _getLineLeftOffset(lineIndex: number): number {\n    const lineWidth = this.getLineWidth(lineIndex),\n      lineDiff = this.width - lineWidth,\n      textAlign = this.textAlign,\n      direction = this.direction,\n      isEndOfWrapping = this.isEndOfWrapping(lineIndex);\n    let leftOffset = 0;\n    if (\n      textAlign === JUSTIFY ||\n      (textAlign === JUSTIFY_CENTER && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_RIGHT && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_LEFT && !isEndOfWrapping)\n    ) {\n      return 0;\n    }\n    if (textAlign === CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (textAlign === JUSTIFY_CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === JUSTIFY_RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (direction === 'rtl') {\n      if (\n        textAlign === RIGHT ||\n        textAlign === JUSTIFY ||\n        textAlign === JUSTIFY_RIGHT\n      ) {\n        leftOffset = 0;\n      } else if (textAlign === LEFT || textAlign === JUSTIFY_LEFT) {\n        leftOffset = -lineDiff;\n      } else if (textAlign === CENTER || textAlign === JUSTIFY_CENTER) {\n        leftOffset = -lineDiff / 2;\n      }\n    }\n    return leftOffset;\n  }\n\n  /**\n   * @private\n   */\n  _clearCache() {\n    this._forceClearCache = false;\n    this.__lineWidths = [];\n    this.__lineHeights = [];\n    this.__charBounds = [];\n  }\n\n  /**\n   * Measure a single line given its index. Used to calculate the initial\n   * text bounding box. The values are calculated and stored in __lineWidths cache.\n   * @private\n   * @param {Number} lineIndex line number\n   * @return {Number} Line width\n   */\n  getLineWidth(lineIndex: number): number {\n    if (this.__lineWidths[lineIndex] !== undefined) {\n      return this.__lineWidths[lineIndex];\n    }\n\n    const { width } = this.measureLine(lineIndex);\n    this.__lineWidths[lineIndex] = width;\n    return width;\n  }\n\n  _getWidthOfCharSpacing() {\n    if (this.charSpacing !== 0) {\n      return (this.fontSize * this.charSpacing) / 1000;\n    }\n    return 0;\n  }\n\n  /**\n   * Retrieves the value of property at given character position\n   * @param {Number} lineIndex the line number\n   * @param {Number} charIndex the character number\n   * @param {String} property the property name\n   * @returns the value of 'property'\n   */\n  getValueOfPropertyAt<T extends StylePropertiesType>(\n    lineIndex: number,\n    charIndex: number,\n    property: T,\n  ): this[T] {\n    const charStyle = this._getStyleDeclaration(lineIndex, charIndex);\n    return (charStyle[property] ?? this[property]) as this[T];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextDecoration(\n    ctx: CanvasRenderingContext2D,\n    type: 'underline' | 'linethrough' | 'overline',\n  ) {\n    if (!this[type] && !this.styleHas(type)) {\n      return;\n    }\n    let topOffset = this._getTopOffset();\n    const leftOffset = this._getLeftOffset(),\n      path = this.path,\n      charSpacing = this._getWidthOfCharSpacing(),\n      offsetY = this.offsets[type];\n\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (!this[type] && !this.styleHas(type, i)) {\n        topOffset += heightOfLine;\n        continue;\n      }\n      const line = this._textLines[i];\n      const maxHeight = heightOfLine / this.lineHeight;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxStart = 0;\n      let boxWidth = 0;\n      let lastDecoration = this.getValueOfPropertyAt(i, 0, type);\n      let lastFill = this.getValueOfPropertyAt(i, 0, FILL);\n      let currentDecoration;\n      let currentFill;\n      const top = topOffset + maxHeight * (1 - this._fontSizeFraction);\n      let size = this.getHeightOfChar(i, 0);\n      let dy = this.getValueOfPropertyAt(i, 0, 'deltaY');\n      for (let j = 0, jlen = line.length; j < jlen; j++) {\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentDecoration = this.getValueOfPropertyAt(i, j, type);\n        currentFill = this.getValueOfPropertyAt(i, j, FILL);\n        const currentSize = this.getHeightOfChar(i, j);\n        const currentDy = this.getValueOfPropertyAt(i, j, 'deltaY');\n        if (path && currentDecoration && currentFill) {\n          ctx.save();\n          // bug? verify lastFill is a valid fill here.\n          ctx.fillStyle = lastFill as string;\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillRect(\n            -charBox.kernedWidth / 2,\n            offsetY * currentSize + currentDy,\n            charBox.kernedWidth,\n            this.fontSize / 15,\n          );\n          ctx.restore();\n        } else if (\n          (currentDecoration !== lastDecoration ||\n            currentFill !== lastFill ||\n            currentSize !== size ||\n            currentDy !== dy) &&\n          boxWidth > 0\n        ) {\n          let drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          if (lastDecoration && lastFill) {\n            // bug? verify lastFill is a valid fill here.\n            ctx.fillStyle = lastFill as string;\n            ctx.fillRect(\n              drawStart,\n              top + offsetY * size + dy,\n              boxWidth,\n              this.fontSize / 15,\n            );\n          }\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastDecoration = currentDecoration;\n          lastFill = currentFill;\n          size = currentSize;\n          dy = currentDy;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      let drawStart = leftOffset + lineLeftOffset + boxStart;\n      if (this.direction === 'rtl') {\n        drawStart = this.width - drawStart - boxWidth;\n      }\n      ctx.fillStyle = currentFill as string;\n      currentDecoration &&\n        currentFill &&\n        ctx.fillRect(\n          drawStart,\n          top + offsetY * size + dy,\n          boxWidth - charSpacing,\n          this.fontSize / 15,\n        );\n      topOffset += heightOfLine;\n    }\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * return font declaration string for canvas context\n   * @param {Object} [styleObject] object\n   * @returns {String} font declaration formatted for canvas context.\n   */\n  _getFontDeclaration(\n    {\n      fontFamily = this.fontFamily,\n      fontStyle = this.fontStyle,\n      fontWeight = this.fontWeight,\n      fontSize = this.fontSize,\n    }: Partial<\n      Pick<\n        TextStyleDeclaration,\n        'fontFamily' | 'fontStyle' | 'fontWeight' | 'fontSize'\n      >\n    > = {},\n    forMeasuring?: boolean,\n  ): string {\n    const parsedFontFamily =\n      fontFamily.includes(\"'\") ||\n      fontFamily.includes('\"') ||\n      fontFamily.includes(',') ||\n      FabricText.genericFonts.includes(fontFamily.toLowerCase())\n        ? fontFamily\n        : `\"${fontFamily}\"`;\n    return [\n      fontStyle,\n      fontWeight,\n      `${forMeasuring ? this.CACHE_FONT_SIZE : fontSize}px`,\n      parsedFontFamily,\n    ].join(' ');\n  }\n\n  /**\n   * Renders text instance on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    if (!this.visible) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    if (this._forceClearCache) {\n      this.initDimensions();\n    }\n    super.render(ctx);\n  }\n\n  /**\n   * Override this method to customize grapheme splitting\n   * @todo the util `graphemeSplit` needs to be injectable in some way.\n   * is more comfortable to inject the correct util rather than having to override text\n   * in the middle of the prototype chain\n   * @param {string} value\n   * @returns {string[]} array of graphemes\n   */\n  graphemeSplit(value: string): string[] {\n    return graphemeSplit(value);\n  }\n\n  /**\n   * Returns the text as an array of lines.\n   * @param {String} text text to split\n   * @returns  Lines in the text\n   */\n  _splitTextIntoLines(text: string): TextLinesInfo {\n    const lines = text.split(this._reNewline),\n      newLines = new Array<string[]>(lines.length),\n      newLine = ['\\n'];\n    let newText: string[] = [];\n    for (let i = 0; i < lines.length; i++) {\n      newLines[i] = this.graphemeSplit(lines[i]);\n      newText = newText.concat(newLines[i], newLine);\n    }\n    newText.pop();\n    return {\n      _unwrappedLines: newLines,\n      lines: lines,\n      graphemeText: newText,\n      graphemeLines: newLines,\n    };\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject([...additionalProps, ...propertiesToInclude] as K[]),\n      styles: stylesToArray(this.styles, this.text),\n      ...(this.path ? { path: this.path.toObject() } : {}),\n    };\n  }\n\n  set(key: string | any, value?: any) {\n    const { textLayoutProperties } = this.constructor as typeof FabricText;\n    super.set(key, value);\n    let needsDims = false;\n    let isAddingPath = false;\n    if (typeof key === 'object') {\n      for (const _key in key) {\n        if (_key === 'path') {\n          this.setPathInfo();\n        }\n        needsDims = needsDims || textLayoutProperties.includes(_key);\n        isAddingPath = isAddingPath || _key === 'path';\n      }\n    } else {\n      needsDims = textLayoutProperties.includes(key);\n      isAddingPath = key === 'path';\n    }\n    if (isAddingPath) {\n      this.setPathInfo();\n    }\n    if (needsDims && this.initialized) {\n      this.initDimensions();\n      this.setCoords();\n    }\n    return this;\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity\n   */\n  complexity(): number {\n    return 1;\n  }\n\n  /**\n   * List of generic font families\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-family#generic-name\n   */\n  static genericFonts = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n    'ui-serif',\n    'ui-sans-serif',\n    'ui-monospace',\n    'ui-rounded',\n    'math',\n    'emoji',\n    'fangsong',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricText.fromElement})\n   * @static\n   * @memberOf Text\n   * @see: http://www.w3.org/TR/SVG/text.html#TextElement\n   */\n  static ATTRIBUTE_NAMES = SHARED_ATTRIBUTES.concat(\n    'x',\n    'y',\n    'dx',\n    'dy',\n    'font-family',\n    'font-style',\n    'font-weight',\n    'font-size',\n    'letter-spacing',\n    'text-decoration',\n    'text-anchor',\n  );\n\n  /**\n   * Returns FabricText instance from an SVG element (<b>not yet implemented</b>)\n   * @static\n   * @memberOf Text\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      FabricText.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n\n    const {\n      textAnchor = LEFT as typeof LEFT | typeof CENTER | typeof RIGHT,\n      textDecoration = '',\n      dx = 0,\n      dy = 0,\n      top = 0,\n      left = 0,\n      fontSize = DEFAULT_SVG_FONT_SIZE,\n      strokeWidth = 1,\n      ...restOfOptions\n    } = { ...options, ...parsedAttributes };\n\n    const textContent = (element.textContent || '')\n      .replace(/^\\s+|\\s+$|\\n+/g, '')\n      .replace(/\\s+/g, ' ');\n\n    // this code here is probably the usual issue for SVG center find\n    // this can later looked at again and probably removed.\n\n    const text = new this(textContent, {\n        left: left + dx,\n        top: top + dy,\n        underline: textDecoration.includes('underline'),\n        overline: textDecoration.includes('overline'),\n        linethrough: textDecoration.includes('line-through'),\n        // we initialize this as 0\n        strokeWidth: 0,\n        fontSize,\n        ...restOfOptions,\n      }),\n      textHeightScaleFactor = text.getScaledHeight() / text.height,\n      lineHeightDiff =\n        (text.height + text.strokeWidth) * text.lineHeight - text.height,\n      scaledDiff = lineHeightDiff * textHeightScaleFactor,\n      textHeight = text.getScaledHeight() + scaledDiff;\n\n    let offX = 0;\n    /*\n      Adjust positioning:\n        x/y attributes in SVG correspond to the bottom-left corner of text bounding box\n        fabric output by default at top, left.\n    */\n    if (textAnchor === CENTER) {\n      offX = text.getScaledWidth() / 2;\n    }\n    if (textAnchor === RIGHT) {\n      offX = text.getScaledWidth();\n    }\n    text.set({\n      left: text.left - offX,\n      top:\n        text.top -\n        (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) /\n          text.lineHeight,\n      strokeWidth,\n    });\n    return text;\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns FabricText instance from an object representation\n   * @param {Object} object plain js Object to create an instance from\n   * @returns {Promise<FabricText>}\n   */\n  static fromObject<\n    T extends TOptions<SerializedTextProps>,\n    S extends FabricText,\n  >(object: T) {\n    return this._fromObject<S>(\n      {\n        ...object,\n        styles: stylesFromArray(object.styles || {}, object.text),\n      },\n      {\n        extraParam: 'text',\n      },\n    );\n  }\n}\n\napplyMixins(FabricText, [TextSVGExportMixin]);\nclassRegistry.setClass(FabricText);\nclassRegistry.setSVGClass(FabricText);\n", "import type {\n  DragEventData,\n  DropEventData,\n  TPointerEvent,\n} from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport type { IText } from './IText';\nimport { setStyle } from '../../util/dom_style';\nimport { cloneStyles } from '../../util/internals/cloneStyles';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { CHANGED, NONE } from '../../constants';\n\n/**\n * #### Dragging IText/Textbox Lifecycle\n * - {@link start} is called from `mousedown` {@link IText#_mouseDownHandler} and determines if dragging should start by testing {@link isPointerOverSelection}\n * - if true `mousedown` {@link IText#_mouseDownHandler} is blocked to keep selection\n * - if the pointer moves, canvas fires numerous mousemove {@link Canvas#_onMouseMove} that we make sure **aren't** prevented ({@link IText#shouldStartDragging}) in order for the window to start a drag session\n * - once/if the session starts canvas calls {@link onDragStart} on the active object to determine if dragging should occur\n * - canvas fires relevant drag events that are handled by the handlers defined in this scope\n * - {@link end} is called from `mouseup` {@link IText#mouseUpHandler}, blocking IText default click behavior\n * - in case the drag session didn't occur, {@link end} handles a click, since logic to do so was blocked during `mousedown`\n */\nexport class DraggableTextDelegate {\n  readonly target: IText;\n  private __mouseDownInPlace = false;\n  private __dragStartFired = false;\n  private __isDraggingOver = false;\n  private __dragStartSelection?: {\n    selectionStart: number;\n    selectionEnd: number;\n  };\n  private __dragImageDisposer?: VoidFunction;\n  private _dispose?: () => void;\n\n  constructor(target: IText) {\n    this.target = target;\n    const disposers = [\n      this.target.on('dragenter', this.dragEnterHandler.bind(this)),\n      this.target.on('dragover', this.dragOverHandler.bind(this)),\n      this.target.on('dragleave', this.dragLeaveHandler.bind(this)),\n      this.target.on('dragend', this.dragEndHandler.bind(this)),\n      this.target.on('drop', this.dropHandler.bind(this)),\n    ];\n    this._dispose = () => {\n      disposers.forEach((d) => d());\n      this._dispose = undefined;\n    };\n  }\n\n  isPointerOverSelection(e: TPointerEvent) {\n    const target = this.target;\n    const newSelection = target.getSelectionStartFromPointer(e);\n    return (\n      target.isEditing &&\n      newSelection >= target.selectionStart &&\n      newSelection <= target.selectionEnd &&\n      target.selectionStart < target.selectionEnd\n    );\n  }\n\n  /**\n   * @public override this method to disable dragging and default to mousedown logic\n   */\n  start(e: TPointerEvent) {\n    return (this.__mouseDownInPlace = this.isPointerOverSelection(e));\n  }\n\n  /**\n   * @public override this method to disable dragging without discarding selection\n   */\n  isActive() {\n    return this.__mouseDownInPlace;\n  }\n\n  /**\n   * Ends interaction and sets cursor in case of a click\n   * @returns true if was active\n   */\n  end(e: TPointerEvent) {\n    const active = this.isActive();\n    if (active && !this.__dragStartFired) {\n      // mousedown has been blocked since `active` is true => cursor has not been set.\n      // `__dragStartFired` is false => dragging didn't occur, pointer didn't move and is over selection.\n      // meaning this is actually a click, `active` is a false positive.\n      this.target.setCursorByClick(e);\n      this.target.initDelayedCursor(true);\n    }\n    this.__mouseDownInPlace = false;\n    this.__dragStartFired = false;\n    this.__isDraggingOver = false;\n    return active;\n  }\n\n  getDragStartSelection() {\n    return this.__dragStartSelection;\n  }\n\n  /**\n   * Override to customize the drag image\n   * https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage\n   */\n  setDragImage(\n    e: DragEvent,\n    {\n      selectionStart,\n      selectionEnd,\n    }: {\n      selectionStart: number;\n      selectionEnd: number;\n    },\n  ) {\n    const target = this.target;\n    const canvas = target.canvas!;\n    const flipFactor = new Point(target.flipX ? -1 : 1, target.flipY ? -1 : 1);\n    const boundaries = target._getCursorBoundaries(selectionStart);\n    const selectionPosition = new Point(\n      boundaries.left + boundaries.leftOffset,\n      boundaries.top + boundaries.topOffset,\n    ).multiply(flipFactor);\n    const pos = selectionPosition.transform(target.calcTransformMatrix());\n    const pointer = canvas.getScenePoint(e);\n    const diff = pointer.subtract(pos);\n    const retinaScaling = target.getCanvasRetinaScaling();\n    const bbox = target.getBoundingRect();\n    const correction = pos.subtract(new Point(bbox.left, bbox.top));\n    const vpt = canvas.viewportTransform;\n    const offset = correction.add(diff).transform(vpt, true);\n    //  prepare instance for drag image snapshot by making all non selected text invisible\n    const bgc = target.backgroundColor;\n    const styles = cloneStyles(target.styles);\n    target.backgroundColor = '';\n    const styleOverride = {\n      stroke: 'transparent',\n      fill: 'transparent',\n      textBackgroundColor: 'transparent',\n    };\n    target.setSelectionStyles(styleOverride, 0, selectionStart);\n    target.setSelectionStyles(styleOverride, selectionEnd, target.text.length);\n    target.dirty = true;\n    const dragImage = target.toCanvasElement({\n      enableRetinaScaling: canvas.enableRetinaScaling,\n      viewportTransform: true,\n    });\n    // restore values\n    target.backgroundColor = bgc;\n    target.styles = styles;\n    target.dirty = true;\n    //  position drag image offscreen\n    setStyle(dragImage, {\n      position: 'fixed',\n      left: `${-dragImage.width}px`,\n      border: NONE,\n      width: `${dragImage.width / retinaScaling}px`,\n      height: `${dragImage.height / retinaScaling}px`,\n    });\n    this.__dragImageDisposer && this.__dragImageDisposer();\n    this.__dragImageDisposer = () => {\n      dragImage.remove();\n    };\n    getDocumentFromElement(\n      (e.target || this.target.hiddenTextarea)! as HTMLElement,\n    ).body.appendChild(dragImage);\n    e.dataTransfer?.setDragImage(dragImage, offset.x, offset.y);\n  }\n\n  /**\n   * @returns {boolean} determines whether {@link target} should/shouldn't become a drag source\n   */\n  onDragStart(e: DragEvent): boolean {\n    this.__dragStartFired = true;\n    const target = this.target;\n    const active = this.isActive();\n    if (active && e.dataTransfer) {\n      const selection = (this.__dragStartSelection = {\n        selectionStart: target.selectionStart,\n        selectionEnd: target.selectionEnd,\n      });\n      const value = target._text\n        .slice(selection.selectionStart, selection.selectionEnd)\n        .join('');\n      const data = { text: target.text, value, ...selection };\n      e.dataTransfer.setData('text/plain', value);\n      e.dataTransfer.setData(\n        'application/fabric',\n        JSON.stringify({\n          value: value,\n          styles: target.getSelectionStyles(\n            selection.selectionStart,\n            selection.selectionEnd,\n            true,\n          ),\n        }),\n      );\n      e.dataTransfer.effectAllowed = 'copyMove';\n      this.setDragImage(e, data);\n    }\n    target.abortCursorAnimation();\n    return active;\n  }\n\n  /**\n   * use {@link targetCanDrop} to respect overriding\n   * @returns {boolean} determines whether {@link target} should/shouldn't become a drop target\n   */\n  canDrop(e: DragEvent): boolean {\n    if (\n      this.target.editable &&\n      !this.target.getActiveControl() &&\n      !e.defaultPrevented\n    ) {\n      if (this.isActive() && this.__dragStartSelection) {\n        //  drag source trying to drop over itself\n        //  allow dropping only outside of drag start selection\n        const index = this.target.getSelectionStartFromPointer(e);\n        const dragStartSelection = this.__dragStartSelection;\n        return (\n          index < dragStartSelection.selectionStart ||\n          index > dragStartSelection.selectionEnd\n        );\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * in order to respect overriding {@link IText#canDrop} we call that instead of calling {@link canDrop} directly\n   */\n  protected targetCanDrop(e: DragEvent) {\n    return this.target.canDrop(e);\n  }\n\n  dragEnterHandler({ e }: DragEventData) {\n    const canDrop = this.targetCanDrop(e);\n    if (!this.__isDraggingOver && canDrop) {\n      this.__isDraggingOver = true;\n    }\n  }\n\n  dragOverHandler(ev: DragEventData) {\n    const { e } = ev;\n    const canDrop = this.targetCanDrop(e);\n    if (!this.__isDraggingOver && canDrop) {\n      this.__isDraggingOver = true;\n    } else if (this.__isDraggingOver && !canDrop) {\n      //  drop state has changed\n      this.__isDraggingOver = false;\n    }\n    if (this.__isDraggingOver) {\n      //  can be dropped, inform browser\n      e.preventDefault();\n      //  inform event subscribers\n      ev.canDrop = true;\n      ev.dropTarget = this.target;\n    }\n  }\n\n  dragLeaveHandler() {\n    if (this.__isDraggingOver || this.isActive()) {\n      this.__isDraggingOver = false;\n    }\n  }\n\n  /**\n   * Override the `text/plain | application/fabric` types of {@link DragEvent#dataTransfer}\n   * in order to change the drop value or to customize styling respectively, by listening to the `drop:before` event\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#performing_a_drop\n   */\n  dropHandler(ev: DropEventData) {\n    const { e } = ev;\n    const didDrop = e.defaultPrevented;\n    this.__isDraggingOver = false;\n    // inform browser that the drop has been accepted\n    e.preventDefault();\n    let insert = e.dataTransfer?.getData('text/plain');\n    if (insert && !didDrop) {\n      const target = this.target;\n      const canvas = target.canvas!;\n      let insertAt = target.getSelectionStartFromPointer(e);\n      const { styles } = (\n        e.dataTransfer!.types.includes('application/fabric')\n          ? JSON.parse(e.dataTransfer!.getData('application/fabric'))\n          : {}\n      ) as { styles: TextStyleDeclaration[] };\n      const trailing = insert[Math.max(0, insert.length - 1)];\n      const selectionStartOffset = 0;\n      //  drag and drop in same instance\n      if (this.__dragStartSelection) {\n        const selectionStart = this.__dragStartSelection.selectionStart;\n        const selectionEnd = this.__dragStartSelection.selectionEnd;\n        if (insertAt > selectionStart && insertAt <= selectionEnd) {\n          insertAt = selectionStart;\n        } else if (insertAt > selectionEnd) {\n          insertAt -= selectionEnd - selectionStart;\n        }\n        target.removeChars(selectionStart, selectionEnd);\n        // prevent `dragend` from handling event\n        delete this.__dragStartSelection;\n      }\n      //  remove redundant line break\n      if (\n        target._reNewline.test(trailing) &&\n        (target._reNewline.test(target._text[insertAt]) ||\n          insertAt === target._text.length)\n      ) {\n        insert = insert.trimEnd();\n      }\n      //  inform subscribers\n      ev.didDrop = true;\n      ev.dropTarget = target;\n      //  finalize\n      target.insertChars(insert, styles, insertAt);\n      // can this part be moved in an outside event? andrea to check.\n      canvas.setActiveObject(target);\n      target.enterEditing(e);\n      target.selectionStart = Math.min(\n        insertAt + selectionStartOffset,\n        target._text.length,\n      );\n      target.selectionEnd = Math.min(\n        target.selectionStart + insert.length,\n        target._text.length,\n      );\n      target.hiddenTextarea!.value = target.text;\n      target._updateTextarea();\n      target.hiddenTextarea!.focus();\n      target.fire(CHANGED, {\n        index: insertAt + selectionStartOffset,\n        action: 'drop',\n      });\n      canvas.fire('text:changed', { target });\n      canvas.contextTopDirty = true;\n      canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * fired only on the drag source after drop (if occurred)\n   * handle changes to the drag source in case of a drop on another object or a cancellation\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#finishing_a_drag\n   */\n  dragEndHandler({ e }: DragEventData) {\n    if (this.isActive() && this.__dragStartFired) {\n      //  once the drop event finishes we check if we need to change the drag source\n      //  if the drag source received the drop we bail out since the drop handler has already handled logic\n      if (this.__dragStartSelection) {\n        const target = this.target;\n        const canvas = this.target.canvas!;\n        const { selectionStart, selectionEnd } = this.__dragStartSelection;\n        const dropEffect = e.dataTransfer?.dropEffect || NONE;\n        if (dropEffect === NONE) {\n          // pointer is back over selection\n          target.selectionStart = selectionStart;\n          target.selectionEnd = selectionEnd;\n          target._updateTextarea();\n          target.hiddenTextarea!.focus();\n        } else {\n          target.clearContextTop();\n          if (dropEffect === 'move') {\n            target.removeChars(selectionStart, selectionEnd);\n            target.selectionStart = target.selectionEnd = selectionStart;\n            target.hiddenTextarea &&\n              (target.hiddenTextarea.value = target.text);\n            target._updateTextarea();\n            target.fire(CHANGED, {\n              index: selectionStart,\n              action: 'dragend',\n            });\n            canvas.fire('text:changed', { target });\n            canvas.requestRenderAll();\n          }\n          target.exitEditing();\n        }\n      }\n    }\n\n    this.__dragImageDisposer && this.__dragImageDisposer();\n    delete this.__dragImageDisposer;\n    delete this.__dragStartSelection;\n    this.__isDraggingOver = false;\n  }\n\n  dispose() {\n    this._dispose && this._dispose();\n  }\n}\n", "import type { ObjectEvents, TPointerEvent } from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport type { FabricObject } from '../Object/FabricObject';\nimport { FabricText } from '../Text/Text';\nimport { animate } from '../../util/animation/animate';\nimport type { TOnAnimationChangeCallback } from '../../util/animation/types';\nimport type { ValueAnimation } from '../../util/animation/ValueAnimation';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\nimport type { SerializedTextProps, TextProps } from '../Text/Text';\nimport type { TOptions } from '../../typedefs';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { LEFT, MODIFIED, RIGHT, reNewline } from '../../constants';\nimport type { IText } from './IText';\n\n/**\n *  extend this regex to support non english languages\n *\n *  - ` `      Matches a SPACE character (char code 32).\n *  - `\\n`     Matches a LINE FEED character (char code 10).\n *  - `\\.`     Matches a \".\" character (char code 46).\n *  - `,`      Matches a \",\" character (char code 44).\n *  - `;`      Matches a \";\" character (char code 59).\n *  - `!`      Matches a \"!\" character (char code 33).\n *  - `\\?`     Matches a \"?\" character (char code 63).\n *  - `\\-`     Matches a \"-\" character (char code 45).\n */\n// eslint-disable-next-line no-useless-escape\nconst reNonWord = /[ \\n\\.,;!\\?\\-]/;\n\nexport type ITextEvents = ObjectEvents & {\n  'selection:changed': never;\n  changed: never | { index: number; action: string };\n  'editing:entered': never | { e: TPointerEvent };\n  'editing:exited': never;\n};\n\nexport abstract class ITextBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends FabricText<Props, SProps, EventSpec> {\n  declare abstract isEditing: boolean;\n  declare abstract cursorDelay: number;\n  declare abstract selectionStart: number;\n  declare abstract selectionEnd: number;\n  declare abstract cursorDuration: number;\n  declare abstract editable: boolean;\n  declare abstract editingBorderColor: string;\n\n  declare abstract compositionStart: number;\n  declare abstract compositionEnd: number;\n\n  declare abstract hiddenTextarea: HTMLTextAreaElement | null;\n\n  /**\n   * Helps determining when the text is in composition, so that the cursor\n   * rendering is altered.\n   */\n  protected declare inCompositionMode: boolean;\n\n  protected declare _reSpace: RegExp;\n  private declare _currentTickState?: ValueAnimation;\n  private declare _currentTickCompleteState?: ValueAnimation;\n  protected _currentCursorOpacity = 1;\n  private declare _textBeforeEdit: string;\n  protected declare __selectionStartOnMouseDown: number;\n\n  /**\n   * Keeps track if the IText object was selected before the actual click.\n   * This because we want to delay enter editing by a click.\n   */\n  protected declare selected: boolean;\n  protected declare cursorOffsetCache: { left?: number; top?: number };\n  protected declare _savedProps?: {\n    hasControls: boolean;\n    borderColor: string;\n    lockMovementX: boolean;\n    lockMovementY: boolean;\n    selectable: boolean;\n    hoverCursor: CSSStyleDeclaration['cursor'] | null;\n    defaultCursor?: CSSStyleDeclaration['cursor'];\n    moveCursor?: CSSStyleDeclaration['cursor'];\n  };\n  protected declare _selectionDirection: 'left' | 'right' | null;\n\n  abstract initHiddenTextarea(): void;\n  abstract _fireSelectionChanged(): void;\n  abstract renderCursorOrSelection(): void;\n  abstract getSelectionStartFromPointer(e: TPointerEvent): number;\n  abstract _getCursorBoundaries(\n    index: number,\n    skipCaching?: boolean,\n  ): {\n    left: number;\n    top: number;\n    leftOffset: number;\n    topOffset: number;\n  };\n\n  /**\n   * Initializes all the interactive behavior of IText\n   */\n  initBehavior() {\n    this._tick = this._tick.bind(this);\n    this._onTickComplete = this._onTickComplete.bind(this);\n    this.updateSelectionOnMouseMove =\n      this.updateSelectionOnMouseMove.bind(this);\n  }\n\n  onDeselect(options?: { e?: TPointerEvent; object?: FabricObject }) {\n    this.isEditing && this.exitEditing();\n    this.selected = false;\n    return super.onDeselect(options);\n  }\n\n  /**\n   * @private\n   */\n  _animateCursor({\n    toValue,\n    duration,\n    delay,\n    onComplete,\n  }: {\n    toValue: number;\n    duration: number;\n    delay?: number;\n    onComplete?: TOnAnimationChangeCallback<number, void>;\n  }) {\n    return animate({\n      startValue: this._currentCursorOpacity,\n      endValue: toValue,\n      duration,\n      delay,\n      onComplete,\n      abort: () =>\n        !this.canvas ||\n        // we do not want to animate a selection, only cursor\n        this.selectionStart !== this.selectionEnd,\n      onChange: (value) => {\n        this._currentCursorOpacity = value;\n        this.renderCursorOrSelection();\n      },\n    });\n  }\n\n  /**\n   * changes the cursor from visible to invisible\n   */\n  private _tick(delay?: number) {\n    this._currentTickState = this._animateCursor({\n      toValue: 0,\n      duration: this.cursorDuration / 2,\n      delay: Math.max(delay || 0, 100),\n      onComplete: this._onTickComplete,\n    });\n  }\n\n  /**\n   * Changes the cursor from invisible to visible\n   */\n  private _onTickComplete() {\n    this._currentTickCompleteState?.abort();\n    this._currentTickCompleteState = this._animateCursor({\n      toValue: 1,\n      duration: this.cursorDuration,\n      onComplete: this._tick,\n    });\n  }\n\n  /**\n   * Initializes delayed cursor\n   */\n  initDelayedCursor(restart?: boolean) {\n    this.abortCursorAnimation();\n    this._tick(restart ? 0 : this.cursorDelay);\n  }\n\n  /**\n   * Aborts cursor animation, clears all timeouts and clear textarea context if necessary\n   */\n  abortCursorAnimation() {\n    let shouldClear = false;\n    [this._currentTickState, this._currentTickCompleteState].forEach(\n      (cursorAnimation) => {\n        if (cursorAnimation && !cursorAnimation.isDone()) {\n          shouldClear = true;\n          cursorAnimation.abort();\n        }\n      },\n    );\n\n    this._currentCursorOpacity = 1;\n\n    //  make sure we clear context even if instance is not editing\n    if (shouldClear) {\n      this.clearContextTop();\n    }\n  }\n\n  /**\n   * Restart tue cursor animation if either is in complete state ( between animations )\n   * or if it never started before\n   */\n  restartCursorIfNeeded() {\n    if (\n      [this._currentTickState, this._currentTickCompleteState].some(\n        (cursorAnimation) => !cursorAnimation || cursorAnimation.isDone(),\n      )\n    ) {\n      this.initDelayedCursor();\n    }\n  }\n\n  /**\n   * Selects entire text\n   */\n  selectAll() {\n    this.selectionStart = 0;\n    this.selectionEnd = this._text.length;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    return this;\n  }\n\n  /**\n   * Selects entire text and updates the visual state\n   */\n  cmdAll() {\n    this.selectAll();\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Returns selected text\n   * @return {String}\n   */\n  getSelectedText(): string {\n    return this._text.slice(this.selectionStart, this.selectionEnd).join('');\n  }\n\n  /**\n   * Find new selection index representing start of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    // remove space before cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index--;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    // remove space after cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index++;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Find new selection index representing start of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    while (!/\\n/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    while (!/\\n/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Finds index corresponding to beginning or end of a word\n   * @param {Number} selectionStart Index of a character\n   * @param {Number} direction 1 or -1\n   * @return {Number} Index of the beginning or end of a word\n   */\n  searchWordBoundary(selectionStart: number, direction: 1 | -1): number {\n    const text = this._text;\n    // if we land on a space we move the cursor backwards\n    // if we are searching boundary end we move the cursor backwards ONLY if we don't land on a line break\n    let index =\n        selectionStart > 0 &&\n        this._reSpace.test(text[selectionStart]) &&\n        (direction === -1 || !reNewline.test(text[selectionStart - 1]))\n          ? selectionStart - 1\n          : selectionStart,\n      _char = text[index];\n    while (index > 0 && index < text.length && !reNonWord.test(_char)) {\n      index += direction;\n      _char = text[index];\n    }\n    if (direction === -1 && reNonWord.test(_char)) {\n      index++;\n    }\n    return index;\n  }\n\n  /**\n   * Selects the word that contains the char at index selectionStart\n   * @param {Number} selectionStart Index of a character\n   */\n  selectWord(selectionStart?: number) {\n    selectionStart = selectionStart ?? this.selectionStart;\n    // search backwards\n    const newSelectionStart = this.searchWordBoundary(selectionStart, -1),\n      // search forward\n      newSelectionEnd = Math.max(\n        newSelectionStart,\n        this.searchWordBoundary(selectionStart, 1),\n      );\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    // remove next major, for now it renders twice :(\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Selects the line that contains selectionStart\n   * @param {Number} selectionStart Index of a character\n   */\n  selectLine(selectionStart?: number) {\n    selectionStart = selectionStart ?? this.selectionStart;\n    const newSelectionStart = this.findLineBoundaryLeft(selectionStart),\n      newSelectionEnd = this.findLineBoundaryRight(selectionStart);\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n  }\n\n  /**\n   * Enters editing state\n   */\n  enterEditing(e?: TPointerEvent) {\n    if (this.isEditing || !this.editable) {\n      return;\n    }\n    this.enterEditingImpl();\n    this.fire('editing:entered', e ? { e } : undefined);\n    this._fireSelectionChanged();\n    if (this.canvas) {\n      this.canvas.fire('text:editing:entered', {\n        target: this as unknown as IText,\n        e,\n      });\n      this.canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * runs the actual logic that enter from editing state, see {@link enterEditing}\n   */\n  enterEditingImpl() {\n    if (this.canvas) {\n      this.canvas.calcOffset();\n      this.canvas.textEditingManager.exitTextEditing();\n    }\n\n    this.isEditing = true;\n\n    this.initHiddenTextarea();\n    this.hiddenTextarea!.focus();\n    this.hiddenTextarea!.value = this.text;\n    this._updateTextarea();\n    this._saveEditingProps();\n    this._setEditingProps();\n    this._textBeforeEdit = this.text;\n\n    this._tick();\n  }\n\n  /**\n   * called by {@link Canvas#textEditingManager}\n   */\n  updateSelectionOnMouseMove(e: TPointerEvent) {\n    if (this.getActiveControl()) {\n      return;\n    }\n\n    const el = this.hiddenTextarea!;\n    // regain focus\n    getDocumentFromElement(el).activeElement !== el && el.focus();\n\n    const newSelectionStart = this.getSelectionStartFromPointer(e),\n      currentStart = this.selectionStart,\n      currentEnd = this.selectionEnd;\n    if (\n      (newSelectionStart !== this.__selectionStartOnMouseDown ||\n        currentStart === currentEnd) &&\n      (currentStart === newSelectionStart || currentEnd === newSelectionStart)\n    ) {\n      return;\n    }\n    if (newSelectionStart > this.__selectionStartOnMouseDown) {\n      this.selectionStart = this.__selectionStartOnMouseDown;\n      this.selectionEnd = newSelectionStart;\n    } else {\n      this.selectionStart = newSelectionStart;\n      this.selectionEnd = this.__selectionStartOnMouseDown;\n    }\n    if (\n      this.selectionStart !== currentStart ||\n      this.selectionEnd !== currentEnd\n    ) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n      this.renderCursorOrSelection();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setEditingProps() {\n    this.hoverCursor = 'text';\n\n    if (this.canvas) {\n      this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\n    }\n\n    this.borderColor = this.editingBorderColor;\n    this.hasControls = this.selectable = false;\n    this.lockMovementX = this.lockMovementY = true;\n  }\n\n  /**\n   * convert from textarea to grapheme indexes\n   */\n  fromStringToGraphemeSelection(start: number, end: number, text: string) {\n    const smallerTextStart = text.slice(0, start),\n      graphemeStart = this.graphemeSplit(smallerTextStart).length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = text.slice(start, end),\n      graphemeEnd = this.graphemeSplit(smallerTextEnd).length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * convert from fabric to textarea values\n   */\n  fromGraphemeToStringSelection(\n    start: number,\n    end: number,\n    graphemes: string[],\n  ) {\n    const smallerTextStart = graphemes.slice(0, start),\n      graphemeStart = smallerTextStart.join('').length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = graphemes.slice(start, end),\n      graphemeEnd = smallerTextEnd.join('').length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _updateTextarea() {\n    this.cursorOffsetCache = {};\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    if (!this.inCompositionMode) {\n      const newSelection = this.fromGraphemeToStringSelection(\n        this.selectionStart,\n        this.selectionEnd,\n        this._text,\n      );\n      this.hiddenTextarea.selectionStart = newSelection.selectionStart;\n      this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateFromTextArea() {\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    this.cursorOffsetCache = {};\n    const textarea = this.hiddenTextarea;\n    this.text = textarea.value;\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    const newSelection = this.fromStringToGraphemeSelection(\n      textarea.selectionStart,\n      textarea.selectionEnd,\n      textarea.value,\n    );\n    this.selectionEnd = this.selectionStart = newSelection.selectionEnd;\n    if (!this.inCompositionMode) {\n      this.selectionStart = newSelection.selectionStart;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateTextareaPosition() {\n    if (this.selectionStart === this.selectionEnd) {\n      const style = this._calcTextareaPosition();\n      this.hiddenTextarea!.style.left = style.left;\n      this.hiddenTextarea!.style.top = style.top;\n    }\n  }\n\n  /**\n   * @private\n   * @return {Object} style contains style for hiddenTextarea\n   */\n  _calcTextareaPosition() {\n    if (!this.canvas) {\n      return { left: '1px', top: '1px' };\n    }\n    const desiredPosition = this.inCompositionMode\n        ? this.compositionStart\n        : this.selectionStart,\n      boundaries = this._getCursorBoundaries(desiredPosition),\n      cursorLocation = this.get2DCursorLocation(desiredPosition),\n      lineIndex = cursorLocation.lineIndex,\n      charIndex = cursorLocation.charIndex,\n      charHeight =\n        this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize') *\n        this.lineHeight,\n      leftOffset = boundaries.leftOffset,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      upperCanvas = this.canvas.upperCanvasEl,\n      upperCanvasWidth = upperCanvas.width / retinaScaling,\n      upperCanvasHeight = upperCanvas.height / retinaScaling,\n      maxWidth = upperCanvasWidth - charHeight,\n      maxHeight = upperCanvasHeight - charHeight;\n\n    const p = new Point(\n      boundaries.left + leftOffset,\n      boundaries.top + boundaries.topOffset + charHeight,\n    )\n      .transform(this.calcTransformMatrix())\n      .transform(this.canvas.viewportTransform)\n      .multiply(\n        new Point(\n          upperCanvas.clientWidth / upperCanvasWidth,\n          upperCanvas.clientHeight / upperCanvasHeight,\n        ),\n      );\n\n    if (p.x < 0) {\n      p.x = 0;\n    }\n    if (p.x > maxWidth) {\n      p.x = maxWidth;\n    }\n    if (p.y < 0) {\n      p.y = 0;\n    }\n    if (p.y > maxHeight) {\n      p.y = maxHeight;\n    }\n\n    // add canvas offset on document\n    p.x += this.canvas._offset.left;\n    p.y += this.canvas._offset.top;\n\n    return {\n      left: `${p.x}px`,\n      top: `${p.y}px`,\n      fontSize: `${charHeight}px`,\n      charHeight: charHeight,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _saveEditingProps() {\n    this._savedProps = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      lockMovementX: this.lockMovementX,\n      lockMovementY: this.lockMovementY,\n      hoverCursor: this.hoverCursor,\n      selectable: this.selectable,\n      defaultCursor: this.canvas && this.canvas.defaultCursor,\n      moveCursor: this.canvas && this.canvas.moveCursor,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _restoreEditingProps() {\n    if (!this._savedProps) {\n      return;\n    }\n\n    this.hoverCursor = this._savedProps.hoverCursor;\n    this.hasControls = this._savedProps.hasControls;\n    this.borderColor = this._savedProps.borderColor;\n    this.selectable = this._savedProps.selectable;\n    this.lockMovementX = this._savedProps.lockMovementX;\n    this.lockMovementY = this._savedProps.lockMovementY;\n\n    if (this.canvas) {\n      this.canvas.defaultCursor =\n        this._savedProps.defaultCursor || this.canvas.defaultCursor;\n      this.canvas.moveCursor =\n        this._savedProps.moveCursor || this.canvas.moveCursor;\n    }\n\n    delete this._savedProps;\n  }\n\n  /**\n   * runs the actual logic that exits from editing state, see {@link exitEditing}\n   * Please use exitEditingImpl, this function was kept to avoid breaking changes.\n   * Will be removed in fabric 7.0\n   * @deprecated use \"exitEditingImpl\"\n   */\n  protected _exitEditing() {\n    const hiddenTextarea = this.hiddenTextarea;\n    this.selected = false;\n    this.isEditing = false;\n\n    if (hiddenTextarea) {\n      hiddenTextarea.blur && hiddenTextarea.blur();\n      hiddenTextarea.parentNode &&\n        hiddenTextarea.parentNode.removeChild(hiddenTextarea);\n    }\n    this.hiddenTextarea = null;\n    this.abortCursorAnimation();\n    this.selectionStart !== this.selectionEnd && this.clearContextTop();\n  }\n\n  /**\n   * runs the actual logic that exits from editing state, see {@link exitEditing}\n   * But it does not fire events\n   */\n  exitEditingImpl() {\n    this._exitEditing();\n    this.selectionEnd = this.selectionStart;\n    this._restoreEditingProps();\n    if (this._forceClearCache) {\n      this.initDimensions();\n      this.setCoords();\n    }\n  }\n\n  /**\n   * Exits from editing state and fires relevant events\n   */\n  exitEditing() {\n    const isTextChanged = this._textBeforeEdit !== this.text;\n    this.exitEditingImpl();\n\n    this.fire('editing:exited');\n    isTextChanged && this.fire(MODIFIED);\n    if (this.canvas) {\n      this.canvas.fire('text:editing:exited', {\n        target: this as unknown as IText,\n      });\n      // todo: evaluate add an action to this event\n      isTextChanged && this.canvas.fire('object:modified', { target: this });\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _removeExtraneousStyles() {\n    for (const prop in this.styles) {\n      if (!this._textLines[prop as unknown as number]) {\n        delete this.styles[prop];\n      }\n    }\n  }\n\n  /**\n   * remove and reflow a style block from start to end.\n   * @param {Number} start linear start position for removal (included in removal)\n   * @param {Number} end linear end position for removal ( excluded from removal )\n   */\n  removeStyleFromTo(start: number, end: number) {\n    const { lineIndex: lineStart, charIndex: charStart } =\n        this.get2DCursorLocation(start, true),\n      { lineIndex: lineEnd, charIndex: charEnd } = this.get2DCursorLocation(\n        end,\n        true,\n      );\n    if (lineStart !== lineEnd) {\n      // step1 remove the trailing of lineStart\n      if (this.styles[lineStart]) {\n        for (\n          let i = charStart;\n          i < this._unwrappedTextLines[lineStart].length;\n          i++\n        ) {\n          delete this.styles[lineStart][i];\n        }\n      }\n      // step2 move the trailing of lineEnd to lineStart if needed\n      if (this.styles[lineEnd]) {\n        for (\n          let i = charEnd;\n          i < this._unwrappedTextLines[lineEnd].length;\n          i++\n        ) {\n          const styleObj = this.styles[lineEnd][i];\n          if (styleObj) {\n            this.styles[lineStart] || (this.styles[lineStart] = {});\n            this.styles[lineStart][charStart + i - charEnd] = styleObj;\n          }\n        }\n      }\n      // step3 detects lines will be completely removed.\n      for (let i = lineStart + 1; i <= lineEnd; i++) {\n        delete this.styles[i];\n      }\n      // step4 shift remaining lines.\n      this.shiftLineStyles(lineEnd, lineStart - lineEnd);\n    } else {\n      // remove and shift left on the same line\n      if (this.styles[lineStart]) {\n        const styleObj = this.styles[lineStart];\n        const diff = charEnd - charStart;\n        for (let i = charStart; i < charEnd; i++) {\n          delete styleObj[i];\n        }\n        for (const char in this.styles[lineStart]) {\n          const numericChar = parseInt(char, 10);\n          if (numericChar >= charEnd) {\n            styleObj[numericChar - diff] = styleObj[char];\n            delete styleObj[char];\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Shifts line styles up or down\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} offset Can any number?\n   */\n  shiftLineStyles(lineIndex: number, offset: number) {\n    const clonedStyles = Object.assign({}, this.styles);\n    for (const line in this.styles) {\n      const numericLine = parseInt(line, 10);\n      if (numericLine > lineIndex) {\n        this.styles[numericLine + offset] = clonedStyles[numericLine];\n        if (!clonedStyles[numericLine - offset]) {\n          delete this.styles[numericLine];\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle insertion of more consecutive style lines for when one or more\n   * newlines gets added to the text. Since current style needs to be shifted\n   * first we shift the current style of the number lines needed, then we add\n   * new lines from the last to the first.\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} qty number of lines to add\n   * @param {Array} copiedStyle Array of objects styles\n   */\n  insertNewlineStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    qty: number,\n    copiedStyle?: { [index: number]: TextStyleDeclaration },\n  ) {\n    const newLineStyles: { [index: number]: TextStyleDeclaration } = {};\n    const originalLineLength = this._unwrappedTextLines[lineIndex].length;\n    const isEndOfLine = originalLineLength === charIndex;\n\n    let someStyleIsCarryingOver = false;\n    qty || (qty = 1);\n    this.shiftLineStyles(lineIndex, qty);\n    const currentCharStyle = this.styles[lineIndex]\n      ? this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1]\n      : undefined;\n\n    // we clone styles of all chars\n    // after cursor onto the current line\n    for (const index in this.styles[lineIndex]) {\n      const numIndex = parseInt(index, 10);\n      if (numIndex >= charIndex) {\n        someStyleIsCarryingOver = true;\n        newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];\n        // remove lines from the previous line since they're on a new line now\n        if (!(isEndOfLine && charIndex === 0)) {\n          delete this.styles[lineIndex][index];\n        }\n      }\n    }\n    let styleCarriedOver = false;\n    if (someStyleIsCarryingOver && !isEndOfLine) {\n      // if is end of line, the extra style we copied\n      // is probably not something we want\n      this.styles[lineIndex + qty] = newLineStyles;\n      styleCarriedOver = true;\n    }\n    if (styleCarriedOver || originalLineLength > charIndex) {\n      // skip the last line of since we already prepared it.\n      // or contains text without style that we don't want to style\n      // just because it changed lines\n      qty--;\n    }\n    // for the all the lines or all the other lines\n    // we clone current char style onto the next (otherwise empty) line\n    while (qty > 0) {\n      if (copiedStyle && copiedStyle[qty - 1]) {\n        this.styles[lineIndex + qty] = {\n          0: { ...copiedStyle[qty - 1] },\n        };\n      } else if (currentCharStyle) {\n        this.styles[lineIndex + qty] = {\n          0: { ...currentCharStyle },\n        };\n      } else {\n        delete this.styles[lineIndex + qty];\n      }\n      qty--;\n    }\n    this._forceClearCache = true;\n  }\n\n  /**\n   * Inserts style object for a given line/char index\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} quantity number Style object to insert, if given\n   * @param {Array} copiedStyle array of style objects\n   */\n  insertCharStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    quantity: number,\n    copiedStyle?: TextStyleDeclaration[],\n  ) {\n    if (!this.styles) {\n      this.styles = {};\n    }\n    const currentLineStyles = this.styles[lineIndex],\n      currentLineStylesCloned = currentLineStyles\n        ? { ...currentLineStyles }\n        : {};\n\n    quantity || (quantity = 1);\n    // shift all char styles by quantity forward\n    // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\n    for (const index in currentLineStylesCloned) {\n      const numericIndex = parseInt(index, 10);\n      if (numericIndex >= charIndex) {\n        currentLineStyles[numericIndex + quantity] =\n          currentLineStylesCloned[numericIndex];\n        // only delete the style if there was nothing moved there\n        if (!currentLineStylesCloned[numericIndex - quantity]) {\n          delete currentLineStyles[numericIndex];\n        }\n      }\n    }\n    this._forceClearCache = true;\n    if (copiedStyle) {\n      while (quantity--) {\n        if (!Object.keys(copiedStyle[quantity]).length) {\n          continue;\n        }\n        if (!this.styles[lineIndex]) {\n          this.styles[lineIndex] = {};\n        }\n        this.styles[lineIndex][charIndex + quantity] = {\n          ...copiedStyle[quantity],\n        };\n      }\n      return;\n    }\n    if (!currentLineStyles) {\n      return;\n    }\n    const newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];\n    while (newStyle && quantity--) {\n      this.styles[lineIndex][charIndex + quantity] = { ...newStyle };\n    }\n  }\n\n  /**\n   * Inserts style object(s)\n   * @param {Array} insertedText Characters at the location where style is inserted\n   * @param {Number} start cursor index for inserting style\n   * @param {Array} [copiedStyle] array of style objects to insert.\n   */\n  insertNewStyleBlock(\n    insertedText: string[],\n    start: number,\n    copiedStyle?: TextStyleDeclaration[],\n  ) {\n    const cursorLoc = this.get2DCursorLocation(start, true),\n      addedLines = [0];\n    let linesLength = 0;\n    // get an array of how many char per lines are being added.\n    for (let i = 0; i < insertedText.length; i++) {\n      if (insertedText[i] === '\\n') {\n        linesLength++;\n        addedLines[linesLength] = 0;\n      } else {\n        addedLines[linesLength]++;\n      }\n    }\n    // for the first line copy the style from the current char position.\n    if (addedLines[0] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex,\n        addedLines[0],\n        copiedStyle,\n      );\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);\n    }\n    linesLength &&\n      this.insertNewlineStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex + addedLines[0],\n        linesLength,\n      );\n    let i;\n    for (i = 1; i < linesLength; i++) {\n      if (addedLines[i] > 0) {\n        this.insertCharStyleObject(\n          cursorLoc.lineIndex + i,\n          0,\n          addedLines[i],\n          copiedStyle,\n        );\n      } else if (copiedStyle) {\n        // this test is required in order to close #6841\n        // when a pasted buffer begins with a newline then\n        // this.styles[cursorLoc.lineIndex + i] and copiedStyle[0]\n        // may be undefined for some reason\n        if (this.styles[cursorLoc.lineIndex + i] && copiedStyle[0]) {\n          this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];\n        }\n      }\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);\n    }\n    if (addedLines[i] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex + i,\n        0,\n        addedLines[i],\n        copiedStyle,\n      );\n    }\n  }\n\n  /**\n   * Removes characters from start/end\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  removeChars(start: number, end: number = start + 1) {\n    this.removeStyleFromTo(start, end);\n    this._text.splice(start, end - start);\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * insert characters at start position, before start position.\n   * start  equal 1 it means the text get inserted between actual grapheme 0 and 1\n   * if style array is provided, it must be as the same length of text in graphemes\n   * if end is provided and is bigger than start, old text is replaced.\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {String} text text to insert\n   * @param {Array} style array of style objects\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  insertChars(\n    text: string,\n    style: TextStyleDeclaration[] | undefined,\n    start: number,\n    end: number = start,\n  ) {\n    if (end > start) {\n      this.removeStyleFromTo(start, end);\n    }\n    const graphemes = this.graphemeSplit(text);\n    this.insertNewStyleBlock(graphemes, start, style);\n    this._text = [\n      ...this._text.slice(0, start),\n      ...graphemes,\n      ...this._text.slice(end),\n    ];\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * Set the selectionStart and selectionEnd according to the new position of cursor\n   * mimic the key - mouse navigation when shift is pressed.\n   */\n  setSelectionStartEndWithShift(\n    start: number,\n    end: number,\n    newSelection: number,\n  ) {\n    if (newSelection <= start) {\n      if (end === start) {\n        this._selectionDirection = LEFT;\n      } else if (this._selectionDirection === RIGHT) {\n        this._selectionDirection = LEFT;\n        this.selectionEnd = start;\n      }\n      this.selectionStart = newSelection;\n    } else if (newSelection > start && newSelection < end) {\n      if (this._selectionDirection === RIGHT) {\n        this.selectionEnd = newSelection;\n      } else {\n        this.selectionStart = newSelection;\n      }\n    } else {\n      // newSelection is > selection start and end\n      if (end === start) {\n        this._selectionDirection = RIGHT;\n      } else if (this._selectionDirection === LEFT) {\n        this._selectionDirection = RIGHT;\n        this.selectionStart = end;\n      }\n      this.selectionEnd = newSelection;\n    }\n  }\n}\n", "import { config } from '../../config';\nimport { getFabricDocument, getEnv } from '../../env';\nimport { capValue } from '../../util/misc/capValue';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextBehavior } from './ITextBehavior';\nimport type { TKeyMapIText } from './constants';\nimport type { TOptions } from '../../typedefs';\nimport type { TextProps, SerializedTextProps } from '../Text/Text';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { CHANGED, LEFT, RIGHT } from '../../constants';\nimport type { IText } from './IText';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\n\nexport abstract class ITextKeyBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends ITextBehavior<Props, SProps, EventSpec> {\n  /**\n   * For functionalities on keyDown\n   * Map a special key to a function of the instance/prototype\n   * If you need different behavior for ESC or TAB or arrows, you have to change\n   * this map setting the name of a function that you build on the IText or\n   * your prototype.\n   * the map change will affect all Instances unless you need for only some text Instances\n   * in that case you have to clone this object and assign your Instance.\n   * this.keysMap = Object.assign({}, this.keysMap);\n   * The function must be in IText.prototype.myFunction And will receive event as args[0]\n   */\n  declare keysMap: TKeyMapIText;\n\n  declare keysMapRtl: TKeyMapIText;\n\n  /**\n   * For functionalities on keyUp + ctrl || cmd\n   */\n  declare ctrlKeysMapUp: TKeyMapIText;\n\n  /**\n   * For functionalities on keyDown + ctrl || cmd\n   */\n  declare ctrlKeysMapDown: TKeyMapIText;\n\n  declare hiddenTextarea: HTMLTextAreaElement | null;\n\n  /**\n   * DOM container to append the hiddenTextarea.\n   * An alternative to attaching to the document.body.\n   * Useful to reduce laggish redraw of the full document.body tree and\n   * also with modals event capturing that won't let the textarea take focus.\n   * @type HTMLElement\n   * @default\n   */\n  declare hiddenTextareaContainer?: HTMLElement | null;\n\n  private declare _clickHandlerInitialized: boolean;\n  private declare _copyDone: boolean;\n  private declare fromPaste: boolean;\n\n  /**\n   * Initializes hidden textarea (needed to bring up keyboard in iOS)\n   */\n  initHiddenTextarea() {\n    const doc =\n      (this.canvas && getDocumentFromElement(this.canvas.getElement())) ||\n      getFabricDocument();\n    const textarea = doc.createElement('textarea');\n    Object.entries({\n      autocapitalize: 'off',\n      autocorrect: 'off',\n      autocomplete: 'off',\n      spellcheck: 'false',\n      'data-fabric': 'textarea',\n      wrap: 'off',\n    }).map(([attribute, value]) => textarea.setAttribute(attribute, value));\n    const { top, left, fontSize } = this._calcTextareaPosition();\n    // line-height: 1px; was removed from the style to fix this:\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=870966\n    textarea.style.cssText = `position: absolute; top: ${top}; left: ${left}; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; padding-top: ${fontSize};`;\n\n    (this.hiddenTextareaContainer || doc.body).appendChild(textarea);\n\n    Object.entries({\n      blur: 'blur',\n      keydown: 'onKeyDown',\n      keyup: 'onKeyUp',\n      input: 'onInput',\n      copy: 'copy',\n      cut: 'copy',\n      paste: 'paste',\n      compositionstart: 'onCompositionStart',\n      compositionupdate: 'onCompositionUpdate',\n      compositionend: 'onCompositionEnd',\n    } as Record<string, keyof this>).map(([eventName, handler]) =>\n      textarea.addEventListener(\n        eventName,\n        (this[handler] as EventListener).bind(this),\n      ),\n    );\n    this.hiddenTextarea = textarea;\n  }\n\n  /**\n   * Override this method to customize cursor behavior on textbox blur\n   */\n  blur() {\n    this.abortCursorAnimation();\n  }\n\n  /**\n   * Handles keydown event\n   * only used for arrows and combination of modifier keys.\n   * @param {KeyboardEvent} e Event object\n   */\n  onKeyDown(e: KeyboardEvent) {\n    if (!this.isEditing) {\n      return;\n    }\n    const keyMap = this.direction === 'rtl' ? this.keysMapRtl : this.keysMap;\n    if (e.keyCode in keyMap) {\n      (this[keyMap[e.keyCode] as keyof this] as (arg: KeyboardEvent) => void)(\n        e,\n      );\n    } else if (e.keyCode in this.ctrlKeysMapDown && (e.ctrlKey || e.metaKey)) {\n      (\n        this[this.ctrlKeysMapDown[e.keyCode] as keyof this] as (\n          arg: KeyboardEvent,\n        ) => void\n      )(e);\n    } else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    if (e.keyCode >= 33 && e.keyCode <= 40) {\n      // if i press an arrow key just update selection\n      this.inCompositionMode = false;\n      this.clearContextTop();\n      this.renderCursorOrSelection();\n    } else {\n      this.canvas && this.canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * Handles keyup event\n   * We handle KeyUp because ie11 and edge have difficulties copy/pasting\n   * if a copy/cut event fired, keyup is dismissed\n   * @param {KeyboardEvent} e Event object\n   */\n  onKeyUp(e: KeyboardEvent) {\n    if (!this.isEditing || this._copyDone || this.inCompositionMode) {\n      this._copyDone = false;\n      return;\n    }\n    if (e.keyCode in this.ctrlKeysMapUp && (e.ctrlKey || e.metaKey)) {\n      (\n        this[this.ctrlKeysMapUp[e.keyCode] as keyof this] as (\n          arg: KeyboardEvent,\n        ) => void\n      )(e);\n    } else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    this.canvas && this.canvas.requestRenderAll();\n  }\n\n  /**\n   * Handles onInput event\n   * @param {Event} e Event object\n   */\n  onInput(this: this & { hiddenTextarea: HTMLTextAreaElement }, e: Event) {\n    const fromPaste = this.fromPaste;\n    const { value, selectionStart, selectionEnd } = this.hiddenTextarea;\n    this.fromPaste = false;\n    e && e.stopPropagation();\n    if (!this.isEditing) {\n      return;\n    }\n    const updateAndFire = () => {\n      this.updateFromTextArea();\n      this.fire(CHANGED);\n      if (this.canvas) {\n        this.canvas.fire('text:changed', { target: this as unknown as IText });\n        this.canvas.requestRenderAll();\n      }\n    };\n    if (this.hiddenTextarea.value === '') {\n      this.styles = {};\n      updateAndFire();\n      return;\n    }\n    // decisions about style changes.\n    const nextText = this._splitTextIntoLines(value).graphemeText,\n      charCount = this._text.length,\n      nextCharCount = nextText.length,\n      _selectionStart = this.selectionStart,\n      _selectionEnd = this.selectionEnd,\n      selection = _selectionStart !== _selectionEnd;\n    let copiedStyle: TextStyleDeclaration[] | undefined,\n      removedText,\n      charDiff = nextCharCount - charCount,\n      removeFrom,\n      removeTo;\n\n    const textareaSelection = this.fromStringToGraphemeSelection(\n      selectionStart,\n      selectionEnd,\n      value,\n    );\n    const backDelete = _selectionStart > textareaSelection.selectionStart;\n\n    if (selection) {\n      removedText = this._text.slice(_selectionStart, _selectionEnd);\n      charDiff += _selectionEnd - _selectionStart;\n    } else if (nextCharCount < charCount) {\n      if (backDelete) {\n        removedText = this._text.slice(_selectionEnd + charDiff, _selectionEnd);\n      } else {\n        removedText = this._text.slice(\n          _selectionStart,\n          _selectionStart - charDiff,\n        );\n      }\n    }\n    const insertedText = nextText.slice(\n      textareaSelection.selectionEnd - charDiff,\n      textareaSelection.selectionEnd,\n    );\n    if (removedText && removedText.length) {\n      if (insertedText.length) {\n        // let's copy some style before deleting.\n        // we want to copy the style before the cursor OR the style at the cursor if selection\n        // is bigger than 0.\n        copiedStyle = this.getSelectionStyles(\n          _selectionStart,\n          _selectionStart + 1,\n          false,\n        );\n        // now duplicate the style one for each inserted text.\n        copiedStyle = insertedText.map(\n          () =>\n            // this return an array of references, but that is fine since we are\n            // copying the style later.\n            copiedStyle![0],\n        );\n      }\n      if (selection) {\n        removeFrom = _selectionStart;\n        removeTo = _selectionEnd;\n      } else if (backDelete) {\n        // detect differences between forwardDelete and backDelete\n        removeFrom = _selectionEnd - removedText.length;\n        removeTo = _selectionEnd;\n      } else {\n        removeFrom = _selectionEnd;\n        removeTo = _selectionEnd + removedText.length;\n      }\n      this.removeStyleFromTo(removeFrom, removeTo);\n    }\n    if (insertedText.length) {\n      const { copyPasteData } = getEnv();\n      if (\n        fromPaste &&\n        insertedText.join('') === copyPasteData.copiedText &&\n        !config.disableStyleCopyPaste\n      ) {\n        copiedStyle = copyPasteData.copiedTextStyle;\n      }\n      this.insertNewStyleBlock(insertedText, _selectionStart, copiedStyle);\n    }\n    updateAndFire();\n  }\n\n  /**\n   * Composition start\n   */\n  onCompositionStart() {\n    this.inCompositionMode = true;\n  }\n\n  /**\n   * Composition end\n   */\n  onCompositionEnd() {\n    this.inCompositionMode = false;\n  }\n\n  onCompositionUpdate({ target }: CompositionEvent) {\n    const { selectionStart, selectionEnd } = target as HTMLTextAreaElement;\n    this.compositionStart = selectionStart;\n    this.compositionEnd = selectionEnd;\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * Copies selected text\n   */\n  copy() {\n    if (this.selectionStart === this.selectionEnd) {\n      //do not cut-copy if no selection\n      return;\n    }\n    const { copyPasteData } = getEnv();\n    copyPasteData.copiedText = this.getSelectedText();\n    if (!config.disableStyleCopyPaste) {\n      copyPasteData.copiedTextStyle = this.getSelectionStyles(\n        this.selectionStart,\n        this.selectionEnd,\n        true,\n      );\n    } else {\n      copyPasteData.copiedTextStyle = undefined;\n    }\n    this._copyDone = true;\n  }\n\n  /**\n   * Pastes text\n   */\n  paste() {\n    this.fromPaste = true;\n  }\n\n  /**\n   * Finds the width in pixels before the cursor on the same line\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {Number} widthBeforeCursor width before cursor\n   */\n  _getWidthBeforeCursor(lineIndex: number, charIndex: number): number {\n    let widthBeforeCursor = this._getLineLeftOffset(lineIndex),\n      bound;\n\n    if (charIndex > 0) {\n      bound = this.__charBounds[lineIndex][charIndex - 1];\n      widthBeforeCursor += bound.left + bound.width;\n    }\n    return widthBeforeCursor;\n  }\n\n  /**\n   * Gets start offset of a selection\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getDownCursorOffset(e: KeyboardEvent, isRight: boolean): number {\n    const selectionProp = this._getSelectionForOffset(e, isRight),\n      cursorLocation = this.get2DCursorLocation(selectionProp),\n      lineIndex = cursorLocation.lineIndex;\n    // if on last line, down cursor goes to end of line\n    if (\n      lineIndex === this._textLines.length - 1 ||\n      e.metaKey ||\n      e.keyCode === 34\n    ) {\n      // move to the end of a text\n      return this._text.length - selectionProp;\n    }\n    const charIndex = cursorLocation.charIndex,\n      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n      indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor),\n      textAfterCursor = this._textLines[lineIndex].slice(charIndex);\n    return (\n      textAfterCursor.length +\n      indexOnOtherLine +\n      1 +\n      this.missingNewlineOffset(lineIndex)\n    );\n  }\n\n  /**\n   * private\n   * Helps finding if the offset should be counted from Start or End\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  _getSelectionForOffset(e: KeyboardEvent, isRight: boolean): number {\n    if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {\n      return this.selectionEnd;\n    } else {\n      return this.selectionStart;\n    }\n  }\n\n  /**\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getUpCursorOffset(e: KeyboardEvent, isRight: boolean): number {\n    const selectionProp = this._getSelectionForOffset(e, isRight),\n      cursorLocation = this.get2DCursorLocation(selectionProp),\n      lineIndex = cursorLocation.lineIndex;\n    if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\n      // if on first line, up cursor goes to start of line\n      return -selectionProp;\n    }\n    const charIndex = cursorLocation.charIndex,\n      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n      indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor),\n      textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex),\n      missingNewlineOffset = this.missingNewlineOffset(lineIndex - 1);\n    // return a negative offset\n    return (\n      -this._textLines[lineIndex - 1].length +\n      indexOnOtherLine -\n      textBeforeCursor.length +\n      (1 - missingNewlineOffset)\n    );\n  }\n\n  /**\n   * for a given width it founds the matching character.\n   * @private\n   */\n  _getIndexOnLine(lineIndex: number, width: number) {\n    const line = this._textLines[lineIndex],\n      lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    let widthOfCharsOnLine = lineLeftOffset,\n      indexOnLine = 0,\n      charWidth,\n      foundMatch;\n\n    for (let j = 0, jlen = line.length; j < jlen; j++) {\n      charWidth = this.__charBounds[lineIndex][j].width;\n      widthOfCharsOnLine += charWidth;\n      if (widthOfCharsOnLine > width) {\n        foundMatch = true;\n        const leftEdge = widthOfCharsOnLine - charWidth,\n          rightEdge = widthOfCharsOnLine,\n          offsetFromLeftEdge = Math.abs(leftEdge - width),\n          offsetFromRightEdge = Math.abs(rightEdge - width);\n\n        indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : j - 1;\n        break;\n      }\n    }\n\n    // reached end\n    if (!foundMatch) {\n      indexOnLine = line.length - 1;\n    }\n\n    return indexOnLine;\n  }\n\n  /**\n   * Moves cursor down\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorDown(e: KeyboardEvent) {\n    if (\n      this.selectionStart >= this._text.length &&\n      this.selectionEnd >= this._text.length\n    ) {\n      return;\n    }\n    this._moveCursorUpOrDown('Down', e);\n  }\n\n  /**\n   * Moves cursor up\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorUp(e: KeyboardEvent) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorUpOrDown('Up', e);\n  }\n\n  /**\n   * Moves cursor up or down, fires the events\n   * @param {String} direction 'Up' or 'Down'\n   * @param {KeyboardEvent} e Event object\n   */\n  _moveCursorUpOrDown(direction: 'Up' | 'Down', e: KeyboardEvent) {\n    const offset = this[`get${direction}CursorOffset`](\n      e,\n      this._selectionDirection === RIGHT,\n    );\n    if (e.shiftKey) {\n      this.moveCursorWithShift(offset);\n    } else {\n      this.moveCursorWithoutShift(offset);\n    }\n    if (offset !== 0) {\n      const max = this.text.length;\n      this.selectionStart = capValue(0, this.selectionStart, max);\n      this.selectionEnd = capValue(0, this.selectionEnd, max);\n      // TODO fix: abort and init should be an alternative depending\n      // on selectionStart/End being equal or different\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Moves cursor with shift\n   * @param {Number} offset\n   */\n  moveCursorWithShift(offset: number) {\n    const newSelection =\n      this._selectionDirection === LEFT\n        ? this.selectionStart + offset\n        : this.selectionEnd + offset;\n    this.setSelectionStartEndWithShift(\n      this.selectionStart,\n      this.selectionEnd,\n      newSelection,\n    );\n    return offset !== 0;\n  }\n\n  /**\n   * Moves cursor up without shift\n   * @param {Number} offset\n   */\n  moveCursorWithoutShift(offset: number) {\n    if (offset < 0) {\n      this.selectionStart += offset;\n      this.selectionEnd = this.selectionStart;\n    } else {\n      this.selectionEnd += offset;\n      this.selectionStart = this.selectionEnd;\n    }\n    return offset !== 0;\n  }\n\n  /**\n   * Moves cursor left\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorLeft(e: KeyboardEvent) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Left', e);\n  }\n\n  /**\n   * @private\n   * @return {Boolean} true if a change happened\n   *\n   * @todo refactor not to use method name composition\n   */\n  _move(\n    e: KeyboardEvent,\n    prop: 'selectionStart' | 'selectionEnd',\n    direction: 'Left' | 'Right',\n  ): boolean {\n    let newValue: number | undefined;\n    if (e.altKey) {\n      newValue = this[`findWordBoundary${direction}`](this[prop]);\n    } else if (e.metaKey || e.keyCode === 35 || e.keyCode === 36) {\n      newValue = this[`findLineBoundary${direction}`](this[prop]);\n    } else {\n      this[prop] += direction === 'Left' ? -1 : 1;\n      return true;\n    }\n    if (typeof newValue !== 'undefined' && this[prop] !== newValue) {\n      this[prop] = newValue;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @private\n   */\n  _moveLeft(e: KeyboardEvent, prop: 'selectionStart' | 'selectionEnd') {\n    return this._move(e, prop, 'Left');\n  }\n\n  /**\n   * @private\n   */\n  _moveRight(e: KeyboardEvent, prop: 'selectionStart' | 'selectionEnd') {\n    return this._move(e, prop, 'Right');\n  }\n\n  /**\n   * Moves cursor left without keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorLeftWithoutShift(e: KeyboardEvent) {\n    let change = true;\n    this._selectionDirection = LEFT;\n\n    // only move cursor when there is no selection,\n    // otherwise we discard it, and leave cursor on same place\n    if (\n      this.selectionEnd === this.selectionStart &&\n      this.selectionStart !== 0\n    ) {\n      change = this._moveLeft(e, 'selectionStart');\n    }\n    this.selectionEnd = this.selectionStart;\n    return change;\n  }\n\n  /**\n   * Moves cursor left while keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorLeftWithShift(e: KeyboardEvent) {\n    if (\n      this._selectionDirection === RIGHT &&\n      this.selectionStart !== this.selectionEnd\n    ) {\n      return this._moveLeft(e, 'selectionEnd');\n    } else if (this.selectionStart !== 0) {\n      this._selectionDirection = LEFT;\n      return this._moveLeft(e, 'selectionStart');\n    }\n  }\n\n  /**\n   * Moves cursor right\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorRight(e: KeyboardEvent) {\n    if (\n      this.selectionStart >= this._text.length &&\n      this.selectionEnd >= this._text.length\n    ) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Right', e);\n  }\n\n  /**\n   * Moves cursor right or Left, fires event\n   * @param {String} direction 'Left', 'Right'\n   * @param {KeyboardEvent} e Event object\n   */\n  _moveCursorLeftOrRight(direction: 'Left' | 'Right', e: KeyboardEvent) {\n    const actionName = `moveCursor${direction}${\n      e.shiftKey ? 'WithShift' : 'WithoutShift'\n    }` as const;\n    this._currentCursorOpacity = 1;\n    if (this[actionName](e)) {\n      // TODO fix: abort and init should be an alternative depending\n      // on selectionStart/End being equal or different\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Moves cursor right while keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorRightWithShift(e: KeyboardEvent) {\n    if (\n      this._selectionDirection === LEFT &&\n      this.selectionStart !== this.selectionEnd\n    ) {\n      return this._moveRight(e, 'selectionStart');\n    } else if (this.selectionEnd !== this._text.length) {\n      this._selectionDirection = RIGHT;\n      return this._moveRight(e, 'selectionEnd');\n    }\n  }\n\n  /**\n   * Moves cursor right without keeping selection\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorRightWithoutShift(e: KeyboardEvent) {\n    let changed = true;\n    this._selectionDirection = RIGHT;\n\n    if (this.selectionStart === this.selectionEnd) {\n      changed = this._moveRight(e, 'selectionStart');\n      this.selectionEnd = this.selectionStart;\n    } else {\n      this.selectionStart = this.selectionEnd;\n    }\n    return changed;\n  }\n}\n", "import type {\n  ObjectPointerEvents,\n  TPointerEvent,\n  TPointerEventInfo,\n} from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport { invertTransform } from '../../util/misc/matrix';\nimport { DraggableTextDelegate } from './DraggableTextDelegate';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextKeyBehavior } from './ITextKeyBehavior';\nimport type { TOptions } from '../../typedefs';\nimport type { TextProps, SerializedTextProps } from '../Text/Text';\nimport type { IText } from './IText';\n/**\n * `LEFT_CLICK === 0`\n */\nconst notALeftClick = (e: Event) => !!(e as MouseEvent).button;\n\nexport abstract class ITextClickBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends ITextKeyBehavior<Props, SProps, EventSpec> {\n  protected draggableTextDelegate: DraggableTextDelegate;\n\n  initBehavior() {\n    // Initializes event handlers related to cursor or selection\n    this.on('mousedown', this._mouseDownHandler);\n    this.on('mouseup', this.mouseUpHandler);\n    this.on('mousedblclick', this.doubleClickHandler);\n    this.on('mousetripleclick', this.tripleClickHandler);\n\n    this.draggableTextDelegate = new DraggableTextDelegate(\n      this as unknown as IText,\n    );\n\n    super.initBehavior();\n  }\n\n  /**\n   * If this method returns true a mouse move operation over a text selection\n   * will not prevent the native mouse event allowing the browser to start a drag operation.\n   * shouldStartDragging can be read 'do not prevent default for mouse move event'\n   * To prevent drag and drop between objects both shouldStartDragging and onDragStart should return false\n   * @returns\n   */\n  shouldStartDragging() {\n    return this.draggableTextDelegate.isActive();\n  }\n\n  /**\n   * @public override this method to control whether instance should/shouldn't become a drag source,\n   * @see also {@link DraggableTextDelegate#isActive}\n   * To prevent drag and drop between objects both shouldStartDragging and onDragStart should return false\n   * @returns {boolean} should handle event\n   */\n  onDragStart(e: DragEvent) {\n    return this.draggableTextDelegate.onDragStart(e);\n  }\n\n  /**\n   * @public override this method to control whether instance should/shouldn't become a drop target\n   */\n  canDrop(e: DragEvent) {\n    return this.draggableTextDelegate.canDrop(e);\n  }\n\n  /**\n   * Default handler for double click, select a word\n   */\n  doubleClickHandler(options: TPointerEventInfo) {\n    if (!this.isEditing) {\n      return;\n    }\n    this.selectWord(this.getSelectionStartFromPointer(options.e));\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Default handler for triple click, select a line\n   */\n  tripleClickHandler(options: TPointerEventInfo) {\n    if (!this.isEditing) {\n      return;\n    }\n    this.selectLine(this.getSelectionStartFromPointer(options.e));\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Default event handler for the basic functionalities needed on _mouseDown\n   * can be overridden to do something different.\n   * Scope of this implementation is: find the click position, set selectionStart\n   * find selectionEnd, initialize the drawing of either cursor or selection area\n   * initializing a mousedDown on a text area will cancel fabricjs knowledge of\n   * current compositionMode. It will be set to false.\n   */\n  _mouseDownHandler({ e, alreadySelected }: ObjectPointerEvents['mousedown']) {\n    if (\n      !this.canvas ||\n      !this.editable ||\n      notALeftClick(e) ||\n      this.getActiveControl()\n    ) {\n      return;\n    }\n\n    if (this.draggableTextDelegate.start(e)) {\n      return;\n    }\n\n    this.canvas.textEditingManager.register(this);\n\n    if (alreadySelected) {\n      this.inCompositionMode = false;\n      this.setCursorByClick(e);\n    }\n\n    if (this.isEditing) {\n      this.__selectionStartOnMouseDown = this.selectionStart;\n      if (this.selectionStart === this.selectionEnd) {\n        this.abortCursorAnimation();\n      }\n      this.renderCursorOrSelection();\n    }\n    this.selected ||= alreadySelected || this.isEditing;\n  }\n\n  /**\n   * standard handler for mouse up, overridable\n   * @private\n   */\n  mouseUpHandler({ e, transform }: ObjectPointerEvents['mouseup']) {\n    const didDrag = this.draggableTextDelegate.end(e);\n\n    if (this.canvas) {\n      this.canvas.textEditingManager.unregister(this);\n\n      const activeObject = this.canvas._activeObject;\n      if (activeObject && activeObject !== this) {\n        // avoid running this logic when there is an active object\n        // this because is possible with shift click and fast clicks,\n        // to rapidly deselect and reselect this object and trigger an enterEdit\n        return;\n      }\n    }\n\n    if (\n      !this.editable ||\n      (this.group && !this.group.interactive) ||\n      (transform && transform.actionPerformed) ||\n      notALeftClick(e) ||\n      didDrag\n    ) {\n      return;\n    }\n\n    if (this.selected && !this.getActiveControl()) {\n      this.enterEditing(e);\n      if (this.selectionStart === this.selectionEnd) {\n        this.initDelayedCursor(true);\n      } else {\n        this.renderCursorOrSelection();\n      }\n    }\n  }\n\n  /**\n   * Changes cursor location in a text depending on passed pointer (x/y) object\n   * @param {TPointerEvent} e Event object\n   */\n  setCursorByClick(e: TPointerEvent) {\n    const newSelection = this.getSelectionStartFromPointer(e),\n      start = this.selectionStart,\n      end = this.selectionEnd;\n    if (e.shiftKey) {\n      this.setSelectionStartEndWithShift(start, end, newSelection);\n    } else {\n      this.selectionStart = newSelection;\n      this.selectionEnd = newSelection;\n    }\n    if (this.isEditing) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Returns index of a character corresponding to where an object was clicked\n   * @param {TPointerEvent} e Event object\n   * @return {Number} Index of a character\n   */\n  getSelectionStartFromPointer(e: TPointerEvent): number {\n    const mouseOffset = this.canvas!.getScenePoint(e)\n      .transform(invertTransform(this.calcTransformMatrix()))\n      .add(new Point(-this._getLeftOffset(), -this._getTopOffset()));\n    let height = 0,\n      charIndex = 0,\n      lineIndex = 0;\n\n    for (let i = 0; i < this._textLines.length; i++) {\n      if (height <= mouseOffset.y) {\n        height += this.getHeightOfLine(i);\n        lineIndex = i;\n        if (i > 0) {\n          charIndex +=\n            this._textLines[i - 1].length + this.missingNewlineOffset(i - 1);\n        }\n      } else {\n        break;\n      }\n    }\n    const lineLeftOffset = Math.abs(this._getLineLeftOffset(lineIndex));\n    let width = lineLeftOffset;\n    const charLength = this._textLines[lineIndex].length;\n    const chars = this.__charBounds[lineIndex];\n    for (let j = 0; j < charLength; j++) {\n      // i removed something about flipX here, check.\n      const charWidth = chars[j].kernedWidth;\n      const widthAfter = width + charWidth;\n      if (mouseOffset.x <= widthAfter) {\n        // if the pointer is closer to the end of the char we increment charIndex\n        // in order to position the cursor after the char\n        if (\n          Math.abs(mouseOffset.x - widthAfter) <=\n          Math.abs(mouseOffset.x - width)\n        ) {\n          charIndex++;\n        }\n        break;\n      }\n      width = widthAfter;\n      charIndex++;\n    }\n\n    return Math.min(\n      // if object is horizontally flipped, mirror cursor location from the end\n      this.flipX ? charLength - charIndex : charIndex,\n      this._text.length,\n    );\n  }\n}\n", "export type TKeyMapIText = Record<\n  KeyboardEvent['keyCode'],\n  CursorHandlingMethods\n>;\n\nexport type CursorHandlingMethods =\n  | 'moveCursorUp'\n  | 'moveCursorDown'\n  | 'moveCursorLeft'\n  | 'moveCursorRight'\n  | 'exitEditing'\n  | 'copy'\n  | 'cut'\n  | 'cmdAll';\n\nconst MOVE_CURSOR_UP: CursorHandlingMethods = 'moveCursorUp';\nconst MOVE_CURSOR_DOWN: CursorHandlingMethods = 'moveCursorDown';\nconst MOVE_CURSOR_LEFT: CursorHandlingMethods = 'moveCursorLeft';\nconst MOVE_CURSOR_RIGHT: CursorHandlingMethods = 'moveCursorRight';\nconst EXIT_EDITING: CursorHandlingMethods = 'exitEditing';\n\n// @TODO look into import { Key } from 'ts-key-enum';\n// and transition from keyCode to Key\n// also reduce string duplication\nexport const keysMap: TKeyMapIText = {\n  9: EXIT_EDITING,\n  27: EXIT_EDITING,\n  33: MOVE_CURSOR_UP,\n  34: MOVE_CURSOR_DOWN,\n  35: MOVE_CURSOR_RIGHT,\n  36: MOVE_CURSOR_LEFT,\n  37: MOVE_CURSOR_LEFT,\n  38: MOVE_CURSOR_UP,\n  39: MOVE_CURSOR_RIGHT,\n  40: MOVE_CURSOR_DOWN,\n};\n\nexport const keysMapRtl: TKeyMapIText = {\n  9: EXIT_EDITING,\n  27: EXIT_EDITING,\n  33: MOVE_CURSOR_UP,\n  34: MOVE_CURSOR_DOWN,\n  35: MOVE_CURSOR_LEFT,\n  36: MOVE_CURSOR_RIGHT,\n  37: MOVE_CURSOR_RIGHT,\n  38: MOVE_CURSOR_UP,\n  39: MOVE_CURSOR_LEFT,\n  40: MOVE_CURSOR_DOWN,\n};\n\n/**\n * For functionalities on keyUp + ctrl || cmd\n */\nexport const ctrlKeysMapUp: TKeyMapIText = {\n  67: 'copy',\n  // there was a reason this wasn't deleted. for now leave it here\n  88: 'cut',\n};\n\n/**\n * For functionalities on keyDown + ctrl || cmd\n */\nexport const ctrlKeysMapDown: TKeyMapIText = {\n  65: 'cmdAll',\n};\n", "import type { StaticCanvas } from '../../canvas/StaticCanvas';\n\n/**\n * Set the transform of the passed context to the same of a specific Canvas or StaticCanvas.\n * setTransform is used since this utility will RESET the ctx transform to the basic value\n * of retina scaling and viewport transform\n * It is not meant to be added to other transforms, it is used internally to preapre canvases to draw\n * @param ctx\n * @param canvas\n */\nexport const applyCanvasTransform = (\n  ctx: CanvasRenderingContext2D,\n  canvas: StaticCanvas,\n) => {\n  const scale = canvas.getRetinaScaling();\n  ctx.setTransform(scale, 0, 0, scale, 0, 0);\n  const v = canvas.viewportTransform;\n  ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n};\n", "import { Canvas } from '../../canvas/Canvas';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextClickBehavior } from './ITextClickBehavior';\nimport {\n  ctrlKeysMapDown,\n  ctrlKeysMapUp,\n  keysMap,\n  keysMapRtl,\n} from './constants';\nimport type { TClassProperties, TFiller, TOptions } from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport type { SerializedTextProps, TextProps } from '../Text/Text';\nimport {\n  JUSTIFY,\n  JUSTIFY_CENTER,\n  JUSTIFY_LEFT,\n  JUSTIFY_RIGHT,\n} from '../Text/constants';\nimport { CENTER, FILL, LEFT, RIGHT } from '../../constants';\nimport type { ObjectToCanvasElementOptions } from '../Object/Object';\nimport type { FabricObject } from '../Object/FabricObject';\nimport { createCanvasElementFor } from '../../util/misc/dom';\nimport { applyCanvasTransform } from '../../util/internals/applyCanvasTransform';\n\nexport type CursorBoundaries = {\n  left: number;\n  top: number;\n  leftOffset: number;\n  topOffset: number;\n};\n\nexport type CursorRenderingData = {\n  color: string;\n  opacity: number;\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n};\n\n// Declare IText protected properties to workaround TS\nconst protectedDefaultValues = {\n  _selectionDirection: null,\n  _reSpace: /\\s|\\r?\\n/,\n  inCompositionMode: false,\n};\n\nexport const iTextDefaultValues: Partial<TClassProperties<IText>> = {\n  selectionStart: 0,\n  selectionEnd: 0,\n  selectionColor: 'rgba(17,119,255,0.3)',\n  isEditing: false,\n  editable: true,\n  editingBorderColor: 'rgba(102,153,255,0.25)',\n  cursorWidth: 2,\n  cursorColor: '',\n  cursorDelay: 1000,\n  cursorDuration: 600,\n  caching: true,\n  hiddenTextareaContainer: null,\n  keysMap,\n  keysMapRtl,\n  ctrlKeysMapDown,\n  ctrlKeysMapUp,\n  ...protectedDefaultValues,\n};\n\n// @TODO this is not complete\ninterface UniqueITextProps {\n  selectionStart: number;\n  selectionEnd: number;\n}\n\nexport interface SerializedITextProps\n  extends SerializedTextProps,\n    UniqueITextProps {}\n\nexport interface ITextProps extends TextProps, UniqueITextProps {}\n\n/**\n * @fires changed\n * @fires selection:changed\n * @fires editing:entered\n * @fires editing:exited\n * @fires dragstart\n * @fires drag drag event firing on the drag source\n * @fires dragend\n * @fires copy\n * @fires cut\n * @fires paste\n *\n * #### Supported key combinations\n * ```\n *   Move cursor:                    left, right, up, down\n *   Select character:               shift + left, shift + right\n *   Select text vertically:         shift + up, shift + down\n *   Move cursor by word:            alt + left, alt + right\n *   Select words:                   shift + alt + left, shift + alt + right\n *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\n *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\n *   Jump to start/end of text:      cmd + up, cmd + down\n *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\n *   Delete character:               backspace\n *   Delete word:                    alt + backspace\n *   Delete line:                    cmd + backspace\n *   Forward delete:                 delete\n *   Copy text:                      ctrl/cmd + c\n *   Paste text:                     ctrl/cmd + v\n *   Cut text:                       ctrl/cmd + x\n *   Select entire text:             ctrl/cmd + a\n *   Quit editing                    tab or esc\n * ```\n *\n * #### Supported mouse/touch combination\n * ```\n *   Position cursor:                click/touch\n *   Create selection:               click/touch & drag\n *   Create selection:               click & shift + click\n *   Select word:                    double click\n *   Select line:                    triple click\n * ```\n */\nexport class IText<\n    Props extends TOptions<ITextProps> = Partial<ITextProps>,\n    SProps extends SerializedITextProps = SerializedITextProps,\n    EventSpec extends ITextEvents = ITextEvents,\n  >\n  extends ITextClickBehavior<Props, SProps, EventSpec>\n  implements UniqueITextProps\n{\n  /**\n   * Index where text selection starts (or where cursor is when there is no selection)\n   * @type Number\n   * @default\n   */\n  declare selectionStart: number;\n\n  /**\n   * Index where text selection ends\n   * @type Number\n   * @default\n   */\n  declare selectionEnd: number;\n\n  declare compositionStart: number;\n\n  declare compositionEnd: number;\n\n  /**\n   * Color of text selection\n   * @type String\n   * @default\n   */\n  declare selectionColor: string;\n\n  /**\n   * Indicates whether text is in editing mode\n   * @type Boolean\n   * @default\n   */\n  declare isEditing: boolean;\n\n  /**\n   * Indicates whether a text can be edited\n   * @type Boolean\n   * @default\n   */\n  declare editable: boolean;\n\n  /**\n   * Border color of text object while it's in editing mode\n   * @type String\n   * @default\n   */\n  declare editingBorderColor: string;\n\n  /**\n   * Width of cursor (in px)\n   * @type Number\n   * @default\n   */\n  declare cursorWidth: number;\n\n  /**\n   * Color of text cursor color in editing mode.\n   * if not set (default) will take color from the text.\n   * if set to a color value that fabric can understand, it will\n   * be used instead of the color of the text at the current position.\n   * @type String\n   * @default\n   */\n  declare cursorColor: string;\n\n  /**\n   * Delay between cursor blink (in ms)\n   * @type Number\n   * @default\n   */\n  declare cursorDelay: number;\n\n  /**\n   * Duration of cursor fade in (in ms)\n   * @type Number\n   * @default\n   */\n  declare cursorDuration: number;\n\n  declare compositionColor: string;\n\n  /**\n   * Indicates whether internal text char widths can be cached\n   * @type Boolean\n   * @default\n   */\n  declare caching: boolean;\n\n  static ownDefaults = iTextDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...IText.ownDefaults };\n  }\n\n  static type = 'IText';\n\n  get type() {\n    const type = super.type;\n    // backward compatibility\n    return type === 'itext' ? 'i-text' : type;\n  }\n\n  /**\n   * Constructor\n   * @param {String} text Text string\n   * @param {Object} [options] Options object\n   */\n  constructor(text: string, options?: Props) {\n    super(text, { ...IText.ownDefaults, ...options } as Props);\n    this.initBehavior();\n  }\n\n  /**\n   * While editing handle differently\n   * @private\n   * @param {string} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    if (this.isEditing && this._savedProps && key in this._savedProps) {\n      // @ts-expect-error irritating TS\n      this._savedProps[key] = value;\n      return this;\n    }\n    if (key === 'canvas') {\n      this.canvas instanceof Canvas &&\n        this.canvas.textEditingManager.remove(this);\n      value instanceof Canvas && value.textEditingManager.add(this);\n    }\n    return super._set(key, value);\n  }\n\n  /**\n   * Sets selection start (left boundary of a selection)\n   * @param {Number} index Index to set selection start to\n   */\n  setSelectionStart(index: number) {\n    index = Math.max(index, 0);\n    this._updateAndFire('selectionStart', index);\n  }\n\n  /**\n   * Sets selection end (right boundary of a selection)\n   * @param {Number} index Index to set selection end to\n   */\n  setSelectionEnd(index: number) {\n    index = Math.min(index, this.text.length);\n    this._updateAndFire('selectionEnd', index);\n  }\n\n  /**\n   * @private\n   * @param {String} property 'selectionStart' or 'selectionEnd'\n   * @param {Number} index new position of property\n   */\n  protected _updateAndFire(\n    property: 'selectionStart' | 'selectionEnd',\n    index: number,\n  ) {\n    if (this[property] !== index) {\n      this._fireSelectionChanged();\n      this[property] = index;\n    }\n    this._updateTextarea();\n  }\n\n  /**\n   * Fires the even of selection changed\n   * @private\n   */\n  _fireSelectionChanged() {\n    this.fire('selection:changed');\n    this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n  }\n\n  /**\n   * Initialize text dimensions. Render all text on given context\n   * or on a offscreen canvas to get the text width with measureText.\n   * Updates this.width and this.height with the proper values.\n   * Does not return dimensions.\n   * @private\n   */\n  initDimensions() {\n    this.isEditing && this.initDelayedCursor();\n    super.initDimensions();\n  }\n\n  /**\n   * Gets style of a current selection/cursor (at the start position)\n   * if startIndex or endIndex are not provided, selectionStart or selectionEnd will be used.\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} endIndex End index to get styles at, if not specified selectionEnd or startIndex + 1\n   * @param {Boolean} [complete] get full style or not\n   * @return {Array} styles an array with one, zero or more Style objects\n   */\n  getSelectionStyles(\n    startIndex: number = this.selectionStart || 0,\n    endIndex: number = this.selectionEnd,\n    complete?: boolean,\n  ) {\n    return super.getSelectionStyles(startIndex, endIndex, complete);\n  }\n\n  /**\n   * Sets style of a current selection, if no selection exist, do not set anything.\n   * @param {Object} [styles] Styles object\n   * @param {Number} [startIndex] Start index to get styles at\n   * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n   */\n  setSelectionStyles(\n    styles: object,\n    startIndex: number = this.selectionStart || 0,\n    endIndex: number = this.selectionEnd,\n  ) {\n    return super.setSelectionStyles(styles, startIndex, endIndex);\n  }\n\n  /**\n   * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\n   * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n   * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n   */\n  get2DCursorLocation(\n    selectionStart = this.selectionStart,\n    skipWrapping?: boolean,\n  ) {\n    return super.get2DCursorLocation(selectionStart, skipWrapping);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    super.render(ctx);\n    // clear the cursorOffsetCache, so we ensure to calculate once per renderCursor\n    // the correct position but not at every cursor animation.\n    this.cursorOffsetCache = {};\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * @override block cursor/selection logic while rendering the exported canvas\n   * @todo this workaround should be replaced with a more robust solution\n   */\n  toCanvasElement(options?: ObjectToCanvasElementOptions): HTMLCanvasElement {\n    const isEditing = this.isEditing;\n    this.isEditing = false;\n    const canvas = super.toCanvasElement(options);\n    this.isEditing = isEditing;\n    return canvas;\n  }\n\n  /**\n   * Renders cursor or selection (depending on what exists)\n   * it does on the contextTop. If contextTop is not available, do nothing.\n   */\n  renderCursorOrSelection() {\n    if (!this.isEditing || !this.canvas) {\n      return;\n    }\n    const ctx = this.clearContextTop(true);\n    if (!ctx) {\n      return;\n    }\n    const boundaries = this._getCursorBoundaries();\n\n    const ancestors = this.findAncestorsWithClipPath();\n    const hasAncestorsWithClipping = ancestors.length > 0;\n    let drawingCtx: CanvasRenderingContext2D = ctx;\n    let drawingCanvas: HTMLCanvasElement | undefined = undefined;\n    if (hasAncestorsWithClipping) {\n      // we have some clipPath, we need to draw the selection on an intermediate layer.\n      drawingCanvas = createCanvasElementFor(ctx.canvas);\n      drawingCtx = drawingCanvas.getContext('2d')!;\n      applyCanvasTransform(drawingCtx, this.canvas);\n      const m = this.calcTransformMatrix();\n      drawingCtx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    }\n\n    if (this.selectionStart === this.selectionEnd && !this.inCompositionMode) {\n      this.renderCursor(drawingCtx, boundaries);\n    } else {\n      this.renderSelection(drawingCtx, boundaries);\n    }\n\n    if (hasAncestorsWithClipping) {\n      // we need a neutral context.\n      // this won't work for nested clippaths in which a clippath\n      // has its own clippath\n      for (const ancestor of ancestors) {\n        const clipPath = ancestor.clipPath!;\n        const clippingCanvas = createCanvasElementFor(ctx.canvas);\n        const clippingCtx = clippingCanvas.getContext('2d')!;\n        applyCanvasTransform(clippingCtx, this.canvas);\n        // position the ctx in the center of the outer ancestor\n        if (!clipPath.absolutePositioned) {\n          const m = ancestor.calcTransformMatrix();\n          clippingCtx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n        }\n        clipPath.transform(clippingCtx);\n        // we assign an empty drawing context, we don't plan to have this working for nested clippaths for now\n        clipPath.drawObject(clippingCtx, true, {});\n        this.drawClipPathOnCache(drawingCtx, clipPath, clippingCanvas);\n      }\n    }\n\n    if (hasAncestorsWithClipping) {\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.drawImage(drawingCanvas!, 0, 0);\n    }\n\n    this.canvas.contextTopDirty = true;\n    ctx.restore();\n  }\n\n  /**\n   * Finds and returns an array of clip paths that are applied to the parent\n   * group(s) of the current FabricObject instance. The object's hierarchy is\n   * traversed upwards (from the current object towards the root of the canvas),\n   * checking each parent object for the presence of a `clipPath` that is not\n   * absolutely positioned.\n   */\n  findAncestorsWithClipPath(): FabricObject[] {\n    const clipPathAncestors: FabricObject[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let obj: FabricObject | undefined = this;\n    while (obj) {\n      if (obj.clipPath) {\n        clipPathAncestors.push(obj);\n      }\n      obj = obj.parent;\n    }\n\n    return clipPathAncestors;\n  }\n\n  /**\n   * Returns cursor boundaries (left, top, leftOffset, topOffset)\n   * left/top are left/top of entire text box\n   * leftOffset/topOffset are offset from that left/top point of a text box\n   * @private\n   * @param {number} [index] index from start\n   * @param {boolean} [skipCaching]\n   */\n  _getCursorBoundaries(\n    index: number = this.selectionStart,\n    skipCaching?: boolean,\n  ): CursorBoundaries {\n    const left = this._getLeftOffset(),\n      top = this._getTopOffset(),\n      offsets = this._getCursorBoundariesOffsets(index, skipCaching);\n    return {\n      left: left,\n      top: top,\n      leftOffset: offsets.left,\n      topOffset: offsets.top,\n    };\n  }\n\n  /**\n   * Caches and returns cursor left/top offset relative to instance's center point\n   * @private\n   * @param {number} index index from start\n   * @param {boolean} [skipCaching]\n   */\n  _getCursorBoundariesOffsets(\n    index: number,\n    skipCaching?: boolean,\n  ): { left: number; top: number } {\n    if (skipCaching) {\n      return this.__getCursorBoundariesOffsets(index);\n    }\n    if (this.cursorOffsetCache && 'top' in this.cursorOffsetCache) {\n      return this.cursorOffsetCache as { left: number; top: number };\n    }\n    return (this.cursorOffsetCache = this.__getCursorBoundariesOffsets(index));\n  }\n\n  /**\n   * Calculates cursor left/top offset relative to instance's center point\n   * @private\n   * @param {number} index index from start\n   */\n  __getCursorBoundariesOffsets(index: number) {\n    let topOffset = 0,\n      leftOffset = 0;\n    const { charIndex, lineIndex } = this.get2DCursorLocation(index);\n\n    for (let i = 0; i < lineIndex; i++) {\n      topOffset += this.getHeightOfLine(i);\n    }\n    const lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    const bound = this.__charBounds[lineIndex][charIndex];\n    bound && (leftOffset = bound.left);\n    if (\n      this.charSpacing !== 0 &&\n      charIndex === this._textLines[lineIndex].length\n    ) {\n      leftOffset -= this._getWidthOfCharSpacing();\n    }\n    const boundaries = {\n      top: topOffset,\n      left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0),\n    };\n    if (this.direction === 'rtl') {\n      if (\n        this.textAlign === RIGHT ||\n        this.textAlign === JUSTIFY ||\n        this.textAlign === JUSTIFY_RIGHT\n      ) {\n        boundaries.left *= -1;\n      } else if (this.textAlign === LEFT || this.textAlign === JUSTIFY_LEFT) {\n        boundaries.left = lineLeftOffset - (leftOffset > 0 ? leftOffset : 0);\n      } else if (\n        this.textAlign === CENTER ||\n        this.textAlign === JUSTIFY_CENTER\n      ) {\n        boundaries.left = lineLeftOffset - (leftOffset > 0 ? leftOffset : 0);\n      }\n    }\n    return boundaries;\n  }\n\n  /**\n   * Renders cursor on context Top, outside the animation cycle, on request\n   * Used for the drag/drop effect.\n   * If contextTop is not available, do nothing.\n   */\n  renderCursorAt(selectionStart: number) {\n    this._renderCursor(\n      this.canvas!.contextTop,\n      this._getCursorBoundaries(selectionStart, true),\n      selectionStart,\n    );\n  }\n\n  /**\n   * Renders cursor\n   * @param {Object} boundaries\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  renderCursor(ctx: CanvasRenderingContext2D, boundaries: CursorBoundaries) {\n    this._renderCursor(ctx, boundaries, this.selectionStart);\n  }\n\n  /**\n   * Return the data needed to render the cursor for given selection start\n   * The left,top are relative to the object, while width and height are prescaled\n   * to look think with canvas zoom and object scaling,\n   * so they depend on canvas and object scaling\n   */\n  getCursorRenderingData(\n    selectionStart: number = this.selectionStart,\n    boundaries: CursorBoundaries = this._getCursorBoundaries(selectionStart),\n  ): CursorRenderingData {\n    const cursorLocation = this.get2DCursorLocation(selectionStart),\n      lineIndex = cursorLocation.lineIndex,\n      charIndex =\n        cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0,\n      charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize'),\n      multiplier = this.getObjectScaling().x * this.canvas!.getZoom(),\n      cursorWidth = this.cursorWidth / multiplier,\n      dy = this.getValueOfPropertyAt(lineIndex, charIndex, 'deltaY'),\n      topOffset =\n        boundaries.topOffset +\n        ((1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex)) /\n          this.lineHeight -\n        charHeight * (1 - this._fontSizeFraction);\n\n    return {\n      color:\n        this.cursorColor ||\n        (this.getValueOfPropertyAt(lineIndex, charIndex, 'fill') as string),\n      opacity: this._currentCursorOpacity,\n      left: boundaries.left + boundaries.leftOffset - cursorWidth / 2,\n      top: topOffset + boundaries.top + dy,\n      width: cursorWidth,\n      height: charHeight,\n    };\n  }\n\n  /**\n   * Render the cursor at the given selectionStart.\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  _renderCursor(\n    ctx: CanvasRenderingContext2D,\n    boundaries: CursorBoundaries,\n    selectionStart: number,\n  ) {\n    const { color, opacity, left, top, width, height } =\n      this.getCursorRenderingData(selectionStart, boundaries);\n    ctx.fillStyle = color;\n    ctx.globalAlpha = opacity;\n    ctx.fillRect(left, top, width, height);\n  }\n\n  /**\n   * Renders text selection\n   * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  renderSelection(ctx: CanvasRenderingContext2D, boundaries: CursorBoundaries) {\n    const selection = {\n      selectionStart: this.inCompositionMode\n        ? this.hiddenTextarea!.selectionStart\n        : this.selectionStart,\n      selectionEnd: this.inCompositionMode\n        ? this.hiddenTextarea!.selectionEnd\n        : this.selectionEnd,\n    };\n    this._renderSelection(ctx, selection, boundaries);\n  }\n\n  /**\n   * Renders drag start text selection\n   */\n  renderDragSourceEffect() {\n    const dragStartSelection =\n      this.draggableTextDelegate.getDragStartSelection()!;\n    this._renderSelection(\n      this.canvas!.contextTop,\n      dragStartSelection,\n      this._getCursorBoundaries(dragStartSelection.selectionStart, true),\n    );\n  }\n\n  renderDropTargetEffect(e: DragEvent) {\n    const dragSelection = this.getSelectionStartFromPointer(e);\n    this.renderCursorAt(dragSelection);\n  }\n\n  /**\n   * Renders text selection\n   * @private\n   * @param {{ selectionStart: number, selectionEnd: number }} selection\n   * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  _renderSelection(\n    ctx: CanvasRenderingContext2D,\n    selection: { selectionStart: number; selectionEnd: number },\n    boundaries: CursorBoundaries,\n  ) {\n    const selectionStart = selection.selectionStart,\n      selectionEnd = selection.selectionEnd,\n      isJustify = this.textAlign.includes(JUSTIFY),\n      start = this.get2DCursorLocation(selectionStart),\n      end = this.get2DCursorLocation(selectionEnd),\n      startLine = start.lineIndex,\n      endLine = end.lineIndex,\n      startChar = start.charIndex < 0 ? 0 : start.charIndex,\n      endChar = end.charIndex < 0 ? 0 : end.charIndex;\n\n    for (let i = startLine; i <= endLine; i++) {\n      const lineOffset = this._getLineLeftOffset(i) || 0;\n      let lineHeight = this.getHeightOfLine(i),\n        realLineHeight = 0,\n        boxStart = 0,\n        boxEnd = 0;\n\n      if (i === startLine) {\n        boxStart = this.__charBounds[startLine][startChar].left;\n      }\n      if (i >= startLine && i < endLine) {\n        boxEnd =\n          isJustify && !this.isEndOfWrapping(i)\n            ? this.width\n            : this.getLineWidth(i) || 5; // WTF is this 5?\n      } else if (i === endLine) {\n        if (endChar === 0) {\n          boxEnd = this.__charBounds[endLine][endChar].left;\n        } else {\n          const charSpacing = this._getWidthOfCharSpacing();\n          boxEnd =\n            this.__charBounds[endLine][endChar - 1].left +\n            this.__charBounds[endLine][endChar - 1].width -\n            charSpacing;\n        }\n      }\n      realLineHeight = lineHeight;\n      if (this.lineHeight < 1 || (i === endLine && this.lineHeight > 1)) {\n        lineHeight /= this.lineHeight;\n      }\n      let drawStart = boundaries.left + lineOffset + boxStart,\n        drawHeight = lineHeight,\n        extraTop = 0;\n      const drawWidth = boxEnd - boxStart;\n      if (this.inCompositionMode) {\n        ctx.fillStyle = this.compositionColor || 'black';\n        drawHeight = 1;\n        extraTop = lineHeight;\n      } else {\n        ctx.fillStyle = this.selectionColor;\n      }\n      if (this.direction === 'rtl') {\n        if (\n          this.textAlign === RIGHT ||\n          this.textAlign === JUSTIFY ||\n          this.textAlign === JUSTIFY_RIGHT\n        ) {\n          drawStart = this.width - drawStart - drawWidth;\n        } else if (this.textAlign === LEFT || this.textAlign === JUSTIFY_LEFT) {\n          drawStart = boundaries.left + lineOffset - boxEnd;\n        } else if (\n          this.textAlign === CENTER ||\n          this.textAlign === JUSTIFY_CENTER\n        ) {\n          drawStart = boundaries.left + lineOffset - boxEnd;\n        }\n      }\n      ctx.fillRect(\n        drawStart,\n        boundaries.top + boundaries.topOffset + extraTop,\n        drawWidth,\n        drawHeight,\n      );\n      boundaries.topOffset += realLineHeight;\n    }\n  }\n\n  /**\n   * High level function to know the height of the cursor.\n   * the currentChar is the one that precedes the cursor\n   * Returns fontSize of char at the current cursor\n   * Unused from the library, is for the end user\n   * @return {Number} Character font size\n   */\n  getCurrentCharFontSize(): number {\n    const cp = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(cp.l, cp.c, 'fontSize');\n  }\n\n  /**\n   * High level function to know the color of the cursor.\n   * the currentChar is the one that precedes the cursor\n   * Returns color (fill) of char at the current cursor\n   * if the text object has a pattern or gradient for filler, it will return that.\n   * Unused by the library, is for the end user\n   * @return {String | TFiller} Character color (fill)\n   */\n  getCurrentCharColor(): string | TFiller | null {\n    const cp = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(cp.l, cp.c, FILL);\n  }\n\n  /**\n   * Returns the cursor position for the getCurrent.. functions\n   * @private\n   */\n  _getCurrentCharIndex() {\n    const cursorPosition = this.get2DCursorLocation(this.selectionStart, true),\n      charIndex =\n        cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;\n    return { l: cursorPosition.lineIndex, c: charIndex };\n  }\n\n  dispose() {\n    this.exitEditingImpl();\n    this.draggableTextDelegate.dispose();\n    super.dispose();\n  }\n}\n\nclassRegistry.setClass(IText);\n// legacy\nclassRegistry.setClass(IText, 'i-text');\n", "import type { TClassProperties, TOptions } from '../typedefs';\nimport { IText } from './IText/IText';\nimport { classRegistry } from '../ClassRegistry';\nimport { createTextboxDefaultControls } from '../controls/commonControls';\nimport { JUSTIFY } from './Text/constants';\nimport type { TextStyleDeclaration } from './Text/StyledText';\nimport type { SerializedITextProps, ITextProps } from './IText/IText';\nimport type { ITextEvents } from './IText/ITextBehavior';\nimport type { TextLinesInfo } from './Text/Text';\nimport type { Control } from '../controls/Control';\n\n// @TODO: Many things here are configuration related and shouldn't be on the class nor prototype\n// regexes, list of properties that are not suppose to change by instances, magic consts.\n// this will be a separated effort\nexport const textboxDefaultValues: Partial<TClassProperties<Textbox>> = {\n  minWidth: 20,\n  dynamicMinWidth: 2,\n  lockScalingFlip: true,\n  noScaleCache: false,\n  _wordJoiners: /[ \\t\\r]/,\n  splitByGrapheme: false,\n};\n\nexport type GraphemeData = {\n  wordsData: {\n    word: string[];\n    width: number;\n  }[][];\n  largestWordWidth: number;\n};\n\nexport type StyleMap = Record<string, { line: number; offset: number }>;\n\n// @TODO this is not complete\ninterface UniqueTextboxProps {\n  minWidth: number;\n  splitByGrapheme: boolean;\n  dynamicMinWidth: number;\n  _wordJoiners: RegExp;\n}\n\nexport interface SerializedTextboxProps\n  extends SerializedITextProps,\n    Pick<UniqueTextboxProps, 'minWidth' | 'splitByGrapheme'> {}\n\nexport interface TextboxProps extends ITextProps, UniqueTextboxProps {}\n\n/**\n * Textbox class, based on IText, allows the user to resize the text rectangle\n * and wraps lines automatically. Textboxes have their Y scaling locked, the\n * user can only change width. Height is adjusted automatically based on the\n * wrapping of lines.\n */\nexport class Textbox<\n    Props extends TOptions<TextboxProps> = Partial<TextboxProps>,\n    SProps extends SerializedTextboxProps = SerializedTextboxProps,\n    EventSpec extends ITextEvents = ITextEvents,\n  >\n  extends IText<Props, SProps, EventSpec>\n  implements UniqueTextboxProps\n{\n  /**\n   * Minimum width of textbox, in pixels.\n   * @type Number\n   * @default\n   */\n  declare minWidth: number;\n\n  /**\n   * Minimum calculated width of a textbox, in pixels.\n   * fixed to 2 so that an empty textbox cannot go to 0\n   * and is still selectable without text.\n   * @type Number\n   * @default\n   */\n  declare dynamicMinWidth: number;\n\n  /**\n   * Use this boolean property in order to split strings that have no white space concept.\n   * this is a cheap way to help with chinese/japanese\n   * @type Boolean\n   * @since 2.6.0\n   */\n  declare splitByGrapheme: boolean;\n\n  declare _wordJoiners: RegExp;\n\n  declare _styleMap: StyleMap;\n\n  declare isWrapping: boolean;\n\n  static type = 'Textbox';\n\n  static textLayoutProperties = [...IText.textLayoutProperties, 'width'];\n\n  static ownDefaults = textboxDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Textbox.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {String} text Text string\n   * @param {Object} [options] Options object\n   */\n  constructor(text: string, options?: Props) {\n    super(text, { ...Textbox.ownDefaults, ...options } as Props);\n  }\n\n  /**\n   * Creates the default control object.\n   * If you prefer to have on instance of controls shared among all objects\n   * make this function return an empty object and add controls to the ownDefaults object\n   */\n  static createControls(): { controls: Record<string, Control> } {\n    return { controls: createTextboxDefaultControls() };\n  }\n\n  /**\n   * Unlike superclass's version of this function, Textbox does not update\n   * its width.\n   * @private\n   * @override\n   */\n  initDimensions() {\n    if (!this.initialized) {\n      return;\n    }\n    this.isEditing && this.initDelayedCursor();\n    this._clearCache();\n    // clear dynamicMinWidth as it will be different after we re-wrap line\n    this.dynamicMinWidth = 0;\n    // wrap lines\n    this._styleMap = this._generateStyleMap(this._splitText());\n    // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\n    if (this.dynamicMinWidth > this.width) {\n      this._set('width', this.dynamicMinWidth);\n    }\n    if (this.textAlign.includes(JUSTIFY)) {\n      // once text is measured we need to make space fatter to make justified text.\n      this.enlargeSpaces();\n    }\n    // clear cache and re-calculate height\n    this.height = this.calcTextHeight();\n  }\n\n  /**\n   * Generate an object that translates the style object so that it is\n   * broken up by visual lines (new lines and automatic wrapping).\n   * The original text styles object is broken up by actual lines (new lines only),\n   * which is only sufficient for Text / IText\n   * @private\n   */\n  _generateStyleMap(textInfo: TextLinesInfo): StyleMap {\n    let realLineCount = 0,\n      realLineCharCount = 0,\n      charCount = 0;\n    const map: StyleMap = {};\n\n    for (let i = 0; i < textInfo.graphemeLines.length; i++) {\n      if (textInfo.graphemeText[charCount] === '\\n' && i > 0) {\n        realLineCharCount = 0;\n        charCount++;\n        realLineCount++;\n      } else if (\n        !this.splitByGrapheme &&\n        this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) &&\n        i > 0\n      ) {\n        // this case deals with space's that are removed from end of lines when wrapping\n        realLineCharCount++;\n        charCount++;\n      }\n\n      map[i] = { line: realLineCount, offset: realLineCharCount };\n\n      charCount += textInfo.graphemeLines[i].length;\n      realLineCharCount += textInfo.graphemeLines[i].length;\n    }\n\n    return map;\n  }\n\n  /**\n   * Returns true if object has a style property or has it on a specified line\n   * @param {Number} lineIndex\n   * @return {Boolean}\n   */\n  styleHas(property: keyof TextStyleDeclaration, lineIndex: number): boolean {\n    if (this._styleMap && !this.isWrapping) {\n      const map = this._styleMap[lineIndex];\n      if (map) {\n        lineIndex = map.line;\n      }\n    }\n    return super.styleHas(property, lineIndex);\n  }\n\n  /**\n   * Returns true if object has no styling or no styling in a line\n   * @param {Number} lineIndex , lineIndex is on wrapped lines.\n   * @return {Boolean}\n   */\n  isEmptyStyles(lineIndex: number): boolean {\n    if (!this.styles) {\n      return true;\n    }\n    let offset = 0,\n      nextLineIndex = lineIndex + 1,\n      nextOffset: number,\n      shouldLimit = false;\n    const map = this._styleMap[lineIndex],\n      mapNextLine = this._styleMap[lineIndex + 1];\n    if (map) {\n      lineIndex = map.line;\n      offset = map.offset;\n    }\n    if (mapNextLine) {\n      nextLineIndex = mapNextLine.line;\n      shouldLimit = nextLineIndex === lineIndex;\n      nextOffset = mapNextLine.offset;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { line: this.styles[lineIndex] };\n    for (const p1 in obj) {\n      for (const p2 in obj[p1]) {\n        const p2Number = parseInt(p2, 10);\n        if (p2Number >= offset && (!shouldLimit || p2Number < nextOffset!)) {\n          // eslint-disable-next-line no-unused-vars\n          for (const p3 in obj[p1][p2]) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @protected\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {TextStyleDeclaration} a style object reference to the existing one or a new empty object when undefined\n   */\n  _getStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): TextStyleDeclaration {\n    if (this._styleMap && !this.isWrapping) {\n      const map = this._styleMap[lineIndex];\n      if (!map) {\n        return {};\n      }\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n    }\n    return super._getStyleDeclaration(lineIndex, charIndex);\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n    style: object,\n  ) {\n    const map = this._styleMap[lineIndex];\n    super._setStyleDeclaration(map.line, map.offset + charIndex, style);\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @private\n   */\n  protected _deleteStyleDeclaration(lineIndex: number, charIndex: number) {\n    const map = this._styleMap[lineIndex];\n    super._deleteStyleDeclaration(map.line, map.offset + charIndex);\n  }\n\n  /**\n   * probably broken need a fix\n   * Returns the real style line that correspond to the wrapped lineIndex line\n   * Used just to verify if the line does exist or not.\n   * @param {Number} lineIndex\n   * @returns {Boolean} if the line exists or not\n   * @private\n   */\n  protected _getLineStyle(lineIndex: number): boolean {\n    const map = this._styleMap[lineIndex];\n    return !!this.styles[map.line];\n  }\n\n  /**\n   * Set the line style to an empty object so that is initialized\n   * @param {Number} lineIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setLineStyle(lineIndex: number) {\n    const map = this._styleMap[lineIndex];\n    super._setLineStyle(map.line);\n  }\n\n  /**\n   * Wraps text using the 'width' property of Textbox. First this function\n   * splits text on newlines, so we preserve newlines entered by the user.\n   * Then it wraps each line using the width of the Textbox by calling\n   * _wrapLine().\n   * @param {Array} lines The string array of text that is split into lines\n   * @param {Number} desiredWidth width you want to wrap to\n   * @returns {Array} Array of lines\n   */\n  _wrapText(lines: string[], desiredWidth: number): string[][] {\n    this.isWrapping = true;\n    // extract all thewords and the widths to optimally wrap lines.\n    const data = this.getGraphemeDataForRender(lines);\n    const wrapped: string[][] = [];\n    for (let i = 0; i < data.wordsData.length; i++) {\n      wrapped.push(...this._wrapLine(i, desiredWidth, data));\n    }\n    this.isWrapping = false;\n    return wrapped;\n  }\n\n  /**\n   * For each line of text terminated by an hard line stop,\n   * measure each word width and extract the largest word from all.\n   * The returned words here are the one that at the end will be rendered.\n   * @param {string[]} lines the lines we need to measure\n   *\n   */\n  getGraphemeDataForRender(lines: string[]): GraphemeData {\n    const splitByGrapheme = this.splitByGrapheme,\n      infix = splitByGrapheme ? '' : ' ';\n\n    let largestWordWidth = 0;\n\n    const data = lines.map((line, lineIndex) => {\n      let offset = 0;\n      const wordsOrGraphemes = splitByGrapheme\n        ? this.graphemeSplit(line)\n        : this.wordSplit(line);\n\n      if (wordsOrGraphemes.length === 0) {\n        return [{ word: [], width: 0 }];\n      }\n\n      return wordsOrGraphemes.map((word: string) => {\n        // if using splitByGrapheme words are already in graphemes.\n        const graphemeArray = splitByGrapheme\n          ? [word]\n          : this.graphemeSplit(word);\n        const width = this._measureWord(graphemeArray, lineIndex, offset);\n        largestWordWidth = Math.max(width, largestWordWidth);\n        offset += graphemeArray.length + infix.length;\n        return { word: graphemeArray, width };\n      });\n    });\n\n    return {\n      wordsData: data,\n      largestWordWidth,\n    };\n  }\n\n  /**\n   * Helper function to measure a string of text, given its lineIndex and charIndex offset\n   * It gets called when charBounds are not available yet.\n   * Override if necessary\n   * Use with {@link Textbox#wordSplit}\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {String} text\n   * @param {number} lineIndex\n   * @param {number} charOffset\n   * @returns {number}\n   */\n  _measureWord(word: string[], lineIndex: number, charOffset = 0): number {\n    let width = 0,\n      prevGrapheme;\n    const skipLeft = true;\n    for (let i = 0, len = word.length; i < len; i++) {\n      const box = this._getGraphemeBox(\n        word[i],\n        lineIndex,\n        i + charOffset,\n        prevGrapheme,\n        skipLeft,\n      );\n      width += box.kernedWidth;\n      prevGrapheme = word[i];\n    }\n    return width;\n  }\n\n  /**\n   * Override this method to customize word splitting\n   * Use with {@link Textbox#_measureWord}\n   * @param {string} value\n   * @returns {string[]} array of words\n   */\n  wordSplit(value: string): string[] {\n    return value.split(this._wordJoiners);\n  }\n\n  /**\n   * Wraps a line of text using the width of the Textbox as desiredWidth\n   * and leveraging the known width o words from GraphemeData\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} desiredWidth width you want to wrap the line to\n   * @param {GraphemeData} graphemeData an object containing all the lines' words width.\n   * @param {Number} reservedSpace space to remove from wrapping for custom functionalities\n   * @returns {Array} Array of line(s) into which the given text is wrapped\n   * to.\n   */\n  _wrapLine(\n    lineIndex: number,\n    desiredWidth: number,\n    { largestWordWidth, wordsData }: GraphemeData,\n    reservedSpace = 0,\n  ): string[][] {\n    const additionalSpace = this._getWidthOfCharSpacing(),\n      splitByGrapheme = this.splitByGrapheme,\n      graphemeLines = [],\n      infix = splitByGrapheme ? '' : ' ';\n\n    let lineWidth = 0,\n      line: string[] = [],\n      // spaces in different languages?\n      offset = 0,\n      infixWidth = 0,\n      lineJustStarted = true;\n\n    desiredWidth -= reservedSpace;\n\n    const maxWidth = Math.max(\n      desiredWidth,\n      largestWordWidth,\n      this.dynamicMinWidth,\n    );\n    // layout words\n    const data = wordsData[lineIndex];\n    offset = 0;\n    let i;\n    for (i = 0; i < data.length; i++) {\n      const { word, width: wordWidth } = data[i];\n      offset += word.length;\n\n      lineWidth += infixWidth + wordWidth - additionalSpace;\n      if (lineWidth > maxWidth && !lineJustStarted) {\n        graphemeLines.push(line);\n        line = [];\n        lineWidth = wordWidth;\n        lineJustStarted = true;\n      } else {\n        lineWidth += additionalSpace;\n      }\n\n      if (!lineJustStarted && !splitByGrapheme) {\n        line.push(infix);\n      }\n      line = line.concat(word);\n\n      infixWidth = splitByGrapheme\n        ? 0\n        : this._measureWord([infix], lineIndex, offset);\n      offset++;\n      lineJustStarted = false;\n    }\n\n    i && graphemeLines.push(line);\n\n    // TODO: this code is probably not necessary anymore.\n    // it can be moved out of this function since largestWordWidth is now\n    // known in advance\n    if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {\n      this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;\n    }\n    return graphemeLines;\n  }\n\n  /**\n   * Detect if the text line is ended with an hard break\n   * text and itext do not have wrapping, return false\n   * @param {Number} lineIndex text to split\n   * @return {Boolean}\n   */\n  isEndOfWrapping(lineIndex: number): boolean {\n    if (!this._styleMap[lineIndex + 1]) {\n      // is last line, return true;\n      return true;\n    }\n    if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {\n      // this is last line before a line break, return true;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Detect if a line has a linebreak and so we need to account for it when moving\n   * and counting style.\n   * This is important only for splitByGrapheme at the end of wrapping.\n   * If we are not wrapping the offset is always 1\n   * @return Number\n   */\n  missingNewlineOffset(lineIndex: number, skipWrapping?: boolean): 0 | 1 {\n    if (this.splitByGrapheme && !skipWrapping) {\n      return this.isEndOfWrapping(lineIndex) ? 1 : 0;\n    }\n    return 1;\n  }\n\n  /**\n   * Gets lines of text to render in the Textbox. This function calculates\n   * text wrapping on the fly every time it is called.\n   * @param {String} text text to split\n   * @returns {Array} Array of lines in the Textbox.\n   * @override\n   */\n  _splitTextIntoLines(text: string) {\n    const newText = super._splitTextIntoLines(text),\n      graphemeLines = this._wrapText(newText.lines, this.width),\n      lines = new Array(graphemeLines.length);\n    for (let i = 0; i < graphemeLines.length; i++) {\n      lines[i] = graphemeLines[i].join('');\n    }\n    newText.lines = lines;\n    newText.graphemeLines = graphemeLines;\n    return newText;\n  }\n\n  getMinWidth() {\n    return Math.max(this.minWidth, this.dynamicMinWidth);\n  }\n\n  _removeExtraneousStyles() {\n    const linesToKeep = new Map();\n    for (const prop in this._styleMap) {\n      const propNumber = parseInt(prop, 10);\n      if (this._textLines[propNumber]) {\n        const lineIndex = this._styleMap[prop].line;\n        linesToKeep.set(`${lineIndex}`, true);\n      }\n    }\n    for (const prop in this.styles) {\n      if (!linesToKeep.has(prop)) {\n        delete this.styles[prop];\n      }\n    }\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @method toObject\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject<T, K>([\n      'minWidth',\n      'splitByGrapheme',\n      ...propertiesToInclude,\n    ] as K[]) as Pick<T, K> & SProps;\n  }\n}\n\nclassRegistry.setClass(Textbox);\n", "import { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport { sendPointToPlane } from '../../util/misc/planeChange';\nimport type { LayoutStrategyResult, StrictLayoutContext } from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { getObjectBounds } from './utils';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will adjust the bounding box to match the clip path bounding box.\n */\nexport class ClipPathLayout extends LayoutStrategy {\n  static readonly type = 'clip-path';\n\n  shouldPerformLayout(context: StrictLayoutContext): boolean {\n    return !!context.target.clipPath && super.shouldPerformLayout(context);\n  }\n\n  shouldLayoutClipPath() {\n    return false;\n  }\n\n  calcLayoutResult(\n    context: StrictLayoutContext,\n    objects: FabricObject[],\n  ): LayoutStrategyResult | undefined {\n    const { target } = context;\n    const { clipPath, group } = target;\n    if (!clipPath || !this.shouldPerformLayout(context)) {\n      return;\n    }\n    // TODO: remove stroke calculation from this case\n    const { width, height } = makeBoundingBoxFromPoints(\n      getObjectBounds(target, clipPath as FabricObject),\n    );\n    const size = new Point(width, height);\n    if (clipPath.absolutePositioned) {\n      //  we want the center point to exist in group's containing plane\n      const clipPathCenter = sendPointToPlane(\n        clipPath.getRelativeCenterPoint(),\n        undefined,\n        group ? group.calcTransformMatrix() : undefined,\n      );\n      return {\n        center: clipPathCenter,\n        size,\n      };\n    } else {\n      //  we want the center point to exist in group's containing plane, so we send it upwards\n      const clipPathCenter = clipPath\n        .getRelativeCenterPoint()\n        .transform(target.calcOwnMatrix(), true);\n      if (this.shouldPerformLayout(context)) {\n        // the clip path is positioned relative to the group's center which is affected by the bbox\n        // so we first calculate the bbox\n        const { center = new Point(), correction = new Point() } =\n          this.calcBoundingBox(objects, context) || {};\n        return {\n          center: center.add(clipPathCenter),\n          correction: correction.subtract(clipPathCenter),\n          size,\n        };\n      } else {\n        return {\n          center: target.getRelativeCenterPoint().add(clipPathCenter),\n          size,\n        };\n      }\n    }\n  }\n}\n\nclassRegistry.setClass(ClipPathLayout);\n", "import { Point } from '../../Point';\nimport type {\n  InitializationLayoutContext,\n  LayoutStrategyResult,\n  StrictLayoutContext,\n} from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will keep target's initial size.\n */\nexport class FixedLayout extends LayoutStrategy {\n  static readonly type = 'fixed';\n\n  /**\n   * @override respect target's initial size\n   */\n  getInitialSize(\n    { target }: StrictLayoutContext & InitializationLayoutContext,\n    { size }: Pick<LayoutStrategyResult, 'center' | 'size'>,\n  ): Point {\n    return new Point(target.width || size.x, target.height || size.y);\n  }\n}\n\nclassRegistry.setClass(FixedLayout);\n", "import { LayoutManager } from './LayoutManager';\nimport type { RegistrationContext, StrictLayoutContext } from './types';\nimport type { Group } from '../shapes/Group';\n\n/**\n * Today the LayoutManager class also takes care of subscribing event handlers\n * to update the group layout when the group is interactive and a transform is applied\n * to a child object.\n * The ActiveSelection is never interactive, but it could contain objects from\n * groups that are.\n * The standard LayoutManager would subscribe the children of the activeSelection to\n * perform layout changes to the active selection itself, what we need instead is that\n * the transformation applied to the active selection will trigger changes to the\n * original group of the children ( the one referenced under the parent property )\n * This subclass of the LayoutManager has a single duty to fill the gap of this difference.`\n */\nexport class ActiveSelectionLayoutManager extends LayoutManager {\n  subscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): void {\n    const activeSelection = context.target;\n    const parents = context.targets.reduce((parents, target) => {\n      target.parent && parents.add(target.parent);\n      return parents;\n    }, new Set<Group>());\n    parents.forEach((parent) => {\n      parent.layoutManager.subscribeTargets({\n        target: parent,\n        targets: [activeSelection],\n      });\n    });\n  }\n\n  /**\n   * unsubscribe from parent only if all its children were deselected\n   */\n  unsubscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): void {\n    const activeSelection = context.target;\n    const selectedObjects = activeSelection.getObjects();\n    const parents = context.targets.reduce((parents, target) => {\n      target.parent && parents.add(target.parent);\n      return parents;\n    }, new Set<Group>());\n    parents.forEach((parent) => {\n      !selectedObjects.some((object) => object.parent === parent) &&\n        parent.layoutManager.unsubscribeTargets({\n          target: parent,\n          targets: [activeSelection],\n        });\n    });\n  }\n}\n", "import type { ControlRenderingStyleOverride } from '../controls/controlRendering';\nimport { classRegistry } from '../ClassRegistry';\nimport type { GroupProps } from './Group';\nimport { Group } from './Group';\nimport type { FabricObject } from './Object/FabricObject';\nimport {\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_REMOVED,\n} from '../LayoutManager/constants';\nimport type { TClassProperties } from '../typedefs';\nimport { log } from '../util/internals/console';\nimport { ActiveSelectionLayoutManager } from '../LayoutManager/ActiveSelectionLayoutManager';\n\nexport type MultiSelectionStacking = 'canvas-stacking' | 'selection-order';\n\nexport interface ActiveSelectionOptions extends GroupProps {\n  multiSelectionStacking: MultiSelectionStacking;\n}\n\nconst activeSelectionDefaultValues: Partial<TClassProperties<ActiveSelection>> =\n  {\n    multiSelectionStacking: 'canvas-stacking',\n  };\n\n/**\n * Used by Canvas to manage selection.\n *\n * @example\n * class MyActiveSelection extends ActiveSelection {\n *   ...\n * }\n *\n * // override the default `ActiveSelection` class\n * classRegistry.setClass(MyActiveSelection)\n */\nexport class ActiveSelection extends Group {\n  static type = 'ActiveSelection';\n\n  static ownDefaults: Record<string, any> = activeSelectionDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...ActiveSelection.ownDefaults };\n  }\n\n  /**\n   * The ActiveSelection needs to use the ActiveSelectionLayoutManager\n   * or selections on interactive groups may be broken\n   */\n  declare layoutManager: ActiveSelectionLayoutManager;\n\n  /**\n   * controls how selected objects are added during a multiselection event\n   * - `canvas-stacking` adds the selected object to the active selection while respecting canvas object stacking order\n   * - `selection-order` adds the selected object to the top of the stack,\n   * meaning that the stack is ordered by the order in which objects were selected\n   * @default `canvas-stacking`\n   */\n  declare multiSelectionStacking: MultiSelectionStacking;\n\n  constructor(\n    objects: FabricObject[] = [],\n    options: Partial<ActiveSelectionOptions> = {},\n  ) {\n    super();\n    Object.assign(this, ActiveSelection.ownDefaults);\n    this.setOptions(options);\n    const { left, top, layoutManager } = options;\n    this.groupInit(objects, {\n      left,\n      top,\n      layoutManager: layoutManager ?? new ActiveSelectionLayoutManager(),\n    });\n  }\n\n  /**\n   * @private\n   */\n  _shouldSetNestedCoords() {\n    return true;\n  }\n\n  /**\n   * @private\n   * @override we don't want the selection monitor to be active\n   */\n  __objectSelectionMonitor() {\n    //  noop\n  }\n\n  /**\n   * Adds objects with respect to {@link multiSelectionStacking}\n   * @param targets object to add to selection\n   */\n  multiSelectAdd(...targets: FabricObject[]) {\n    if (this.multiSelectionStacking === 'selection-order') {\n      this.add(...targets);\n    } else {\n      //  respect object stacking as it is on canvas\n      //  perf enhancement for large ActiveSelection: consider a binary search of `isInFrontOf`\n      targets.forEach((target) => {\n        const index = this._objects.findIndex((obj) => obj.isInFrontOf(target));\n        const insertAt =\n          index === -1\n            ? //  `target` is in front of all other objects\n              this.size()\n            : index;\n        this.insertAt(insertAt, target);\n      });\n    }\n  }\n\n  /**\n   * @override block ancestors/descendants of selected objects from being selected to prevent a circular object tree\n   */\n  canEnterGroup(object: FabricObject) {\n    if (\n      this.getObjects().some(\n        (o) => o.isDescendantOf(object) || object.isDescendantOf(o),\n      )\n    ) {\n      //  prevent circular object tree\n      log(\n        'error',\n        'ActiveSelection: circular object trees are not supported, this call has no effect',\n      );\n      return false;\n    }\n\n    return super.canEnterGroup(object);\n  }\n\n  /**\n   * Change an object so that it can be part of an active selection.\n   * this method is called by multiselectAdd from canvas code.\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    // This condition check that the object has currently a group, and the group\n    // is also its parent, meaning that is not in an active selection, but is\n    // in a normal group.\n    if (object.parent && object.parent === object.group) {\n      // Disconnect the object from the group functionalities, but keep the ref parent intact\n      // for later re-enter\n      object.parent._exitGroup(object);\n      // in this case the object is probably inside an active selection.\n    } else if (object.group && object.parent !== object.group) {\n      // in this case group.remove will also clear the old parent reference.\n      object.group.remove(object);\n    }\n    // enter the active selection from a render perspective\n    // the object will be in the objects array of both the ActiveSelection and the Group\n    // but referenced in the group's _activeObjects so that it won't be rendered twice.\n    this._enterGroup(object, removeParentTransform);\n  }\n\n  /**\n   * we want objects to retain their canvas ref when exiting instance\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    this._exitGroup(object, removeParentTransform);\n    // return to parent\n    object.parent && object.parent._enterGroup(object, true);\n  }\n\n  /**\n   * @private\n   * @param {'added'|'removed'} type\n   * @param {FabricObject[]} targets\n   */\n  _onAfterObjectsChange(type: 'added' | 'removed', targets: FabricObject[]) {\n    super._onAfterObjectsChange(type, targets);\n    const groups = new Set<Group>();\n    targets.forEach((object) => {\n      const { parent } = object;\n      parent && groups.add(parent);\n    });\n    if (type === LAYOUT_TYPE_REMOVED) {\n      //  invalidate groups' layout and mark as dirty\n      groups.forEach((group) => {\n        group._onAfterObjectsChange(LAYOUT_TYPE_ADDED, targets);\n      });\n    } else {\n      //  mark groups as dirty\n      groups.forEach((group) => {\n        group._set('dirty', true);\n      });\n    }\n  }\n\n  /**\n   * @override remove all objects\n   */\n  onDeselect() {\n    this.removeAll();\n    return false;\n  }\n\n  /**\n   * Returns string representation of a group\n   * @return {String}\n   */\n  toString() {\n    return `#<ActiveSelection: (${this.complexity()})>`;\n  }\n\n  /**\n   * Decide if the object should cache or not. The Active selection never caches\n   * @return {Boolean}\n   */\n  shouldCache() {\n    return false;\n  }\n\n  /**\n   * Check if this group or its parent group are caching, recursively up\n   * @return {Boolean}\n   */\n  isOnACache() {\n    return false;\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Object} [styleOverride] properties to override the object style\n   * @param {Object} [childrenOverride] properties to override the children overrides\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride?: ControlRenderingStyleOverride,\n    childrenOverride?: ControlRenderingStyleOverride,\n  ) {\n    ctx.save();\n    ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    const options = {\n      hasControls: false,\n      ...childrenOverride,\n      forActiveSelection: true,\n    };\n    for (let i = 0; i < this._objects.length; i++) {\n      this._objects[i]._renderControls(ctx, options);\n    }\n    super._renderControls(ctx, styleOverride);\n    ctx.restore();\n  }\n}\n\nclassRegistry.setClass(ActiveSelection);\nclassRegistry.setClass(ActiveSelection, 'activeSelection');\n", "/**\n * Canvas 2D filter backend.\n */\nimport type { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TPipelineResources } from './typedefs';\n\nexport class Canvas2dFilterBackend {\n  /**\n   * Experimental. This object is a sort of repository of help layers used to avoid\n   * of recreating them during frequent filtering. If you are previewing a filter with\n   * a slider you probably do not want to create help layers every filter step.\n   * in this object there will be appended some canvases, created once, resized sometimes\n   * cleared never. Clearing is left to the developer.\n   **/\n  resources: TPipelineResources = {};\n\n  /**\n   * Apply a set of filters against a source image and draw the filtered output\n   * to the provided destination canvas.\n   *\n   * @param {EnhancedFilter} filters The filter to apply.\n   * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\n   * @param {Number} sourceWidth The width of the source input.\n   * @param {Number} sourceHeight The height of the source input.\n   * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[],\n    sourceElement: CanvasImageSource,\n    sourceWidth: number,\n    sourceHeight: number,\n    targetCanvas: HTMLCanvasElement,\n  ): T2DPipelineState | void {\n    const ctx = targetCanvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\n    const imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n    const originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n    const pipelineState: T2DPipelineState = {\n      sourceWidth,\n      sourceHeight,\n      imageData,\n      originalEl: sourceElement,\n      originalImageData,\n      canvasEl: targetCanvas,\n      ctx,\n      filterBackend: this,\n    };\n    filters.forEach((filter) => {\n      filter.applyTo(pipelineState);\n    });\n    const { imageData: imageDataPostFilter } = pipelineState;\n    if (\n      imageDataPostFilter.width !== sourceWidth ||\n      imageDataPostFilter.height !== sourceHeight\n    ) {\n      targetCanvas.width = imageDataPostFilter.width;\n      targetCanvas.height = imageDataPostFilter.height;\n    }\n    ctx.putImageData(imageDataPostFilter, 0, 0);\n    return pipelineState;\n  }\n}\n", "import { config } from '../config';\nimport { createCanvasElementFor } from '../util/misc/dom';\nimport type {\n  TWebGLPipelineState,\n  TProgramCache,\n  TTextureCache,\n  TPipelineResources,\n} from './typedefs';\nimport type { BaseFilter } from './BaseFilter';\n\nexport class WebGLFilterBackend {\n  declare tileSize: number;\n\n  /**\n   * Define ...\n   **/\n  aPosition: Float32Array = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);\n\n  /**\n   * If GLPut data is the fastest operation, or if forced, this buffer will be used\n   * to transfer the data back in the 2d logic\n   **/\n  declare imageBuffer?: ArrayBuffer;\n\n  declare canvas: HTMLCanvasElement;\n\n  /**\n   * The Webgl context that will execute the operations for filtering\n   **/\n  declare gl: WebGLRenderingContext;\n\n  /**\n   * Keyed map for shader cache\n   **/\n  declare programCache: TProgramCache;\n\n  /**\n   * Keyed map for texture cache\n   **/\n  declare textureCache: TTextureCache;\n\n  /**\n   * Contains GPU info for debug\n   **/\n  declare gpuInfo: any;\n\n  /**\n   * Experimental. This object is a sort of repository of help layers used to avoid\n   * of recreating them during frequent filtering. If you are previewing a filter with\n   * a slider you probably do not want to create help layers every filter step.\n   * in this object there will be appended some canvases, created once, resized sometimes\n   * cleared never. Clearing is left to the developer.\n   **/\n  resources: TPipelineResources = {};\n\n  constructor({ tileSize = config.textureSize } = {}) {\n    this.tileSize = tileSize;\n    this.setupGLContext(tileSize, tileSize);\n    this.captureGPUInfo();\n  }\n\n  /**\n   * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\n   */\n  setupGLContext(width: number, height: number): void {\n    this.dispose();\n    this.createWebGLCanvas(width, height);\n  }\n\n  /**\n   * Create a canvas element and associated WebGL context and attaches them as\n   * class properties to the GLFilterBackend class.\n   */\n  createWebGLCanvas(width: number, height: number): void {\n    const canvas = createCanvasElementFor({ width, height });\n    const glOptions = {\n        alpha: true,\n        premultipliedAlpha: false,\n        depth: false,\n        stencil: false,\n        antialias: false,\n      },\n      gl = canvas.getContext('webgl', glOptions) as WebGLRenderingContext;\n\n    if (!gl) {\n      return;\n    }\n    gl.clearColor(0, 0, 0, 0);\n    // this canvas can fire webglcontextlost and webglcontextrestored\n    this.canvas = canvas;\n    this.gl = gl;\n  }\n\n  /**\n   * Attempts to apply the requested filters to the source provided, drawing the filtered output\n   * to the provided target canvas.\n   *\n   * @param {Array} filters The filters to apply.\n   * @param {TexImageSource} source The source to be filtered.\n   * @param {Number} width The width of the source input.\n   * @param {Number} height The height of the source input.\n   * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n   * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\n   * omitted, caching will be skipped.\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[],\n    source: TexImageSource,\n    width: number,\n    height: number,\n    targetCanvas: HTMLCanvasElement,\n    cacheKey?: string,\n  ): TWebGLPipelineState | undefined {\n    const gl = this.gl;\n    const ctx = targetCanvas.getContext('2d');\n    if (!gl || !ctx) {\n      return;\n    }\n    let cachedTexture;\n    if (cacheKey) {\n      cachedTexture = this.getCachedTexture(cacheKey, source);\n    }\n    const pipelineState: TWebGLPipelineState = {\n      originalWidth:\n        (source as HTMLImageElement).width ||\n        (source as HTMLImageElement).naturalWidth ||\n        0,\n      originalHeight:\n        (source as HTMLImageElement).height ||\n        (source as HTMLImageElement).naturalHeight ||\n        0,\n      sourceWidth: width,\n      sourceHeight: height,\n      destinationWidth: width,\n      destinationHeight: height,\n      context: gl,\n      sourceTexture: this.createTexture(\n        gl,\n        width,\n        height,\n        !cachedTexture ? source : undefined,\n      ),\n      targetTexture: this.createTexture(gl, width, height),\n      originalTexture:\n        cachedTexture ||\n        this.createTexture(\n          gl,\n          width,\n          height,\n          !cachedTexture ? source : undefined,\n        )!,\n      passes: filters.length,\n      webgl: true,\n      aPosition: this.aPosition,\n      programCache: this.programCache,\n      pass: 0,\n      filterBackend: this,\n      targetCanvas: targetCanvas,\n    };\n    const tempFbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\n    filters.forEach((filter: any) => {\n      filter && filter.applyTo(pipelineState);\n    });\n    resizeCanvasIfNeeded(pipelineState);\n    this.copyGLTo2D(gl, pipelineState);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.deleteTexture(pipelineState.sourceTexture);\n    gl.deleteTexture(pipelineState.targetTexture);\n    gl.deleteFramebuffer(tempFbo);\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    return pipelineState;\n  }\n\n  /**\n   * Detach event listeners, remove references, and clean up caches.\n   */\n  dispose() {\n    if (this.canvas) {\n      // we are disposing, we don't care about the fact\n      // that the canvas shouldn't be null.\n      // @ts-expect-error disposing\n      this.canvas = null;\n      // @ts-expect-error disposing\n      this.gl = null;\n    }\n    this.clearWebGLCaches();\n  }\n\n  /**\n   * Wipe out WebGL-related caches.\n   */\n  clearWebGLCaches() {\n    this.programCache = {};\n    this.textureCache = {};\n  }\n\n  /**\n   * Create a WebGL texture object.\n   *\n   * Accepts specific dimensions to initialize the texture to or a source image.\n   *\n   * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\n   * @param {number} width The width to initialize the texture at.\n   * @param {number} height The height to initialize the texture.\n   * @param {TexImageSource} textureImageSource A source for the texture data.\n   * @param {number} filter gl.NEAREST default or gl.LINEAR filters for the texture.\n   * This filter is very useful for LUTs filters. If you need interpolation use gl.LINEAR\n   * @returns {WebGLTexture}\n   */\n  createTexture(\n    gl: WebGLRenderingContext,\n    width: number,\n    height: number,\n    textureImageSource?: TexImageSource,\n    filter?:\n      | WebGLRenderingContextBase['NEAREST']\n      | WebGLRenderingContextBase['LINEAR'],\n  ) {\n    const {\n      NEAREST,\n      TEXTURE_2D,\n      RGBA,\n      UNSIGNED_BYTE,\n      CLAMP_TO_EDGE,\n      TEXTURE_MAG_FILTER,\n      TEXTURE_MIN_FILTER,\n      TEXTURE_WRAP_S,\n      TEXTURE_WRAP_T,\n    } = gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(TEXTURE_2D, texture);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_MAG_FILTER, filter || NEAREST);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, filter || NEAREST);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n    if (textureImageSource) {\n      gl.texImage2D(\n        TEXTURE_2D,\n        0,\n        RGBA,\n        RGBA,\n        UNSIGNED_BYTE,\n        textureImageSource,\n      );\n    } else {\n      gl.texImage2D(\n        TEXTURE_2D,\n        0,\n        RGBA,\n        width,\n        height,\n        0,\n        RGBA,\n        UNSIGNED_BYTE,\n        null,\n      );\n    }\n    return texture;\n  }\n\n  /**\n   * Can be optionally used to get a texture from the cache array\n   *\n   * If an existing texture is not found, a new texture is created and cached.\n   *\n   * @param {String} uniqueId A cache key to use to find an existing texture.\n   * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\n   * texture cache entry if one does not already exist.\n   */\n  getCachedTexture(\n    uniqueId: string,\n    textureImageSource: TexImageSource,\n    filter?:\n      | WebGLRenderingContextBase['NEAREST']\n      | WebGLRenderingContextBase['LINEAR'],\n  ): WebGLTexture | null {\n    const { textureCache } = this;\n    if (textureCache[uniqueId]) {\n      return textureCache[uniqueId];\n    } else {\n      const texture = this.createTexture(\n        this.gl,\n        (textureImageSource as HTMLImageElement).width,\n        (textureImageSource as HTMLImageElement).height,\n        textureImageSource,\n        filter,\n      );\n      if (texture) {\n        textureCache[uniqueId] = texture;\n      }\n      return texture;\n    }\n  }\n\n  /**\n   * Clear out cached resources related to a source image that has been\n   * filtered previously.\n   *\n   * @param {String} cacheKey The cache key provided when the source image was filtered.\n   */\n  evictCachesForKey(cacheKey: string) {\n    if (this.textureCache[cacheKey]) {\n      this.gl.deleteTexture(this.textureCache[cacheKey]);\n      delete this.textureCache[cacheKey];\n    }\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas.\n   *\n   * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\n   * desired output image appearing in the bottom-left corner of the WebGL canvas.\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  copyGLTo2D(gl: WebGLRenderingContext, pipelineState: TWebGLPipelineState) {\n    const glCanvas = gl.canvas,\n      targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ctx.translate(0, targetCanvas.height); // move it down again\n    ctx.scale(1, -1); // vertical flip\n    // where is my image on the big glcanvas?\n    const sourceY = glCanvas.height - targetCanvas.height;\n    ctx.drawImage(\n      glCanvas,\n      0,\n      sourceY,\n      targetCanvas.width,\n      targetCanvas.height,\n      0,\n      0,\n      targetCanvas.width,\n      targetCanvas.height,\n    );\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\n   * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  copyGLTo2DPutImageData(\n    this: Required<WebGLFilterBackend>,\n    gl: WebGLRenderingContext,\n    pipelineState: TWebGLPipelineState,\n  ) {\n    const targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d'),\n      dWidth = pipelineState.destinationWidth,\n      dHeight = pipelineState.destinationHeight,\n      numBytes = dWidth * dHeight * 4;\n    if (!ctx) {\n      return;\n    }\n    const u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\n    const u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\n\n    gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\n    const imgData = new ImageData(u8Clamped, dWidth, dHeight);\n    ctx.putImageData(imgData, 0, 0);\n  }\n\n  /**\n   * Attempt to extract GPU information strings from a WebGL context.\n   *\n   * Useful information when debugging or blacklisting specific GPUs.\n   *\n   * @returns {Object} A GPU info object with renderer and vendor strings.\n   */\n  captureGPUInfo() {\n    if (this.gpuInfo) {\n      return this.gpuInfo;\n    }\n    const gl = this.gl,\n      gpuInfo = { renderer: '', vendor: '' };\n    if (!gl) {\n      return gpuInfo;\n    }\n    const ext = gl.getExtension('WEBGL_debug_renderer_info');\n    if (ext) {\n      const renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\n      const vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\n      if (renderer) {\n        gpuInfo.renderer = renderer.toLowerCase();\n      }\n      if (vendor) {\n        gpuInfo.vendor = vendor.toLowerCase();\n      }\n    }\n    this.gpuInfo = gpuInfo;\n    return gpuInfo;\n  }\n}\n\nfunction resizeCanvasIfNeeded(pipelineState: TWebGLPipelineState): void {\n  const targetCanvas = pipelineState.targetCanvas,\n    width = targetCanvas.width,\n    height = targetCanvas.height,\n    dWidth = pipelineState.destinationWidth,\n    dHeight = pipelineState.destinationHeight;\n\n  if (width !== dWidth || height !== dHeight) {\n    targetCanvas.width = dWidth;\n    targetCanvas.height = dHeight;\n  }\n}\n", "import { config } from '../config';\nimport { getEnv } from '../env';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { Canvas2dFilterBackend } from './Canvas2dFilterBackend';\nimport { WebGLFilterBackend } from './WebGLFilterBackend';\n\nexport type FilterBackend = WebGLFilterBackend | Canvas2dFilterBackend;\n\nlet filterBackend: FilterBackend;\n\n/**\n * Verifies if it is possible to initialize webgl or fallback on a canvas2d filtering backend\n */\nexport function initFilterBackend(): FilterBackend {\n  const { WebGLProbe } = getEnv();\n  WebGLProbe.queryWebGL(createCanvasElement());\n  if (config.enableGLFiltering && WebGLProbe.isSupported(config.textureSize)) {\n    return new WebGLFilterBackend({ tileSize: config.textureSize });\n  } else {\n    return new Canvas2dFilterBackend();\n  }\n}\n\n/**\n * Get the current fabricJS filter backend  or initialize one if not available yet\n * @param [strict] pass `true` to create the backend if it wasn't created yet (default behavior),\n * pass `false` to get the backend ref without mutating it\n */\nexport function getFilterBackend(strict = true): FilterBackend {\n  if (!filterBackend && strict) {\n    filterBackend = initFilterBackend();\n  }\n  return filterBackend;\n}\n\nexport function setFilterBackend(backend: FilterBackend) {\n  filterBackend = backend;\n}\n", "import { getFabricDocument, getEnv } from '../env';\nimport type { BaseFilter } from '../filters/BaseFilter';\nimport { getFilterBackend } from '../filters/FilterBackend';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type {\n  TClassProperties,\n  TCrossOrigin,\n  TSize,\n  Abortable,\n  TOptions,\n} from '../typedefs';\nimport { uid } from '../util/internals/uid';\nimport { createCanvasElementFor } from '../util/misc/dom';\nimport { findScaleToCover, findScaleToFit } from '../util/misc/findScaleTo';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n  loadImage,\n} from '../util/misc/objectEnlive';\nimport { parsePreserveAspectRatioAttribute } from '../util/misc/svgParsing';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { WebGLFilterBackend } from '../filters/WebGLFilterBackend';\nimport { FILL, NONE } from '../constants';\nimport { getDocumentFromElement } from '../util/dom_misc';\nimport type { CSSRules } from '../parser/typedefs';\nimport type { Resize } from '../filters/Resize';\nimport type { TCachedFabricObject } from './Object/Object';\nimport { log } from '../util/internals/console';\n\n// @todo Would be nice to have filtering code not imported directly.\n\nexport type ImageSource =\n  | HTMLImageElement\n  | HTMLVideoElement\n  | HTMLCanvasElement;\n\ninterface UniqueImageProps {\n  srcFromAttribute: boolean;\n  minimumScaleTrigger: number;\n  cropX: number;\n  cropY: number;\n  imageSmoothing: boolean;\n  filters: BaseFilter<string, Record<string, any>>[];\n  resizeFilter?: Resize;\n}\n\nexport const imageDefaultValues: Partial<TClassProperties<FabricImage>> = {\n  strokeWidth: 0,\n  srcFromAttribute: false,\n  minimumScaleTrigger: 0.5,\n  cropX: 0,\n  cropY: 0,\n  imageSmoothing: true,\n};\n\nexport interface SerializedImageProps extends SerializedObjectProps {\n  src: string;\n  crossOrigin: TCrossOrigin;\n  filters: any[];\n  resizeFilter?: any;\n  cropX: number;\n  cropY: number;\n}\n\nexport interface ImageProps extends FabricObjectProps, UniqueImageProps {}\n\nconst IMAGE_PROPS = ['cropX', 'cropY'] as const;\n\n/**\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\n */\nexport class FabricImage<\n    Props extends TOptions<ImageProps> = Partial<ImageProps>,\n    SProps extends SerializedImageProps = SerializedImageProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements ImageProps\n{\n  /**\n   * When calling {@link FabricImage.getSrc}, return value from element src with `element.getAttribute('src')`.\n   * This allows for relative urls as image src.\n   * @since 2.7.0\n   * @type Boolean\n   * @default false\n   */\n  declare srcFromAttribute: boolean;\n\n  /**\n   * private\n   * contains last value of scaleX to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleX = 1;\n\n  /**\n   * private\n   * contains last value of scaleY to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleY = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingX = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingY = 1;\n\n  /**\n   * minimum scale factor under which any resizeFilter is triggered to resize the image\n   * 0 will disable the automatic resize. 1 will trigger automatically always.\n   * number bigger than 1 are not implemented yet.\n   * @type Number\n   */\n  declare minimumScaleTrigger: number;\n\n  /**\n   * key used to retrieve the texture representing this image\n   * @since 2.0.0\n   * @type String\n   * @default\n   */\n  declare cacheKey: string;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropX: number;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropY: number;\n\n  /**\n   * Indicates whether this canvas will use image smoothing when painting this image.\n   * Also influence if the cacheCanvas for this image uses imageSmoothing\n   * @since 4.0.0-beta.11\n   * @type Boolean\n   * @default\n   */\n  declare imageSmoothing: boolean;\n\n  declare preserveAspectRatio: string;\n\n  protected declare src: string;\n\n  declare filters: BaseFilter<string, Record<string, any>>[];\n  declare resizeFilter: Resize;\n\n  declare _element: ImageSource;\n  declare _filteredEl?: HTMLCanvasElement;\n  declare _originalElement: ImageSource;\n\n  static type = 'Image';\n\n  static cacheProperties = [...cacheProperties, ...IMAGE_PROPS];\n\n  static ownDefaults = imageDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...FabricImage.ownDefaults,\n    };\n  }\n  /**\n   * Constructor\n   * Image can be initialized with any canvas drawable or a string.\n   * The string should be a url and will be loaded as an image.\n   * Canvas and Image element work out of the box, while videos require extra code to work.\n   * Please check video element events for seeking.\n   * @param {ImageSource | string} element Image element\n   * @param {Object} [options] Options object\n   */\n  constructor(elementId: string, options?: Props);\n  constructor(element: ImageSource, options?: Props);\n  constructor(arg0: ImageSource | string, options?: Props) {\n    super();\n    this.filters = [];\n    Object.assign(this, FabricImage.ownDefaults);\n    this.setOptions(options);\n    this.cacheKey = `texture${uid()}`;\n    this.setElement(\n      typeof arg0 === 'string'\n        ? ((\n            (this.canvas && getDocumentFromElement(this.canvas.getElement())) ||\n            getFabricDocument()\n          ).getElementById(arg0) as ImageSource)\n        : arg0,\n      options,\n    );\n  }\n\n  /**\n   * Returns image element which this instance if based on\n   */\n  getElement() {\n    return this._element;\n  }\n\n  /**\n   * Sets image element for this instance to a specified one.\n   * If filters defined they are applied to new image.\n   * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n   * @param {HTMLImageElement} element\n   * @param {Partial<TSize>} [size] Options object\n   */\n  setElement(element: ImageSource, size: Partial<TSize> = {}) {\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._element = element;\n    this._originalElement = element;\n    this._setWidthHeight(size);\n    element.classList?.add(FabricImage.CSS_CANVAS);\n    if (this.filters.length !== 0) {\n      this.applyFilters();\n    }\n    // resizeFilters work on the already filtered copy.\n    // we need to apply resizeFilters AFTER normal filters.\n    // applyResizeFilters is run more often than normal filters\n    // and is triggered by user interactions rather than dev code\n    if (this.resizeFilter) {\n      this.applyResizeFilters();\n    }\n  }\n\n  /**\n   * Delete a single texture if in webgl mode\n   */\n  removeTexture(key: string) {\n    const backend = getFilterBackend(false);\n    if (backend instanceof WebGLFilterBackend) {\n      backend.evictCachesForKey(key);\n    }\n  }\n\n  /**\n   * Delete textures, reference to elements and eventually JSDOM cleanup\n   */\n  dispose() {\n    super.dispose();\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._cacheContext = null;\n    (\n      ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'] as const\n    ).forEach((elementKey) => {\n      const el = this[elementKey];\n      el && getEnv().dispose(el);\n      // @ts-expect-error disposing\n      this[elementKey] = undefined;\n    });\n  }\n\n  /**\n   * Get the crossOrigin value (of the corresponding image element)\n   */\n  getCrossOrigin(): string | null {\n    return (\n      this._originalElement &&\n      ((this._originalElement as any).crossOrigin || null)\n    );\n  }\n\n  /**\n   * Returns original size of an image\n   */\n  getOriginalSize() {\n    const element = this.getElement() as any;\n    if (!element) {\n      return {\n        width: 0,\n        height: 0,\n      };\n    }\n    return {\n      width: element.naturalWidth || element.width,\n      height: element.naturalHeight || element.height,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _stroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n    const w = this.width / 2,\n      h = this.height / 2;\n    ctx.beginPath();\n    ctx.moveTo(-w, -h);\n    ctx.lineTo(w, -h);\n    ctx.lineTo(w, h);\n    ctx.lineTo(-w, h);\n    ctx.lineTo(-w, -h);\n    ctx.closePath();\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    const filters: Record<string, any>[] = [];\n    this.filters.forEach((filterObj) => {\n      filterObj && filters.push(filterObj.toObject());\n    });\n    return {\n      ...super.toObject([...IMAGE_PROPS, ...propertiesToInclude]),\n      src: this.getSrc(),\n      crossOrigin: this.getCrossOrigin(),\n      filters,\n      ...(this.resizeFilter\n        ? { resizeFilter: this.resizeFilter.toObject() }\n        : {}),\n    };\n  }\n\n  /**\n   * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,height.\n   * @return {Boolean}\n   */\n  hasCrop() {\n    return (\n      !!this.cropX ||\n      !!this.cropY ||\n      this.width < this._element.width ||\n      this.height < this._element.height\n    );\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {string[]} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const imageMarkup: string[] = [],\n      element = this._element,\n      x = -this.width / 2,\n      y = -this.height / 2;\n    let svgString: string[] = [],\n      strokeSvg: string[] = [],\n      clipPath = '',\n      imageRendering = '';\n    if (!element) {\n      return [];\n    }\n    if (this.hasCrop()) {\n      const clipPathId = uid();\n      svgString.push(\n        '<clipPath id=\"imageCrop_' + clipPathId + '\">\\n',\n        '\\t<rect x=\"' +\n          x +\n          '\" y=\"' +\n          y +\n          '\" width=\"' +\n          this.width +\n          '\" height=\"' +\n          this.height +\n          '\" />\\n',\n        '</clipPath>\\n',\n      );\n      clipPath = ' clip-path=\"url(#imageCrop_' + clipPathId + ')\" ';\n    }\n    if (!this.imageSmoothing) {\n      imageRendering = ' image-rendering=\"optimizeSpeed\"';\n    }\n    imageMarkup.push(\n      '\\t<image ',\n      'COMMON_PARTS',\n      `xlink:href=\"${this.getSvgSrc(true)}\" x=\"${x - this.cropX}\" y=\"${\n        y - this.cropY\n        // we're essentially moving origin of transformation from top/left corner to the center of the shape\n        // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\n        // so that object's center aligns with container's left/top\n      }\" width=\"${\n        element.width || (element as HTMLImageElement).naturalWidth\n      }\" height=\"${\n        element.height || (element as HTMLImageElement).naturalHeight\n      }\"${imageRendering}${clipPath}></image>\\n`,\n    );\n\n    if (this.stroke || this.strokeDashArray) {\n      const origFill = this.fill;\n      this.fill = null;\n      strokeSvg = [\n        `\\t<rect x=\"${x}\" y=\"${y}\" width=\"${this.width}\" height=\"${\n          this.height\n        }\" style=\"${this.getSvgStyles()}\" />\\n`,\n      ];\n      this.fill = origFill;\n    }\n    if (this.paintFirst !== FILL) {\n      svgString = svgString.concat(strokeSvg, imageMarkup);\n    } else {\n      svgString = svgString.concat(imageMarkup, strokeSvg);\n    }\n    return svgString;\n  }\n\n  /**\n   * Returns source of an image\n   * @param {Boolean} filtered indicates if the src is needed for svg\n   * @return {String} Source of an image\n   */\n  getSrc(filtered?: boolean): string {\n    const element = filtered ? this._element : this._originalElement;\n    if (element) {\n      if ((element as HTMLCanvasElement).toDataURL) {\n        return (element as HTMLCanvasElement).toDataURL();\n      }\n\n      if (this.srcFromAttribute) {\n        return element.getAttribute('src') || '';\n      } else {\n        return (element as HTMLImageElement).src;\n      }\n    } else {\n      return this.src || '';\n    }\n  }\n\n  /**\n   * Alias for getSrc\n   * @param filtered\n   * @deprecated\n   */\n  getSvgSrc(filtered?: boolean) {\n    return this.getSrc(filtered);\n  }\n\n  /**\n   * Loads and sets source of an image\\\n   * **IMPORTANT**: It is recommended to abort loading tasks before calling this method to prevent race conditions and unnecessary networking\n   * @param {String} src Source string (URL)\n   * @param {LoadImageOptions} [options] Options object\n   */\n  setSrc(src: string, { crossOrigin, signal }: LoadImageOptions = {}) {\n    return loadImage(src, { crossOrigin, signal }).then((img) => {\n      typeof crossOrigin !== 'undefined' && this.set({ crossOrigin });\n      this.setElement(img);\n    });\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of an instance\n   */\n  toString() {\n    return `#<Image: { src: \"${this.getSrc()}\" }>`;\n  }\n\n  applyResizeFilters() {\n    const filter = this.resizeFilter,\n      minimumScale = this.minimumScaleTrigger,\n      objectScale = this.getTotalObjectScaling(),\n      scaleX = objectScale.x,\n      scaleY = objectScale.y,\n      elementToFilter = this._filteredEl || this._originalElement;\n    if (this.group) {\n      this.set('dirty', true);\n    }\n    if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {\n      this._element = elementToFilter;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      this._lastScaleX = scaleX;\n      this._lastScaleY = scaleY;\n      return;\n    }\n    const canvasEl = createCanvasElementFor(elementToFilter),\n      { width, height } = elementToFilter;\n    this._element = canvasEl;\n    this._lastScaleX = filter.scaleX = scaleX;\n    this._lastScaleY = filter.scaleY = scaleY;\n    getFilterBackend().applyFilters(\n      [filter],\n      elementToFilter,\n      width,\n      height,\n      this._element,\n    );\n    this._filterScalingX = canvasEl.width / this._originalElement.width;\n    this._filterScalingY = canvasEl.height / this._originalElement.height;\n  }\n\n  /**\n   * Applies filters assigned to this image (from \"filters\" array) or from filter param\n   * @method applyFilters\n   * @param {Array} filters to be applied\n   * @param {Boolean} forResizing specify if the filter operation is a resize operation\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[] = this.filters || [],\n  ) {\n    filters = filters.filter((filter) => filter && !filter.isNeutralState());\n    this.set('dirty', true);\n\n    // needs to clear out or WEBGL will not resize correctly\n    this.removeTexture(`${this.cacheKey}_filtered`);\n\n    if (filters.length === 0) {\n      this._element = this._originalElement;\n      // this is unsafe and needs to be rethinkend\n      this._filteredEl = undefined;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      return;\n    }\n\n    const imgElement = this._originalElement,\n      sourceWidth =\n        (imgElement as HTMLImageElement).naturalWidth || imgElement.width,\n      sourceHeight =\n        (imgElement as HTMLImageElement).naturalHeight || imgElement.height;\n\n    if (this._element === this._originalElement) {\n      // if the _element a reference to _originalElement\n      // we need to create a new element to host the filtered pixels\n      const canvasEl = createCanvasElementFor({\n        width: sourceWidth,\n        height: sourceHeight,\n      });\n      this._element = canvasEl;\n      this._filteredEl = canvasEl;\n    } else if (this._filteredEl) {\n      // if the _element is it own element,\n      // and we also have a _filteredEl, then we clean up _filteredEl\n      // and we assign it to _element.\n      // in this way we invalidate the eventual old resize filtered element\n      this._element = this._filteredEl;\n      this._filteredEl\n        .getContext('2d')!\n        .clearRect(0, 0, sourceWidth, sourceHeight);\n      // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\n      this._lastScaleX = 1;\n      this._lastScaleY = 1;\n    }\n    getFilterBackend().applyFilters(\n      filters,\n      this._originalElement,\n      sourceWidth,\n      sourceHeight,\n      this._element as HTMLCanvasElement,\n      this.cacheKey,\n    );\n    if (\n      this._originalElement.width !== this._element.width ||\n      this._originalElement.height !== this._element.height\n    ) {\n      this._filterScalingX = this._element.width / this._originalElement.width;\n      this._filterScalingY =\n        this._element.height / this._originalElement.height;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\n      this.applyResizeFilters();\n    }\n    this._stroke(ctx);\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * it will set the imageSmoothing for the draw operation\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(\n    this: TCachedFabricObject<FabricImage>,\n    ctx: CanvasRenderingContext2D,\n  ) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    super.drawCacheOnCanvas(ctx);\n  }\n\n  /**\n   * Decide if the FabricImage should cache or not. Create its own cache level\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * This is the special Image version where we would like to avoid caching where possible.\n   * Essentially images do not benefit from caching. They may require caching, and in that\n   * case we do it. Also caching an image usually ends in a loss of details.\n   * A full performance audit should be done.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    return this.needsItsOwnCache();\n  }\n\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    const elementToDraw = this._element;\n    if (!elementToDraw) {\n      return;\n    }\n    const scaleX = this._filterScalingX,\n      scaleY = this._filterScalingY,\n      w = this.width,\n      h = this.height,\n      // crop values cannot be lesser than 0.\n      cropX = Math.max(this.cropX, 0),\n      cropY = Math.max(this.cropY, 0),\n      elWidth =\n        (elementToDraw as HTMLImageElement).naturalWidth || elementToDraw.width,\n      elHeight =\n        (elementToDraw as HTMLImageElement).naturalHeight ||\n        elementToDraw.height,\n      sX = cropX * scaleX,\n      sY = cropY * scaleY,\n      // the width height cannot exceed element width/height, starting from the crop offset.\n      sW = Math.min(w * scaleX, elWidth - sX),\n      sH = Math.min(h * scaleY, elHeight - sY),\n      x = -w / 2,\n      y = -h / 2,\n      maxDestW = Math.min(w, elWidth / scaleX - cropX),\n      maxDestH = Math.min(h, elHeight / scaleY - cropY);\n\n    elementToDraw &&\n      ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, maxDestW, maxDestH);\n  }\n\n  /**\n   * needed to check if image needs resize\n   * @private\n   */\n  _needsResize() {\n    const scale = this.getTotalObjectScaling();\n    return scale.x !== this._lastScaleX || scale.y !== this._lastScaleY;\n  }\n\n  /**\n   * @private\n   * @deprecated unused\n   */\n  _resetWidthHeight() {\n    this.set(this.getOriginalSize());\n  }\n\n  /**\n   * @private\n   * Set the width and the height of the image object, using the element or the\n   * options.\n   */\n  _setWidthHeight({ width, height }: Partial<TSize> = {}) {\n    const size = this.getOriginalSize();\n    this.width = width || size.width;\n    this.height = height || size.height;\n  }\n\n  /**\n   * Calculate offset for center and scale factor for the image in order to respect\n   * the preserveAspectRatio attribute\n   * @private\n   */\n  parsePreserveAspectRatioAttribute() {\n    const pAR = parsePreserveAspectRatioAttribute(\n        this.preserveAspectRatio || '',\n      ),\n      pWidth = this.width,\n      pHeight = this.height,\n      parsedAttributes = { width: pWidth, height: pHeight };\n    let rWidth = this._element.width,\n      rHeight = this._element.height,\n      scaleX = 1,\n      scaleY = 1,\n      offsetLeft = 0,\n      offsetTop = 0,\n      cropX = 0,\n      cropY = 0,\n      offset;\n\n    if (pAR && (pAR.alignX !== NONE || pAR.alignY !== NONE)) {\n      if (pAR.meetOrSlice === 'meet') {\n        scaleX = scaleY = findScaleToFit(this._element, parsedAttributes);\n        offset = (pWidth - rWidth * scaleX) / 2;\n        if (pAR.alignX === 'Min') {\n          offsetLeft = -offset;\n        }\n        if (pAR.alignX === 'Max') {\n          offsetLeft = offset;\n        }\n        offset = (pHeight - rHeight * scaleY) / 2;\n        if (pAR.alignY === 'Min') {\n          offsetTop = -offset;\n        }\n        if (pAR.alignY === 'Max') {\n          offsetTop = offset;\n        }\n      }\n      if (pAR.meetOrSlice === 'slice') {\n        scaleX = scaleY = findScaleToCover(this._element, parsedAttributes);\n        offset = rWidth - pWidth / scaleX;\n        if (pAR.alignX === 'Mid') {\n          cropX = offset / 2;\n        }\n        if (pAR.alignX === 'Max') {\n          cropX = offset;\n        }\n        offset = rHeight - pHeight / scaleY;\n        if (pAR.alignY === 'Mid') {\n          cropY = offset / 2;\n        }\n        if (pAR.alignY === 'Max') {\n          cropY = offset;\n        }\n        rWidth = pWidth / scaleX;\n        rHeight = pHeight / scaleY;\n      }\n    } else {\n      scaleX = pWidth / rWidth;\n      scaleY = pHeight / rHeight;\n    }\n    return {\n      width: rWidth,\n      height: rHeight,\n      scaleX,\n      scaleY,\n      offsetLeft,\n      offsetTop,\n      cropX,\n      cropY,\n    };\n  }\n\n  /**\n   * Default CSS class name for canvas\n   * Will be removed from fabric 7\n   * @static\n   * @deprecated\n   * @type String\n   * @default\n   */\n  static CSS_CANVAS = 'canvas-img';\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricImage.fromElement})\n   * @static\n   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'width',\n    'height',\n    'preserveAspectRatio',\n    'xlink:href',\n    'href',\n    'crossOrigin',\n    'image-rendering',\n  ];\n\n  /**\n   * Creates an instance of FabricImage from its object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricImage>}\n   */\n  static fromObject<T extends TOptions<SerializedImageProps>>(\n    { filters: f, resizeFilter: rf, src, crossOrigin, type, ...object }: T,\n    options?: Abortable,\n  ) {\n    return Promise.all([\n      loadImage(src!, { ...options, crossOrigin }),\n      f && enlivenObjects<BaseFilter<string>>(f, options),\n      // TODO: redundant - handled by enlivenObjectEnlivables\n      rf && enlivenObjects<BaseFilter<'Resize'>>([rf], options),\n      enlivenObjectEnlivables(object, options),\n    ]).then(([el, filters = [], [resizeFilter] = [], hydratedProps = {}]) => {\n      return new this(el, {\n        ...object,\n        // TODO: this creates a difference between image creation and restoring from JSON\n        src,\n        filters,\n        resizeFilter,\n        ...hydratedProps,\n      });\n    });\n  }\n\n  /**\n   * Creates an instance of Image from an URL string\n   * @static\n   * @param {String} url URL to create an image from\n   * @param {LoadImageOptions} [options] Options object\n   * @returns {Promise<FabricImage>}\n   */\n  static fromURL<T extends TOptions<ImageProps>>(\n    url: string,\n    { crossOrigin = null, signal }: LoadImageOptions = {},\n    imageOptions?: T,\n  ): Promise<FabricImage> {\n    return loadImage(url, { crossOrigin, signal }).then(\n      (img) => new this(img, imageOptions),\n    );\n  }\n\n  /**\n   * Returns {@link FabricImage} instance from an SVG element\n   * @static\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @param {Function} callback Callback to execute when Image object is created\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable = {},\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n    return this.fromURL(\n      parsedAttributes['xlink:href'] || parsedAttributes['href'],\n      options,\n      parsedAttributes,\n    ).catch((err) => {\n      log('log', 'Unable to parse Image', err);\n      return null;\n    });\n  }\n}\n\nclassRegistry.setClass(FabricImage);\nclassRegistry.setSVGClass(FabricImage);\n", "import { svgNS } from './constants';\nimport {\n  parsePreserveAspectRatioAttribute,\n  parseUnit,\n} from '../util/misc/svgParsing';\nimport { svgViewBoxElementsRegEx, reViewBoxAttrValue } from './constants';\nimport { NONE } from '../constants';\n\nexport type ParsedViewboxTransform = Partial<{\n  width: number;\n  height: number;\n  minX: number;\n  minY: number;\n  viewBoxWidth: number;\n  viewBoxHeight: number;\n}>;\n\n/**\n * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\n */\nexport function applyViewboxTransform(\n  element: Element,\n): ParsedViewboxTransform {\n  if (!svgViewBoxElementsRegEx.test(element.nodeName)) {\n    return {};\n  }\n  const viewBoxAttr: string | null = element.getAttribute('viewBox');\n  let scaleX = 1;\n  let scaleY = 1;\n  let minX = 0;\n  let minY = 0;\n  let matrix;\n  let el;\n  const widthAttr = element.getAttribute('width');\n  const heightAttr = element.getAttribute('height');\n  const x = element.getAttribute('x') || 0;\n  const y = element.getAttribute('y') || 0;\n  const goodViewbox = viewBoxAttr && reViewBoxAttrValue.test(viewBoxAttr);\n  const missingViewBox = !goodViewbox;\n  const missingDimAttr =\n    !widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%';\n\n  let translateMatrix = '';\n  let widthDiff = 0;\n  let heightDiff = 0;\n\n  if (missingViewBox) {\n    if (\n      (x || y) &&\n      element.parentNode &&\n      element.parentNode.nodeName !== '#document'\n    ) {\n      translateMatrix =\n        ' translate(' + parseUnit(x || '0') + ' ' + parseUnit(y || '0') + ') ';\n      matrix = (element.getAttribute('transform') || '') + translateMatrix;\n      element.setAttribute('transform', matrix);\n      element.removeAttribute('x');\n      element.removeAttribute('y');\n    }\n  }\n\n  if (missingViewBox && missingDimAttr) {\n    return {\n      width: 0,\n      height: 0,\n    };\n  }\n\n  const parsedDim: ParsedViewboxTransform = {\n    width: 0,\n    height: 0,\n  };\n\n  if (missingViewBox) {\n    parsedDim.width = parseUnit(widthAttr!);\n    parsedDim.height = parseUnit(heightAttr!);\n    // set a transform for elements that have x y and are inner(only) SVGs\n    return parsedDim;\n  }\n\n  const pasedViewBox = viewBoxAttr.match(reViewBoxAttrValue)!;\n  minX = -parseFloat(pasedViewBox[1]);\n  minY = -parseFloat(pasedViewBox[2]);\n  const viewBoxWidth = parseFloat(pasedViewBox[3]);\n  const viewBoxHeight = parseFloat(pasedViewBox[4]);\n  parsedDim.minX = minX;\n  parsedDim.minY = minY;\n  parsedDim.viewBoxWidth = viewBoxWidth;\n  parsedDim.viewBoxHeight = viewBoxHeight;\n  if (!missingDimAttr) {\n    parsedDim.width = parseUnit(widthAttr);\n    parsedDim.height = parseUnit(heightAttr);\n    scaleX = parsedDim.width / viewBoxWidth;\n    scaleY = parsedDim.height / viewBoxHeight;\n  } else {\n    parsedDim.width = viewBoxWidth;\n    parsedDim.height = viewBoxHeight;\n  }\n\n  // default is to preserve aspect ratio\n  const preserveAspectRatio = parsePreserveAspectRatioAttribute(\n    element.getAttribute('preserveAspectRatio') || '',\n  );\n  if (preserveAspectRatio.alignX !== NONE) {\n    //translate all container for the effect of Mid, Min, Max\n    if (preserveAspectRatio.meetOrSlice === 'meet') {\n      scaleY = scaleX = scaleX > scaleY ? scaleY : scaleX;\n      // calculate additional translation to move the viewbox\n    }\n    if (preserveAspectRatio.meetOrSlice === 'slice') {\n      scaleY = scaleX = scaleX > scaleY ? scaleX : scaleY;\n      // calculate additional translation to move the viewbox\n    }\n    widthDiff = parsedDim.width - viewBoxWidth * scaleX;\n    heightDiff = parsedDim.height - viewBoxHeight * scaleX;\n    if (preserveAspectRatio.alignX === 'Mid') {\n      widthDiff /= 2;\n    }\n    if (preserveAspectRatio.alignY === 'Mid') {\n      heightDiff /= 2;\n    }\n    if (preserveAspectRatio.alignX === 'Min') {\n      widthDiff = 0;\n    }\n    if (preserveAspectRatio.alignY === 'Min') {\n      heightDiff = 0;\n    }\n  }\n\n  if (\n    scaleX === 1 &&\n    scaleY === 1 &&\n    minX === 0 &&\n    minY === 0 &&\n    x === 0 &&\n    y === 0\n  ) {\n    return parsedDim;\n  }\n  if ((x || y) && element.parentNode!.nodeName !== '#document') {\n    translateMatrix =\n      ' translate(' + parseUnit(x || '0') + ' ' + parseUnit(y || '0') + ') ';\n  }\n\n  matrix =\n    translateMatrix +\n    ' matrix(' +\n    scaleX +\n    ' 0' +\n    ' 0 ' +\n    scaleY +\n    ' ' +\n    (minX * scaleX + widthDiff) +\n    ' ' +\n    (minY * scaleY + heightDiff) +\n    ') ';\n  // seems unused.\n  // parsedDim.viewboxTransform = parseTransformAttribute(matrix);\n  if (element.nodeName === 'svg') {\n    el = element.ownerDocument.createElementNS(svgNS, 'g');\n    // element.firstChild != null\n    while (element.firstChild) {\n      el.appendChild(element.firstChild);\n    }\n    element.appendChild(el);\n  } else {\n    el = element;\n    el.removeAttribute('x');\n    el.removeAttribute('y');\n    matrix = el.getAttribute('transform') + matrix;\n  }\n  el.setAttribute('transform', matrix);\n  return parsedDim;\n}\n", "export const getTagName = (node: Element) => node.tagName.replace('svg:', '');\n", "import { svgInvalidAncestors } from './constants';\nimport { getSvgRegex } from './getSvgRegex';\nimport { getTagName } from './getTagName';\n\nconst svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);\n\nexport function hasInvalidAncestor(element: Element) {\n  let _element: Element | null = element;\n  while (_element && (_element = _element.parentElement)) {\n    if (\n      _element &&\n      _element.nodeName &&\n      svgInvalidAncestorsRegEx.test(getTagName(_element)) &&\n      !_element.getAttribute('instantiated_by_use')\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n", "export function getMultipleNodes(\n  doc: Document,\n  nodeNames: string[],\n): Element[] {\n  let nodeName,\n    nodeArray: Element[] = [],\n    nodeList,\n    i,\n    len;\n  for (i = 0, len = nodeNames.length; i < len; i++) {\n    nodeName = nodeNames[i];\n    nodeList = doc.getElementsByTagNameNS(\n      'http://www.w3.org/2000/svg',\n      nodeName,\n    );\n    nodeArray = nodeArray.concat(Array.from(nodeList));\n  }\n  return nodeArray;\n}\n", "const gradientsAttrs = [\n  'gradientTransform',\n  'x1',\n  'x2',\n  'y1',\n  'y2',\n  'gradientUnits',\n  'cx',\n  'cy',\n  'r',\n  'fx',\n  'fy',\n];\nconst xlinkAttr = 'xlink:href';\n\nexport function recursivelyParseGradientsXlink(\n  doc: Document,\n  gradient: Element,\n) {\n  const xLink = gradient.getAttribute(xlinkAttr)?.slice(1) || '',\n    referencedGradient = doc.getElementById(xLink);\n  if (referencedGradient && referencedGradient.getAttribute(xlinkAttr)) {\n    recursivelyParseGradientsXlink(doc, referencedGradient as Element);\n  }\n  if (referencedGradient) {\n    gradientsAttrs.forEach((attr) => {\n      const value = referencedGradient.getAttribute(attr);\n      if (!gradient.hasAttribute(attr) && value) {\n        gradient.setAttribute(attr, value);\n      }\n    });\n    if (!gradient.children.length) {\n      const referenceClone = referencedGradient.cloneNode(true);\n      while (referenceClone.firstChild) {\n        gradient.appendChild(referenceClone.firstChild);\n      }\n    }\n  }\n  gradient.removeAttribute(xlinkAttr);\n}\n", "import { getMultipleNodes } from './getMultipleNodes';\nimport { recursivelyParseGradientsXlink } from './recursivelyParseGradientsXlink';\n\nconst tagArray = [\n  'linearGradient',\n  'radialGradient',\n  'svg:linearGradient',\n  'svg:radialGradient',\n];\n\n/**\n * Parses an SVG document, returning all of the gradient declarations found in it\n * @param {SVGDocument} doc SVG document to parse\n * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\n */\nexport function getGradientDefs(\n  doc: Document,\n): Record<string, SVGGradientElement> {\n  const elList = getMultipleNodes(doc, tagArray);\n  const gradientDefs: Record<string, SVGGradientElement> = {};\n  let j = elList.length;\n  while (j--) {\n    const el = elList[j];\n    if (el.getAttribute('xlink:href')) {\n      recursivelyParseGradientsXlink(doc, el);\n    }\n    const id = el.getAttribute('id');\n    if (id) {\n      gradientDefs[id] = el as SVGGradientElement;\n    }\n  }\n  return gradientDefs;\n}\n", "import type { CSSRules } from './typedefs';\n\n/**\n * Returns CSS rules for a given SVG document\n * @param {HTMLElement} doc SVG document to parse\n * @return {Object} CSS rules of this document\n */\nexport function getCSSRules(doc: Document) {\n  const styles = doc.getElementsByTagName('style');\n  let i;\n  let len;\n  const allRules: CSSRules = {};\n\n  // very crude parsing of style contents\n  for (i = 0, len = styles.length; i < len; i++) {\n    const styleContents = (styles[i].textContent || '').replace(\n      // remove comments\n      /\\/\\*[\\s\\S]*?\\*\\//g,\n      '',\n    );\n\n    if (styleContents.trim() === '') {\n      continue;\n    }\n    // recovers all the rule in this form `body { style code... }`\n    // rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\n    styleContents\n      .split('}')\n      // remove empty rules and remove everything if we didn't split in at least 2 pieces\n      .filter((rule, index, array) => array.length > 1 && rule.trim())\n      // at this point we have hopefully an array of rules `body { style code... `\n      .forEach((rule) => {\n        // if there is more than one opening bracket and the rule starts with '@', it is likely\n        // a nested at-rule like @media, @supports, @scope, etc. Ignore these as the code below\n        // can not handle it.\n        if (\n          (rule.match(/{/g) || []).length > 1 &&\n          rule.trim().startsWith('@')\n        ) {\n          return;\n        }\n\n        const match = rule.split('{'),\n          ruleObj: Record<string, string> = {},\n          declaration = match[1].trim(),\n          propertyValuePairs = declaration.split(';').filter(function (pair) {\n            return pair.trim();\n          });\n\n        for (i = 0, len = propertyValuePairs.length; i < len; i++) {\n          const pair = propertyValuePairs[i].split(':'),\n            property = pair[0].trim(),\n            value = pair[1].trim();\n          ruleObj[property] = value;\n        }\n        rule = match[0].trim();\n        rule.split(',').forEach((_rule) => {\n          _rule = _rule.replace(/^svg/i, '').trim();\n          if (_rule === '') {\n            return;\n          }\n          allRules[_rule] = {\n            ...(allRules[_rule] || {}),\n            ...ruleObj,\n          };\n        });\n      });\n  }\n  return allRules;\n}\n", "import { Gradient } from '../gradient/Gradient';\nimport { Group } from '../shapes/Group';\nimport { FabricImage } from '../shapes/Image';\nimport { classRegistry } from '../ClassRegistry';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../util/misc/matrix';\nimport { removeTransformMatrixForSvgParsing } from '../util/transform_matrix_removal';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { Point } from '../Point';\nimport { CENTER, FILL, STROKE } from '../constants';\nimport { getGradientDefs } from './getGradientDefs';\nimport { getCSSRules } from './getCSSRules';\nimport type { LoadImageOptions } from '../util';\nimport type { CSSRules, TSvgReviverCallback } from './typedefs';\nimport type { ParsedViewboxTransform } from './applyViewboxTransform';\nimport type { SVGOptions } from '../gradient';\nimport { getTagName } from './getTagName';\nimport { parseTransformAttribute } from './parseTransformAttribute';\n\nconst findTag = (el: Element) =>\n  classRegistry.getSVGClass(getTagName(el).toLowerCase());\n\ntype StorageType = {\n  fill: SVGGradientElement;\n  stroke: SVGGradientElement;\n  clipPath: Element[];\n};\n\ntype NotParsedFabricObject = FabricObject & {\n  fill: string;\n  stroke: string;\n  clipPath?: string;\n  clipRule?: CanvasFillRule;\n};\n\nexport class ElementsParser {\n  declare elements: Element[];\n  declare options: LoadImageOptions & ParsedViewboxTransform;\n  declare reviver?: TSvgReviverCallback;\n  declare regexUrl: RegExp;\n  declare doc: Document;\n  declare clipPaths: Record<string, Element[]>;\n  declare gradientDefs: Record<string, SVGGradientElement>;\n  declare cssRules: CSSRules;\n\n  constructor(\n    elements: Element[],\n    options: LoadImageOptions & ParsedViewboxTransform,\n    reviver: TSvgReviverCallback | undefined,\n    doc: Document,\n    clipPaths: Record<string, Element[]>,\n  ) {\n    this.elements = elements;\n    this.options = options;\n    this.reviver = reviver;\n    this.regexUrl = /^url\\(['\"]?#([^'\"]+)['\"]?\\)/g;\n    this.doc = doc;\n    this.clipPaths = clipPaths;\n    this.gradientDefs = getGradientDefs(doc);\n    this.cssRules = getCSSRules(doc);\n  }\n\n  parse(): Promise<Array<FabricObject | null>> {\n    return Promise.all(\n      this.elements.map((element) => this.createObject(element)),\n    );\n  }\n\n  async createObject(el: Element): Promise<FabricObject | null> {\n    const klass = findTag(el);\n    if (klass) {\n      const obj: NotParsedFabricObject = await klass.fromElement(\n        el,\n        this.options,\n        this.cssRules,\n      );\n      this.resolveGradient(obj, el, FILL);\n      this.resolveGradient(obj, el, STROKE);\n      if (obj instanceof FabricImage && obj._originalElement) {\n        removeTransformMatrixForSvgParsing(\n          obj,\n          obj.parsePreserveAspectRatioAttribute(),\n        );\n      } else {\n        removeTransformMatrixForSvgParsing(obj);\n      }\n      await this.resolveClipPath(obj, el);\n      this.reviver && this.reviver(el, obj);\n      return obj;\n    }\n    return null;\n  }\n\n  extractPropertyDefinition(\n    obj: NotParsedFabricObject,\n    property: 'fill' | 'stroke' | 'clipPath',\n    storage: Record<string, StorageType[typeof property]>,\n  ): StorageType[typeof property] | undefined {\n    const value = obj[property]!,\n      regex = this.regexUrl;\n    if (!regex.test(value)) {\n      return undefined;\n    }\n    // verify: can we remove the 'g' flag? and remove lastIndex changes?\n    regex.lastIndex = 0;\n    // we passed the regex test, so we know is not null;\n    const id = regex.exec(value)![1];\n    regex.lastIndex = 0;\n    // @todo fix this\n    return storage[id];\n  }\n\n  resolveGradient(\n    obj: NotParsedFabricObject,\n    el: Element,\n    property: 'fill' | 'stroke',\n  ) {\n    const gradientDef = this.extractPropertyDefinition(\n      obj,\n      property,\n      this.gradientDefs,\n    ) as SVGGradientElement;\n    if (gradientDef) {\n      const opacityAttr = el.getAttribute(property + '-opacity');\n      const gradient = Gradient.fromElement(gradientDef, obj, {\n        ...this.options,\n        opacity: opacityAttr,\n      } as SVGOptions);\n      obj.set(property, gradient);\n    }\n  }\n\n  // TODO: resolveClipPath could be run once per clippath with minor work per object.\n  // is a refactor that i m not sure is worth on this code\n  async resolveClipPath(\n    obj: NotParsedFabricObject,\n    usingElement: Element,\n    exactOwner?: Element,\n  ) {\n    const clipPathElements = this.extractPropertyDefinition(\n      obj,\n      'clipPath',\n      this.clipPaths,\n    ) as Element[];\n    if (clipPathElements) {\n      const objTransformInv = invertTransform(obj.calcTransformMatrix());\n      const clipPathTag = clipPathElements[0].parentElement!;\n      let clipPathOwner = usingElement;\n      while (\n        !exactOwner &&\n        clipPathOwner.parentElement &&\n        clipPathOwner.getAttribute('clip-path') !== obj.clipPath\n      ) {\n        clipPathOwner = clipPathOwner.parentElement;\n      }\n      // move the clipPath tag as sibling to the real element that is using it\n      clipPathOwner.parentElement!.appendChild(clipPathTag!);\n\n      // this multiplication order could be opposite.\n      // but i don't have an svg to test it\n      // at the first SVG that has a transform on both places and is misplaced\n      // try to invert this multiplication order\n      const finalTransform = parseTransformAttribute(\n        `${clipPathOwner.getAttribute('transform') || ''} ${\n          clipPathTag.getAttribute('originalTransform') || ''\n        }`,\n      );\n\n      clipPathTag.setAttribute(\n        'transform',\n        `matrix(${finalTransform.join(',')})`,\n      );\n\n      const container = await Promise.all(\n        clipPathElements.map((clipPathElement) => {\n          return findTag(clipPathElement)\n            .fromElement(clipPathElement, this.options, this.cssRules)\n            .then((enlivedClippath: NotParsedFabricObject) => {\n              removeTransformMatrixForSvgParsing(enlivedClippath);\n              enlivedClippath.fillRule = enlivedClippath.clipRule!;\n              delete enlivedClippath.clipRule;\n              return enlivedClippath;\n            });\n        }),\n      );\n      const clipPath =\n        container.length === 1 ? container[0] : new Group(container);\n      const gTransform = multiplyTransformMatrices(\n        objTransformInv,\n        clipPath.calcTransformMatrix(),\n      );\n      if (clipPath.clipPath) {\n        await this.resolveClipPath(\n          clipPath,\n          clipPathOwner,\n          // this is tricky.\n          // it tries to differentiate from when clipPaths are inherited by outside groups\n          // or when are really clipPaths referencing other clipPaths\n          clipPathTag.getAttribute('clip-path') ? clipPathOwner : undefined,\n        );\n      }\n      const { scaleX, scaleY, angle, skewX, translateX, translateY } =\n        qrDecompose(gTransform);\n      clipPath.set({\n        flipX: false,\n        flipY: false,\n      });\n      clipPath.set({\n        scaleX,\n        scaleY,\n        angle,\n        skewX,\n        skewY: 0,\n      });\n      clipPath.setPositionByOrigin(\n        new Point(translateX, translateY),\n        CENTER,\n        CENTER,\n      );\n      obj.clipPath = clipPath;\n    } else {\n      // if clip-path does not resolve to any element, delete the property.\n      delete obj.clipPath;\n      return;\n    }\n  }\n}\n", "import { applyViewboxTransform } from './applyViewboxTransform';\nimport { svgValidTagNamesRegEx } from './constants';\nimport { hasInvalidAncestor } from './hasInvalidAncestor';\nimport { parseUseDirectives } from './parseUseDirectives';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport { ElementsParser } from './elements_parser';\nimport { log, SignalAbortedError } from '../util/internals/console';\nimport { getTagName } from './getTagName';\n\nconst isValidSvgTag = (el: Element) =>\n  svgValidTagNamesRegEx.test(getTagName(el));\n\nexport const createEmptyResponse = (): SVGParsingOutput => ({\n  objects: [],\n  elements: [],\n  options: {},\n  allElements: [],\n});\n\n/**\n * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\n * @static\n * @function\n * @memberOf fabric\n * @param {HTMLElement} doc SVG document to parse\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @return {SVGParsingOutput}\n * {@link SVGParsingOutput} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n */\nexport async function parseSVGDocument(\n  doc: Document,\n  reviver?: TSvgReviverCallback,\n  { crossOrigin, signal }: LoadImageOptions = {},\n): Promise<SVGParsingOutput> {\n  if (signal && signal.aborted) {\n    log('log', new SignalAbortedError('parseSVGDocument'));\n    // this is an unhappy path, we dont care about speed\n    return createEmptyResponse();\n  }\n  const documentElement = doc.documentElement;\n  parseUseDirectives(doc);\n\n  const descendants = Array.from(documentElement.getElementsByTagName('*')),\n    options = {\n      ...applyViewboxTransform(documentElement),\n      crossOrigin,\n      signal,\n    };\n  const elements = descendants.filter((el) => {\n    applyViewboxTransform(el);\n    return isValidSvgTag(el) && !hasInvalidAncestor(el); // http://www.w3.org/TR/SVG/struct.html#DefsElement\n  });\n  if (!elements || (elements && !elements.length)) {\n    return {\n      ...createEmptyResponse(),\n      options,\n      allElements: descendants,\n    };\n  }\n  const localClipPaths: Record<string, Element[]> = {};\n  descendants\n    .filter((el) => getTagName(el) === 'clipPath')\n    .forEach((el) => {\n      el.setAttribute('originalTransform', el.getAttribute('transform') || '');\n      const id = el.getAttribute('id')!;\n      localClipPaths[id] = Array.from(el.getElementsByTagName('*')).filter(\n        (el) => isValidSvgTag(el),\n      );\n    });\n\n  // Precedence of rules:   style > class > attribute\n  const elementParser = new ElementsParser(\n    elements,\n    options,\n    reviver,\n    doc,\n    localClipPaths,\n  );\n\n  const instances = await elementParser.parse();\n\n  return {\n    objects: instances,\n    elements,\n    options,\n    allElements: descendants,\n  };\n}\n", "import { svgNS } from './constants';\nimport { getMultipleNodes } from './getMultipleNodes';\nimport { applyViewboxTransform } from './applyViewboxTransform';\nimport { parseStyleString } from './parseStyleString';\n\nexport function parseUseDirectives(doc: Document) {\n  const nodelist = getMultipleNodes(doc, ['use', 'svg:use']);\n  const skipAttributes = ['x', 'y', 'xlink:href', 'href', 'transform'];\n\n  for (const useElement of nodelist) {\n    const useAttributes: NamedNodeMap = useElement.attributes;\n\n    const useAttrMap: Record<string, string> = {};\n    for (const attr of useAttributes) {\n      attr.value && (useAttrMap[attr.name] = attr.value);\n    }\n\n    const xlink = (useAttrMap['xlink:href'] || useAttrMap.href || '').slice(1);\n\n    if (xlink === '') {\n      return;\n    }\n    const referencedElement = doc.getElementById(xlink);\n    if (referencedElement === null) {\n      // if we can't find the target of the xlink, consider this use tag bad, similar to no xlink\n      return;\n    }\n    let clonedOriginal = referencedElement.cloneNode(true) as Element;\n\n    const originalAttributes: NamedNodeMap = clonedOriginal.attributes;\n\n    const originalAttrMap: Record<string, string> = {};\n    for (const attr of originalAttributes) {\n      attr.value && (originalAttrMap[attr.name] = attr.value);\n    }\n\n    // Transform attribute needs to be merged in a particular way\n    const { x = 0, y = 0, transform = '' } = useAttrMap;\n    const currentTrans = `${transform} ${\n      originalAttrMap.transform || ''\n    } translate(${x}, ${y})`;\n\n    applyViewboxTransform(clonedOriginal);\n\n    if (/^svg$/i.test(clonedOriginal.nodeName)) {\n      // if is an SVG, create a group and apply all the attributes on top of it\n      const el3 = clonedOriginal.ownerDocument.createElementNS(svgNS, 'g');\n      Object.entries(originalAttrMap).forEach(([name, value]) =>\n        el3.setAttributeNS(svgNS, name, value),\n      );\n      el3.append(...clonedOriginal.childNodes);\n      clonedOriginal = el3;\n    }\n\n    for (const attr of useAttributes) {\n      if (!attr) {\n        continue;\n      }\n      const { name, value } = attr;\n      if (skipAttributes.includes(name)) {\n        continue;\n      }\n\n      if (name === 'style') {\n        // when use has a style, merge the two styles, with the ref being priority (not use)\n        // priority is by feature. an attribute for fill on the original element\n        // will overwrite the fill in style or attribute for tha use\n        const styleRecord: Record<string, any> = {};\n        parseStyleString(value!, styleRecord);\n        // cleanup styleRecord from attributes of original\n        Object.entries(originalAttrMap).forEach(([name, value]) => {\n          styleRecord[name] = value;\n        });\n        // now we can put in the style of the original that will overwrite the original attributes\n        parseStyleString(originalAttrMap.style || '', styleRecord);\n        const mergedStyles = Object.entries(styleRecord)\n          .map((entry) => entry.join(':'))\n          .join(';');\n        clonedOriginal.setAttribute(name, mergedStyles);\n      } else {\n        // set the attribute from use element only if the original does not have it already\n        !originalAttrMap[name] && clonedOriginal.setAttribute(name, value!);\n      }\n    }\n\n    clonedOriginal.setAttribute('transform', currentTrans);\n    clonedOriginal.setAttribute('instantiated_by_use', '1');\n    clonedOriginal.removeAttribute('id');\n    useElement.parentNode!.replaceChild(clonedOriginal, useElement);\n  }\n}\n", "import { getFabricWindow } from '../env';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport { parseSVGDocument } from './parseSVGDocument';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\n\n/**\n * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\n * @memberOf fabric\n * @param {String} string representing the svg\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * {@link TSvgParsedCallback} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n */\nexport function loadSVGFromString(\n  string: string,\n  reviver?: TSvgReviverCallback,\n  options?: LoadImageOptions,\n): Promise<SVGParsingOutput> {\n  const parser = new (getFabricWindow().DOMParser)(),\n    // should we use `image/svg+xml` here?\n    doc = parser.parseFromString(string.trim(), 'text/xml');\n  return parseSVGDocument(doc, reviver, options);\n}\n", "import { request } from '../util/internals/dom_request';\nimport { parseSVGDocument, createEmptyResponse } from './parseSVGDocument';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\n\n/**\n * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.\n * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\n * @memberOf fabric\n * @param {string} url where the SVG is\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * {@link TSvgParsedCallback} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n */\nexport function loadSVGFromURL(\n  url: string,\n  reviver?: TSvgReviverCallback,\n  options: LoadImageOptions = {},\n): Promise<SVGParsingOutput> {\n  // need to handle error properly\n  return new Promise<Document>((resolve, reject) => {\n    const onComplete = (r: XMLHttpRequest) => {\n      const xml = r.responseXML;\n      if (xml) {\n        resolve(xml);\n      }\n      reject();\n    };\n\n    request(url.replace(/^\\n\\s*/, '').trim(), {\n      onComplete,\n      signal: options.signal,\n    });\n  })\n    .then((parsedDoc) => parseSVGDocument(parsedDoc, reviver, options))\n    .catch(() => {\n      // this is an unhappy path, we dont care about speed\n      return createEmptyResponse();\n    });\n}\n", "import { Point } from '../Point';\nimport { Control } from './Control';\nimport type { TMat2D } from '../typedefs';\nimport type { Polyline } from '../shapes/Polyline';\nimport { multiplyTransformMatrices } from '../util/misc/matrix';\nimport type {\n  TModificationEvents,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { MODIFY_POLY } from '../constants';\n\nconst ACTION_NAME: TModificationEvents = MODIFY_POLY;\n\ntype TTransformAnchor = Transform & { pointIndex: number };\n\n/**\n * This function locates the controls.\n * It'll be used both for drawing and for interaction.\n */\nexport const createPolyPositionHandler = (pointIndex: number) => {\n  return function (dim: Point, finalMatrix: TMat2D, polyObject: Polyline) {\n    const { points, pathOffset } = polyObject;\n    return new Point(points[pointIndex])\n      .subtract(pathOffset)\n      .transform(\n        multiplyTransformMatrices(\n          polyObject.getViewportTransform(),\n          polyObject.calcTransformMatrix(),\n        ),\n      );\n  };\n};\n\n/**\n * This function defines what the control does.\n * It'll be called on every mouse move after a control has been clicked and is being dragged.\n * The function receives as argument the mouse event, the current transform object\n * and the current position in canvas coordinate `transform.target` is a reference to the\n * current object being transformed.\n */\nexport const polyActionHandler = (\n  eventData: TPointerEvent,\n  transform: TTransformAnchor,\n  x: number,\n  y: number,\n) => {\n  const { target, pointIndex } = transform;\n  const poly = target as Polyline;\n  const mouseLocalPosition = sendPointToPlane(\n    new Point(x, y),\n    undefined,\n    poly.calcOwnMatrix(),\n  );\n\n  poly.points[pointIndex] = mouseLocalPosition.add(poly.pathOffset);\n  poly.setDimensions();\n  poly.set('dirty', true);\n  return true;\n};\n\n/**\n * Keep the polygon in the same position when we change its `width`/`height`/`top`/`left`.\n */\nexport const factoryPolyActionHandler = (\n  pointIndex: number,\n  fn: TransformActionHandler<TTransformAnchor>,\n) => {\n  return function (\n    eventData: TPointerEvent,\n    transform: Transform,\n    x: number,\n    y: number,\n  ) {\n    const poly = transform.target as Polyline,\n      anchorPoint = new Point(\n        poly.points[(pointIndex > 0 ? pointIndex : poly.points.length) - 1],\n      ),\n      anchorPointInParentPlane = anchorPoint\n        .subtract(poly.pathOffset)\n        .transform(poly.calcOwnMatrix()),\n      actionPerformed = fn(eventData, { ...transform, pointIndex }, x, y);\n\n    const newAnchorPointInParentPlane = anchorPoint\n      .subtract(poly.pathOffset)\n      .transform(poly.calcOwnMatrix());\n\n    const diff = newAnchorPointInParentPlane.subtract(anchorPointInParentPlane);\n    poly.left -= diff.x;\n    poly.top -= diff.y;\n\n    return actionPerformed;\n  };\n};\n\nexport const createPolyActionHandler = (pointIndex: number) =>\n  wrapWithFireEvent(\n    ACTION_NAME,\n    factoryPolyActionHandler(pointIndex, polyActionHandler),\n  );\n\nexport function createPolyControls(\n  poly: Polyline,\n  options?: Partial<Control>,\n): Record<string, Control>;\nexport function createPolyControls(\n  numOfControls: number,\n  options?: Partial<Control>,\n): Record<string, Control>;\nexport function createPolyControls(\n  arg0: number | Polyline,\n  options: Partial<Control> = {},\n) {\n  const controls = {} as Record<string, Control>;\n  for (\n    let idx = 0;\n    idx < (typeof arg0 === 'number' ? arg0 : arg0.points.length);\n    idx++\n  ) {\n    controls[`p${idx}`] = new Control({\n      actionName: ACTION_NAME,\n      positionHandler: createPolyPositionHandler(idx),\n      actionHandler: createPolyActionHandler(idx),\n      ...options,\n    });\n  }\n  return controls;\n}\n", "import { Point } from '../Point';\nimport { Control } from './Control';\nimport type { TMat2D } from '../typedefs';\nimport type { Path } from '../shapes/Path';\nimport { multiplyTransformMatrices } from '../util/misc/matrix';\nimport type {\n  TModificationEvents,\n  TPointerEvent,\n  Transform,\n} from '../EventTypeDefs';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport type { TSimpleParseCommandType } from '../util/path/typedefs';\nimport type { ControlRenderingStyleOverride } from './controlRendering';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo } from './util';\n\nconst ACTION_NAME: TModificationEvents = 'modifyPath' as const;\n\ntype TTransformAnchor = Transform;\n\nexport type PathPointControlStyle = {\n  controlFill?: string;\n  controlStroke?: string;\n  connectionDashArray?: number[];\n};\n\nconst calcPathPointPosition = (\n  pathObject: Path,\n  commandIndex: number,\n  pointIndex: number,\n) => {\n  const { path, pathOffset } = pathObject;\n  const command = path[commandIndex];\n  return new Point(\n    (command[pointIndex] as number) - pathOffset.x,\n    (command[pointIndex + 1] as number) - pathOffset.y,\n  ).transform(\n    multiplyTransformMatrices(\n      pathObject.getViewportTransform(),\n      pathObject.calcTransformMatrix(),\n    ),\n  );\n};\n\nconst movePathPoint = (\n  pathObject: Path,\n  x: number,\n  y: number,\n  commandIndex: number,\n  pointIndex: number,\n) => {\n  const { path, pathOffset } = pathObject;\n\n  const anchorCommand =\n    path[(commandIndex > 0 ? commandIndex : path.length) - 1];\n  const anchorPoint = new Point(\n    anchorCommand[pointIndex] as number,\n    anchorCommand[pointIndex + 1] as number,\n  );\n\n  const anchorPointInParentPlane = anchorPoint\n    .subtract(pathOffset)\n    .transform(pathObject.calcOwnMatrix());\n\n  const mouseLocalPosition = sendPointToPlane(\n    new Point(x, y),\n    undefined,\n    pathObject.calcOwnMatrix(),\n  );\n\n  path[commandIndex][pointIndex] = mouseLocalPosition.x + pathOffset.x;\n  path[commandIndex][pointIndex + 1] = mouseLocalPosition.y + pathOffset.y;\n  pathObject.setDimensions();\n\n  const newAnchorPointInParentPlane = anchorPoint\n    .subtract(pathObject.pathOffset)\n    .transform(pathObject.calcOwnMatrix());\n\n  const diff = newAnchorPointInParentPlane.subtract(anchorPointInParentPlane);\n  pathObject.left -= diff.x;\n  pathObject.top -= diff.y;\n  pathObject.set('dirty', true);\n  return true;\n};\n\n/**\n * This function locates the controls.\n * It'll be used both for drawing and for interaction.\n */\nfunction pathPositionHandler(\n  this: PathPointControl,\n  dim: Point,\n  finalMatrix: TMat2D,\n  pathObject: Path,\n) {\n  const { commandIndex, pointIndex } = this;\n  return calcPathPointPosition(pathObject, commandIndex, pointIndex);\n}\n\n/**\n * This function defines what the control does.\n * It'll be called on every mouse move after a control has been clicked and is being dragged.\n * The function receives as argument the mouse event, the current transform object\n * and the current position in canvas coordinate `transform.target` is a reference to the\n * current object being transformed.\n */\nfunction pathActionHandler(\n  this: PathPointControl,\n  eventData: TPointerEvent,\n  transform: TTransformAnchor,\n  x: number,\n  y: number,\n) {\n  const { target } = transform;\n  const { commandIndex, pointIndex } = this;\n  const actionPerformed = movePathPoint(\n    target as Path,\n    x,\n    y,\n    commandIndex,\n    pointIndex,\n  );\n  if (actionPerformed) {\n    fireEvent(this.actionName as TModificationEvents, {\n      ...commonEventInfo(eventData, transform, x, y),\n      commandIndex,\n      pointIndex,\n    });\n  }\n  return actionPerformed;\n}\n\nconst indexFromPrevCommand = (previousCommandType: TSimpleParseCommandType) =>\n  previousCommandType === 'C' ? 5 : previousCommandType === 'Q' ? 3 : 1;\n\nclass PathPointControl extends Control {\n  declare commandIndex: number;\n  declare pointIndex: number;\n  declare controlFill: string;\n  declare controlStroke: string;\n  constructor(options?: Partial<PathPointControl>) {\n    super(options);\n  }\n\n  render(\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: Path,\n  ) {\n    const overrides: ControlRenderingStyleOverride = {\n      ...styleOverride,\n      cornerColor: this.controlFill,\n      cornerStrokeColor: this.controlStroke,\n      transparentCorners: !this.controlFill,\n    };\n    super.render(ctx, left, top, overrides, fabricObject);\n  }\n}\n\nclass PathControlPointControl extends PathPointControl {\n  declare connectionDashArray?: number[];\n  declare connectToCommandIndex: number;\n  declare connectToPointIndex: number;\n  constructor(options?: Partial<PathControlPointControl>) {\n    super(options);\n  }\n\n  render(\n    this: PathControlPointControl,\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: Path,\n  ) {\n    const { path } = fabricObject;\n    const {\n      commandIndex,\n      pointIndex,\n      connectToCommandIndex,\n      connectToPointIndex,\n    } = this;\n    ctx.save();\n    ctx.strokeStyle = this.controlStroke;\n    if (this.connectionDashArray) {\n      ctx.setLineDash(this.connectionDashArray);\n    }\n    const [commandType] = path[commandIndex];\n    const point = calcPathPointPosition(\n      fabricObject,\n      connectToCommandIndex,\n      connectToPointIndex,\n    );\n\n    if (commandType === 'Q') {\n      // one control point connects to 2 points\n      const point2 = calcPathPointPosition(\n        fabricObject,\n        commandIndex,\n        pointIndex + 2,\n      );\n      ctx.moveTo(point2.x, point2.y);\n      ctx.lineTo(left, top);\n    } else {\n      ctx.moveTo(left, top);\n    }\n    ctx.lineTo(point.x, point.y);\n    ctx.stroke();\n    ctx.restore();\n\n    super.render(ctx, left, top, styleOverride, fabricObject);\n  }\n}\n\nconst createControl = (\n  commandIndexPos: number,\n  pointIndexPos: number,\n  isControlPoint: boolean,\n  options: Partial<Control> & {\n    controlPointStyle?: PathPointControlStyle;\n    pointStyle?: PathPointControlStyle;\n  },\n  connectToCommandIndex?: number,\n  connectToPointIndex?: number,\n) =>\n  new (isControlPoint ? PathControlPointControl : PathPointControl)({\n    commandIndex: commandIndexPos,\n    pointIndex: pointIndexPos,\n    actionName: ACTION_NAME,\n    positionHandler: pathPositionHandler,\n    actionHandler: pathActionHandler,\n    connectToCommandIndex,\n    connectToPointIndex,\n    ...options,\n    ...(isControlPoint ? options.controlPointStyle : options.pointStyle),\n  } as Partial<PathControlPointControl>);\n\nexport function createPathControls(\n  path: Path,\n  options: Partial<Control> & {\n    controlPointStyle?: PathPointControlStyle;\n    pointStyle?: PathPointControlStyle;\n  } = {},\n): Record<string, Control> {\n  const controls = {} as Record<string, Control>;\n  let previousCommandType: TSimpleParseCommandType = 'M';\n  path.path.forEach((command, commandIndex) => {\n    const commandType = command[0];\n\n    if (commandType !== 'Z') {\n      controls[`c_${commandIndex}_${commandType}`] = createControl(\n        commandIndex,\n        command.length - 2,\n        false,\n        options,\n      );\n    }\n    switch (commandType) {\n      case 'C':\n        controls[`c_${commandIndex}_C_CP_1`] = createControl(\n          commandIndex,\n          1,\n          true,\n          options,\n          commandIndex - 1,\n          indexFromPrevCommand(previousCommandType),\n        );\n        controls[`c_${commandIndex}_C_CP_2`] = createControl(\n          commandIndex,\n          3,\n          true,\n          options,\n          commandIndex,\n          5,\n        );\n        break;\n      case 'Q':\n        controls[`c_${commandIndex}_Q_CP_1`] = createControl(\n          commandIndex,\n          1,\n          true,\n          options,\n          commandIndex,\n          3,\n        );\n        break;\n    }\n    previousCommandType = commandType;\n  });\n  return controls;\n}\n", "import { getFabricWindow } from '../env';\nimport { createCanvasElement, createCanvasElementFor } from '../util/misc/dom';\nimport { WebGLFilterBackend } from './WebGLFilterBackend';\nimport type { TWebGLPipelineState, T2DPipelineState } from './typedefs';\n\nexport const isWebGLPipelineState = (\n  options: TWebGLPipelineState | T2DPipelineState,\n): options is TWebGLPipelineState => {\n  return (options as TWebGLPipelineState).webgl !== undefined;\n};\n\n/**\n * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\n * drawImage should be faster, but is also bugged for a small combination of old hardware\n * and drivers.\n * putImageData is faster than drawImage for that specific operation.\n */\nexport const isPutImageFaster = (width: number, height: number): boolean => {\n  const targetCanvas = createCanvasElementFor({ width, height });\n  const sourceCanvas = createCanvasElement();\n  const gl = sourceCanvas.getContext('webgl')!;\n  // eslint-disable-next-line no-undef\n  const imageBuffer = new ArrayBuffer(width * height * 4);\n\n  const testContext = {\n    imageBuffer: imageBuffer,\n  } as unknown as Required<WebGLFilterBackend>;\n  const testPipelineState = {\n    destinationWidth: width,\n    destinationHeight: height,\n    targetCanvas: targetCanvas,\n  } as unknown as TWebGLPipelineState;\n  let startTime;\n\n  startTime = getFabricWindow().performance.now();\n  WebGLFilterBackend.prototype.copyGLTo2D.call(\n    testContext,\n    gl,\n    testPipelineState,\n  );\n  const drawImageTime = getFabricWindow().performance.now() - startTime;\n\n  startTime = getFabricWindow().performance.now();\n  WebGLFilterBackend.prototype.copyGLTo2DPutImageData.call(\n    testContext,\n    gl,\n    testPipelineState,\n  );\n  const putImageDataTime = getFabricWindow().performance.now() - startTime;\n\n  return drawImageTime > putImageDataTime;\n};\n", "export const highPsourceCode = `precision highp float`;\n\nexport const identityFragmentShader = `\n    ${highPsourceCode};\n    varying vec2 vTexCoord;\n    uniform sampler2D uTexture;\n    void main() {\n      gl_FragColor = texture2D(uTexture, vTexCoord);\n    }`;\n\nexport const vertexSource = `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    void main() {\n      vTexCoord = aPosition;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }`;\n", "import { getEnv } from '../env';\nimport type {\n  T2DPipelineState,\n  TWebGLAttributeLocationMap,\n  TWebGLPipelineState,\n  TWebGLProgramCacheItem,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport {\n  highPsourceCode,\n  identityFragmentShader,\n  vertexSource,\n} from './shaders/baseFilter';\nimport type { Abortable } from '../typedefs';\nimport { FabricError } from '../util/internals/console';\nimport { createCanvasElementFor } from '../util/misc/dom';\n\nconst regex = new RegExp(highPsourceCode, 'g');\n\nexport class BaseFilter<\n  Name extends string,\n  OwnProps extends Record<string, any> = object,\n  SerializedProps extends Record<string, any> = OwnProps,\n> {\n  /**\n   * Filter type\n   * @param {String} type\n   * @default\n   */\n  get type(): Name {\n    return (this.constructor as typeof BaseFilter).type as Name;\n  }\n\n  /**\n   * The class type. Used to identify which class this is.\n   * This is used for serialization purposes and internally it can be used\n   * to identify classes. As a developer you could use `instance of Class`\n   * but to avoid importing all the code and blocking tree shaking we try\n   * to avoid doing that.\n   */\n  static type = 'BaseFilter';\n\n  /**\n   * Contains the uniform locations for the fragment shader.\n   * uStepW and uStepH are handled by the BaseFilter, each filter class\n   * needs to specify all the one that are needed\n   */\n  static uniformLocations: string[] = [];\n\n  declare static defaults: Record<string, unknown>;\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor({\n    type,\n    ...options\n  }: { type?: never } & Partial<OwnProps> & Record<string, any> = {}) {\n    Object.assign(\n      this,\n      (this.constructor as typeof BaseFilter).defaults,\n      options,\n    );\n  }\n\n  protected getFragmentSource(): string {\n    return identityFragmentShader;\n  }\n\n  getVertexSource(): string {\n    return vertexSource;\n  }\n\n  /**\n   * Compile this filter's shader program.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\n   * @param {String} fragmentSource fragmentShader source for compilation\n   * @param {String} vertexSource vertexShader source for compilation\n   */\n  createProgram(\n    gl: WebGLRenderingContext,\n    fragmentSource: string = this.getFragmentSource(),\n    vertexSource: string = this.getVertexSource(),\n  ) {\n    const {\n      WebGLProbe: { GLPrecision = 'highp' },\n    } = getEnv();\n    if (GLPrecision !== 'highp') {\n      fragmentSource = fragmentSource.replace(\n        regex,\n        highPsourceCode.replace('highp', GLPrecision),\n      );\n    }\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    const program = gl.createProgram();\n\n    if (!vertexShader || !fragmentShader || !program) {\n      throw new FabricError(\n        'Vertex, fragment shader or program creation error',\n      );\n    }\n    gl.shaderSource(vertexShader, vertexSource);\n    gl.compileShader(vertexShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      throw new FabricError(\n        `Vertex shader compile error for ${this.type}: ${gl.getShaderInfoLog(\n          vertexShader,\n        )}`,\n      );\n    }\n\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      throw new FabricError(\n        `Fragment shader compile error for ${this.type}: ${gl.getShaderInfoLog(\n          fragmentShader,\n        )}`,\n      );\n    }\n\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      throw new FabricError(\n        `Shader link error for \"${this.type}\" ${gl.getProgramInfoLog(program)}`,\n      );\n    }\n\n    const uniformLocations = this.getUniformLocations(gl, program) || {};\n    uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');\n    uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');\n\n    return {\n      program,\n      attributeLocations: this.getAttributeLocations(gl, program),\n      uniformLocations,\n    };\n  }\n\n  /**\n   * Return a map of attribute names to WebGLAttributeLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\n   * @returns {Object} A map of attribute names to attribute locations.\n   */\n  getAttributeLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n  ): TWebGLAttributeLocationMap {\n    return {\n      aPosition: gl.getAttribLocation(program, 'aPosition'),\n    };\n  }\n\n  /**\n   * Return a map of uniform names to WebGLUniformLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\n   * @returns {Object} A map of uniform names to uniform locations.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n  ): TWebGLUniformLocationMap {\n    const locations = (this.constructor as unknown as typeof BaseFilter<string>)\n      .uniformLocations;\n\n    const uniformLocations: Record<string, WebGLUniformLocation | null> = {};\n    for (let i = 0; i < locations.length; i++) {\n      uniformLocations[locations[i]] = gl.getUniformLocation(\n        program,\n        locations[i],\n      );\n    }\n    return uniformLocations;\n  }\n\n  /**\n   * Send attribute data from this filter to its shader program on the GPU.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {Object} attributeLocations A map of shader attribute names to their locations.\n   */\n  sendAttributeData(\n    gl: WebGLRenderingContext,\n    attributeLocations: Record<string, number>,\n    aPositionData: Float32Array,\n  ) {\n    const attributeLocation = attributeLocations.aPosition;\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.enableVertexAttribArray(attributeLocation);\n    gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\n  }\n\n  _setupFrameBuffer(options: TWebGLPipelineState) {\n    const gl = options.context;\n    if (options.passes > 1) {\n      const width = options.destinationWidth;\n      const height = options.destinationHeight;\n      if (options.sourceWidth !== width || options.sourceHeight !== height) {\n        gl.deleteTexture(options.targetTexture);\n        options.targetTexture = options.filterBackend.createTexture(\n          gl,\n          width,\n          height,\n        );\n      }\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        options.targetTexture,\n        0,\n      );\n    } else {\n      // draw last filter on canvas and not to framebuffer.\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      gl.finish();\n    }\n  }\n\n  _swapTextures(options: TWebGLPipelineState) {\n    options.passes--;\n    options.pass++;\n    const temp = options.targetTexture;\n    options.targetTexture = options.sourceTexture;\n    options.sourceTexture = temp;\n  }\n\n  /**\n   * Generic isNeutral implementation for one parameter based filters.\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * Other filters may need their own version ( ColorMatrix, HueRotation, gamma, ComposedFilter )\n   * @param {Object} options\n   **/\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isNeutralState(options?: any): boolean {\n    return false;\n  }\n\n  /**\n   * Apply this filter to the input image data provided.\n   *\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      this._setupFrameBuffer(options);\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    } else {\n      this.applyTo2d(options);\n    }\n  }\n\n  applyTo2d(_options: T2DPipelineState): void {\n    // override by subclass\n  }\n\n  /**\n   * Returns a string that represent the current selected shader code for the filter.\n   * Used to force recompilation when parameters change or to retrieve the shader from cache\n   * @type string\n   **/\n  getCacheKey(): string {\n    return this.type;\n  }\n\n  /**\n   * Retrieves the cached shader.\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   * @return {WebGLProgram} the compiled program shader\n   */\n  retrieveShader(options: TWebGLPipelineState): TWebGLProgramCacheItem {\n    const key = this.getCacheKey();\n    if (!options.programCache[key]) {\n      options.programCache[key] = this.createProgram(options.context);\n    }\n    return options.programCache[key];\n  }\n\n  /**\n   * Apply this filter using webgl.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.originalTexture The texture of the original input image.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyToWebGL(options: TWebGLPipelineState) {\n    const gl = options.context;\n    const shader = this.retrieveShader(options);\n    if (options.pass === 0 && options.originalTexture) {\n      gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\n    } else {\n      gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\n    }\n    gl.useProgram(shader.program);\n    this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\n\n    gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\n    gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\n\n    this.sendUniformData(gl, shader.uniformLocations);\n    gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  }\n\n  bindAdditionalTexture(\n    gl: WebGLRenderingContext,\n    texture: WebGLTexture,\n    textureUnit: number,\n  ) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // reset active texture to 0 as usual\n    gl.activeTexture(gl.TEXTURE0);\n  }\n\n  unbindAdditionalTexture(gl: WebGLRenderingContext, textureUnit: number) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.activeTexture(gl.TEXTURE0);\n  }\n\n  /**\n   * Send uniform data from this filter to its shader program on the GPU.\n   *\n   * Intended to be overridden by subclasses.\n   *\n   * @param {WebGLRenderingContext} _gl The canvas context used to compile the shader program.\n   * @param {Object} _uniformLocations A map of shader uniform names to their locations.\n   */\n  sendUniformData(\n    _gl: WebGLRenderingContext,\n    _uniformLocations: TWebGLUniformLocationMap,\n  ): void {\n    // override by subclass\n  }\n\n  /**\n   * If needed by a 2d filter, this functions can create an helper canvas to be used\n   * remember that options.targetCanvas is available for use till end of chain.\n   */\n  createHelpLayer(options: T2DPipelineState) {\n    if (!options.helpLayer) {\n      const { sourceWidth, sourceHeight } = options;\n      const helpLayer = createCanvasElementFor({\n        width: sourceWidth,\n        height: sourceHeight,\n      });\n      options.helpLayer = helpLayer;\n    }\n  }\n\n  /**\n   * Returns object representation of an instance\n   * It will automatically export the default values of a filter,\n   * stored in the static defaults property.\n   * @return {Object} Object representation of an instance\n   */\n  toObject(): { type: Name } & SerializedProps {\n    const defaultKeys = Object.keys(\n      (this.constructor as typeof BaseFilter).defaults || {},\n    ) as (keyof SerializedProps)[];\n\n    return {\n      type: this.type,\n      ...defaultKeys.reduce<SerializedProps>((acc, key) => {\n        acc[key] = this[\n          key as keyof this\n        ] as unknown as (typeof acc)[typeof key];\n        return acc;\n      }, {} as SerializedProps),\n    };\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  static async fromObject(\n    { type, ...filterOptions }: Record<string, any>,\n    _options: Abortable,\n  ): Promise<BaseFilter<string, object>> {\n    return new this(filterOptions);\n  }\n}\n", "export const blendColorFragmentSource = {\n  multiply: 'gl_FragColor.rgb *= uColor.rgb;\\n',\n  screen:\n    'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n',\n  add: 'gl_FragColor.rgb += uColor.rgb;\\n',\n  difference: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n',\n  subtract: 'gl_FragColor.rgb -= uColor.rgb;\\n',\n  lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n',\n  darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n',\n  exclusion:\n    'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n',\n  overlay: `\n    if (uColor.r < 0.5) {\n      gl_FragColor.r *= 2.0 * uColor.r;\n    } else {\n      gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n    }\n    if (uColor.g < 0.5) {\n      gl_FragColor.g *= 2.0 * uColor.g;\n    } else {\n      gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n    }\n    if (uColor.b < 0.5) {\n      gl_FragColor.b *= 2.0 * uColor.b;\n    } else {\n      gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n    }\n    `,\n  tint: `\n    gl_FragColor.rgb *= (1.0 - uColor.a);\n    gl_FragColor.rgb += uColor.rgb;\n    `,\n} as const;\n", "import { Color } from '../color/Color';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { blendColorFragmentSource } from './shaders/blendColor';\n\nexport type TBlendMode =\n  | 'multiply'\n  | 'add'\n  | 'difference'\n  | 'screen'\n  | 'subtract'\n  | 'darken'\n  | 'lighten'\n  | 'overlay'\n  | 'exclusion'\n  | 'tint';\n\ntype BlendColorOwnProps = {\n  color: string;\n  mode: TBlendMode;\n  alpha: number;\n};\n\nexport const blendColorDefaultValues: BlendColorOwnProps = {\n  color: '#F95C63',\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Color Blend filter class\n * @example\n * const filter = new BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendColor extends BaseFilter<'BlendColor', BlendColorOwnProps> {\n  /**\n   * Color to make the blend operation with. default to a reddish color since black or white\n   * gives always strong result.\n   * @type String\n   * @default\n   **/\n  declare color: BlendColorOwnProps['color'];\n\n  /**\n   * Blend mode for the filter: one of multiply, add, difference, screen, subtract,\n   * darken, lighten, overlay, exclusion, tint.\n   * @type String\n   * @default\n   **/\n  declare mode: BlendColorOwnProps['mode'];\n  /**\n   * alpha value. represent the strength of the blend color operation.\n   * @type Number\n   * @default\n   **/\n  declare alpha: BlendColorOwnProps['alpha'];\n\n  static defaults = blendColorDefaultValues;\n\n  static type = 'BlendColor';\n\n  static uniformLocations = ['uColor'];\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  protected getFragmentSource(): string {\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec4 uColor;\n      varying vec2 vTexCoord;\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        gl_FragColor = color;\n        if (color.a > 0.0) {\n          ${blendColorFragmentSource[this.mode]}\n        }\n      }\n      `;\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const source = new Color(this.color).getSource();\n    const alpha = this.alpha;\n    const tr = source[0] * alpha;\n    const tg = source[1] * alpha;\n    const tb = source[2] * alpha;\n    const alpha1 = 1 - alpha;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      let oR, oG, oB;\n      switch (this.mode) {\n        case 'multiply':\n          oR = (r * tr) / 255;\n          oG = (g * tg) / 255;\n          oB = (b * tb) / 255;\n          break;\n        case 'screen':\n          oR = 255 - ((255 - r) * (255 - tr)) / 255;\n          oG = 255 - ((255 - g) * (255 - tg)) / 255;\n          oB = 255 - ((255 - b) * (255 - tb)) / 255;\n          break;\n        case 'add':\n          oR = r + tr;\n          oG = g + tg;\n          oB = b + tb;\n          break;\n        case 'difference':\n          oR = Math.abs(r - tr);\n          oG = Math.abs(g - tg);\n          oB = Math.abs(b - tb);\n          break;\n        case 'subtract':\n          oR = r - tr;\n          oG = g - tg;\n          oB = b - tb;\n          break;\n        case 'darken':\n          oR = Math.min(r, tr);\n          oG = Math.min(g, tg);\n          oB = Math.min(b, tb);\n          break;\n        case 'lighten':\n          oR = Math.max(r, tr);\n          oG = Math.max(g, tg);\n          oB = Math.max(b, tb);\n          break;\n        case 'overlay':\n          oR =\n            tr < 128\n              ? (2 * r * tr) / 255\n              : 255 - (2 * (255 - r) * (255 - tr)) / 255;\n          oG =\n            tg < 128\n              ? (2 * g * tg) / 255\n              : 255 - (2 * (255 - g) * (255 - tg)) / 255;\n          oB =\n            tb < 128\n              ? (2 * b * tb) / 255\n              : 255 - (2 * (255 - b) * (255 - tb)) / 255;\n          break;\n        case 'exclusion':\n          oR = tr + r - (2 * tr * r) / 255;\n          oG = tg + g - (2 * tg * g) / 255;\n          oB = tb + b - (2 * tb * b) / 255;\n          break;\n        case 'tint':\n          oR = tr + r * alpha1;\n          oG = tg + g * alpha1;\n          oB = tb + b * alpha1;\n      }\n      data[i] = oR;\n      data[i + 1] = oG;\n      data[i + 2] = oB;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const source = new Color(this.color).getSource();\n    source[0] = (this.alpha * source[0]) / 255;\n    source[1] = (this.alpha * source[1]) / 255;\n    source[2] = (this.alpha * source[2]) / 255;\n    source[3] = this.alpha;\n    gl.uniform4fv(uniformLocations.uColor, source);\n  }\n}\n\nclassRegistry.setClass(BlendColor);\n", "import type { TBlendImageMode } from '../BlendImage';\n\nexport const fragmentSource: Record<TBlendImageMode, string> = {\n  multiply: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.rgba *= color2.rgba;\n      gl_FragColor = color;\n    }\n    `,\n  mask: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.a = color2.a;\n      gl_FragColor = color;\n    }\n    `,\n} as const;\n\nexport const vertexSource = `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    uniform mat3 uTransformMatrix;\n    void main() {\n      vTexCoord = aPosition;\n      vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }\n    ` as const;\n", "import { FabricImage } from '../shapes/Image';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TWebGLPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport type { WebGLFilterBackend } from './WebGLFilterBackend';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource, vertexSource } from './shaders/blendImage';\n\nexport type TBlendImageMode = 'multiply' | 'mask';\n\ntype BlendImageOwnProps = {\n  mode: TBlendImageMode;\n  alpha: number;\n};\n\nexport const blendImageDefaultValues: BlendImageOwnProps = {\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Image Blend filter class\n * @example\n * const filter = new filters.BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendImage extends BaseFilter<'BlendImage', BlendImageOwnProps> {\n  /**\n   * Image to make the blend operation with.\n   **/\n  declare image: FabricImage;\n\n  /**\n   * Blend mode for the filter: either 'multiply' or 'mask'. 'multiply' will\n   * multiply the values of each channel (R, G, B, and A) of the filter image by\n   * their corresponding values in the base image. 'mask' will only look at the\n   * alpha channel of the filter image, and apply those values to the base\n   * image's alpha channel.\n   * @type String\n   * @default\n   **/\n  declare mode: BlendImageOwnProps['mode'];\n\n  /**\n   * alpha value. represent the strength of the blend image operation.\n   * not implemented.\n   **/\n  declare alpha: BlendImageOwnProps['alpha'];\n\n  static type = 'BlendImage';\n\n  static defaults = blendImageDefaultValues;\n\n  static uniformLocations = ['uTransformMatrix', 'uImage'];\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  getFragmentSource(): string {\n    return fragmentSource[this.mode];\n  }\n\n  getVertexSource(): string {\n    return vertexSource;\n  }\n\n  applyToWebGL(options: TWebGLPipelineState) {\n    const gl = options.context,\n      texture = this.createTexture(options.filterBackend, this.image);\n    this.bindAdditionalTexture(gl, texture!, gl.TEXTURE1);\n    super.applyToWebGL(options);\n    this.unbindAdditionalTexture(gl, gl.TEXTURE1);\n  }\n\n  createTexture(backend: WebGLFilterBackend, image: FabricImage) {\n    return backend.getCachedTexture(image.cacheKey, image.getElement());\n  }\n\n  /**\n   * Calculate a transformMatrix to adapt the image to blend over\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  calculateMatrix() {\n    const image = this.image,\n      { width, height } = image.getElement();\n    return [\n      1 / image.scaleX,\n      0,\n      0,\n      0,\n      1 / image.scaleY,\n      0,\n      -image.left / width,\n      -image.top / height,\n      1,\n    ];\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({\n    imageData: { data, width, height },\n    filterBackend: { resources },\n  }: T2DPipelineState) {\n    const image = this.image;\n    if (!resources.blendImage) {\n      resources.blendImage = createCanvasElement();\n    }\n    const canvas1 = resources.blendImage;\n    const context = canvas1.getContext('2d')!;\n    if (canvas1.width !== width || canvas1.height !== height) {\n      canvas1.width = width;\n      canvas1.height = height;\n    } else {\n      context.clearRect(0, 0, width, height);\n    }\n    context.setTransform(\n      image.scaleX,\n      0,\n      0,\n      image.scaleY,\n      image.left,\n      image.top,\n    );\n    context.drawImage(image.getElement(), 0, 0, width, height);\n    const blendData = context.getImageData(0, 0, width, height).data;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const a = data[i + 3];\n\n      const tr = blendData[i];\n      const tg = blendData[i + 1];\n      const tb = blendData[i + 2];\n      const ta = blendData[i + 3];\n\n      switch (this.mode) {\n        case 'multiply':\n          data[i] = (r * tr) / 255;\n          data[i + 1] = (g * tg) / 255;\n          data[i + 2] = (b * tb) / 255;\n          data[i + 3] = (a * ta) / 255;\n          break;\n        case 'mask':\n          data[i + 3] = ta;\n          break;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const matrix = this.calculateMatrix();\n    gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\n    gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * TODO: Handle the possibility of missing image better.\n   * As of now a BlendImage filter without image can't be used with fromObject\n   * @return {Object} Object representation of an instance\n   */\n  toObject(): {\n    type: 'BlendImage';\n    image: ReturnType<FabricImage['toObject']>;\n  } & BlendImageOwnProps {\n    return {\n      ...super.toObject(),\n      image: this.image && this.image.toObject(),\n    };\n  }\n\n  /**\n   * Create filter instance from an object representation\n   * @static\n   * @param {object} object Object to create an instance from\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting image loading, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<BlendImage>}\n   */\n  static async fromObject(\n    { type, image, ...filterOptions }: Record<string, any>,\n    options: { signal: AbortSignal },\n  ): Promise<BaseFilter<'BlendImage', BlendImageOwnProps>> {\n    return FabricImage.fromObject(image, options).then(\n      (enlivedImage) =>\n        new this({ ...filterOptions, image: enlivedImage }) as BlendImage,\n    );\n  }\n}\n\nclassRegistry.setClass(BlendImage);\n", "import { BaseFilter } from './BaseFilter';\nimport type {\n  TWebGLPipelineState,\n  T2DPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/blur';\n\ntype BlurOwnProps = {\n  blur: number;\n};\n\nexport const blurDefaultValues: BlurOwnProps = {\n  blur: 0,\n};\n\n/**\n * Blur filter class\n * @example\n * const filter = new Blur({\n *   blur: 0.5\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Blur extends BaseFilter<'Blur', BlurOwnProps> {\n  /**\n   * blur value, in percentage of image dimensions.\n   * specific to keep the image blur constant at different resolutions\n   * range between 0 and 1.\n   * @type Number\n   * @default\n   */\n  declare blur: BlurOwnProps['blur'];\n\n  declare horizontal: boolean;\n  declare aspectRatio: number;\n\n  static type = 'Blur';\n\n  static defaults = blurDefaultValues;\n\n  static uniformLocations = ['uDelta'];\n\n  getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      // this aspectRatio is used to give the same blur to vertical and horizontal\n      this.aspectRatio = options.sourceWidth / options.sourceHeight;\n      options.passes++;\n      this._setupFrameBuffer(options);\n      this.horizontal = true;\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n      this._setupFrameBuffer(options);\n      this.horizontal = false;\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    } else {\n      this.applyTo2d(options);\n    }\n  }\n\n  applyTo2d({ imageData: { data, width, height } }: T2DPipelineState) {\n    // this code mimic the shader for output consistency\n    // it samples 31 pixels across the image over a distance that depends from the blur value.\n    this.aspectRatio = width / height;\n    this.horizontal = true;\n    let blurValue = this.getBlurValue() * width;\n    const imageData = new Uint8ClampedArray(data);\n    const samples = 15;\n    const bytesInRow = 4 * width;\n    for (let i = 0; i < data.length; i += 4) {\n      let r = 0.0,\n        g = 0.0,\n        b = 0.0,\n        a = 0.0,\n        totalA = 0;\n      const minIRow = i - (i % bytesInRow);\n      const maxIRow = minIRow + bytesInRow;\n      // for now let's keep noise out of the way\n      // let pixelOffset = 0;\n      // const offset = Math.random() * 3;\n      // if (offset > 2) {\n      //   pixelOffset = 4;\n      // } else if (offset < 1) {\n      //   pixelOffset = -4;\n      // }\n      for (let j = -samples + 1; j < samples; j++) {\n        const percent = j / samples;\n        const distance = Math.floor(blurValue * percent) * 4;\n        const weight = 1 - Math.abs(percent);\n        let sampledPixel = i + distance; // + pixelOffset;\n        // try to implement edge mirroring\n        if (sampledPixel < minIRow) {\n          sampledPixel = minIRow;\n        } else if (sampledPixel > maxIRow) {\n          sampledPixel = maxIRow;\n        }\n        const localAlpha = data[sampledPixel + 3] * weight;\n        r += data[sampledPixel] * localAlpha;\n        g += data[sampledPixel + 1] * localAlpha;\n        b += data[sampledPixel + 2] * localAlpha;\n        a += localAlpha;\n        totalA += weight;\n      }\n      imageData[i] = r / a;\n      imageData[i + 1] = g / a;\n      imageData[i + 2] = b / a;\n      imageData[i + 3] = a / totalA;\n    }\n    this.horizontal = false;\n    blurValue = this.getBlurValue() * height;\n    for (let i = 0; i < imageData.length; i += 4) {\n      let r = 0.0,\n        g = 0.0,\n        b = 0.0,\n        a = 0.0,\n        totalA = 0;\n      const minIRow = i % bytesInRow;\n      const maxIRow = imageData.length - bytesInRow + minIRow;\n      // for now let's keep noise out of the way\n      // let pixelOffset = 0;\n      // const offset = Math.random() * 3;\n      // if (offset > 2) {\n      //   pixelOffset = bytesInRow;\n      // } else if (offset < 1) {\n      //   pixelOffset = -bytesInRow;\n      // }\n      for (let j = -samples + 1; j < samples; j++) {\n        const percent = j / samples;\n        const distance = Math.floor(blurValue * percent) * bytesInRow;\n        const weight = 1 - Math.abs(percent);\n        let sampledPixel = i + distance; // + pixelOffset;\n        // try to implement edge mirroring\n        if (sampledPixel < minIRow) {\n          sampledPixel = minIRow;\n        } else if (sampledPixel > maxIRow) {\n          sampledPixel = maxIRow;\n        }\n        const localAlpha = imageData[sampledPixel + 3] * weight;\n        r += imageData[sampledPixel] * localAlpha;\n        g += imageData[sampledPixel + 1] * localAlpha;\n        b += imageData[sampledPixel + 2] * localAlpha;\n        a += localAlpha;\n        totalA += weight;\n      }\n      data[i] = r / a;\n      data[i + 1] = g / a;\n      data[i + 2] = b / a;\n      data[i + 3] = a / totalA;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const delta = this.chooseRightDelta();\n    gl.uniform2fv(uniformLocations.uDelta, delta);\n  }\n\n  isNeutralState() {\n    return this.blur === 0;\n  }\n\n  getBlurValue(): number {\n    let blurScale = 1;\n    const { horizontal, aspectRatio } = this;\n    if (horizontal) {\n      if (aspectRatio > 1) {\n        // image is wide, i want to shrink radius horizontal\n        blurScale = 1 / aspectRatio;\n      }\n    } else {\n      if (aspectRatio < 1) {\n        // image is tall, i want to shrink radius vertical\n        blurScale = aspectRatio;\n      }\n    }\n    return blurScale * this.blur * 0.12;\n  }\n\n  /**\n   * choose right value of image percentage to blur with\n   * @returns {Array} a numeric array with delta values\n   */\n  chooseRightDelta() {\n    const blur = this.getBlurValue();\n    return this.horizontal ? [blur, 0] : [0, blur];\n  }\n}\n\nclassRegistry.setClass(Blur);\n", "export const fragmentSource = `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform vec2 uDelta;\n    varying vec2 vTexCoord;\n    const float nSamples = 15.0;\n    vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\n    float random(vec3 scale) {\n      /* use the fragment position for a different seed per-pixel */\n      return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n    }\n    void main() {\n      vec4 color = vec4(0.0);\n      float totalC = 0.0;\n      float totalA = 0.0;\n      float offset = random(v3offset);\n      for (float t = -nSamples; t <= nSamples; t++) {\n        float percent = (t + offset - 0.5) / nSamples;\n        vec4 sample = texture2D(uTexture, vTexCoord + uDelta * percent);\n        float weight = 1.0 - abs(percent);\n        float alpha = weight * sample.a;\n        color.rgb += sample.rgb * alpha;\n        color.a += alpha;\n        totalA += weight;\n        totalC += alpha;\n      }\n      gl_FragColor.rgb = color.rgb / totalC;\n      gl_FragColor.a = color.a / totalA;\n    }\n  ` as const;\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/brightness';\n\ntype BrightnessOwnProps = {\n  brightness: number;\n};\n\nexport const brightnessDefaultValues: BrightnessOwnProps = {\n  brightness: 0,\n};\n\n/**\n * Brightness filter class\n * @example\n * const filter = new Brightness({\n *   brightness: 0.05\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Brightness extends BaseFilter<'Brightness', BrightnessOwnProps> {\n  /**\n   * Brightness value, from -1 to 1.\n   * translated to -255 to 255 for 2d\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Number} brightness\n   * @default\n   */\n  declare brightness: BrightnessOwnProps['brightness'];\n\n  static type = 'Brightness';\n\n  static defaults = brightnessDefaultValues;\n\n  static uniformLocations = ['uBrightness'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const brightness = Math.round(this.brightness * 255);\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] += brightness;\n      data[i + 1] += brightness;\n      data[i + 2] += brightness;\n    }\n  }\n\n  isNeutralState() {\n    return this.brightness === 0;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uBrightness, this.brightness);\n  }\n}\n\nclassRegistry.setClass(Brightness);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBrightness;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += uBrightness;\n    gl_FragColor = color;\n  }\n`;\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  varying vec2 vTexCoord;\n  uniform mat4 uColorMatrix;\n  uniform vec4 uConstants;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color *= uColorMatrix;\n    color += uConstants;\n    gl_FragColor = color;\n  }`;\n", "import { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TMatColorMatrix,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/colorMatrix';\n\nexport type ColorMatrixOwnProps = {\n  matrix: TMatColorMatrix;\n  colorsOnly: boolean;\n};\n\nexport const colorMatrixDefaultValues: ColorMatrixOwnProps = {\n  matrix: [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],\n  colorsOnly: true,\n};\n\n/**\n   * Color Matrix filter class\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl demo}\n   * @example <caption>Kodachrome filter</caption>\n   * const filter = new ColorMatrix({\n   *  matrix: [\n       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n       0, 0, 0, 1, 0\n      ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\nexport class ColorMatrix<\n  Name extends string = 'ColorMatrix',\n  OwnProps extends object = ColorMatrixOwnProps,\n  SerializedProps extends object = ColorMatrixOwnProps,\n> extends BaseFilter<Name, OwnProps, SerializedProps> {\n  /**\n   * Colormatrix for pixels.\n   * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n   * outside the -1, 1 range.\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Array} matrix array of 20 numbers.\n   * @default\n   */\n  declare matrix: ColorMatrixOwnProps['matrix'];\n\n  /**\n   * Lock the colormatrix on the color part, skipping alpha, mainly for non webgl scenario\n   * to save some calculation\n   * @type Boolean\n   * @default true\n   */\n  declare colorsOnly: ColorMatrixOwnProps['colorsOnly'];\n\n  static type = 'ColorMatrix';\n\n  static defaults = colorMatrixDefaultValues;\n\n  static uniformLocations = ['uColorMatrix', 'uConstants'];\n\n  getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d(options: T2DPipelineState) {\n    const imageData = options.imageData,\n      data = imageData.data,\n      m = this.matrix,\n      colorsOnly = this.colorsOnly;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\n      data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\n      data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\n      if (!colorsOnly) {\n        const a = data[i + 3];\n        data[i] += a * m[3];\n        data[i + 1] += a * m[8];\n        data[i + 2] += a * m[13];\n        data[i + 3] =\n          r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const m = this.matrix,\n      matrix = [\n        m[0],\n        m[1],\n        m[2],\n        m[3],\n        m[5],\n        m[6],\n        m[7],\n        m[8],\n        m[10],\n        m[11],\n        m[12],\n        m[13],\n        m[15],\n        m[16],\n        m[17],\n        m[18],\n      ],\n      constants = [m[4], m[9], m[14], m[19]];\n    gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\n    gl.uniform4fv(uniformLocations.uConstants, constants);\n  }\n\n  toObject(): { type: Name } & SerializedProps {\n    return {\n      ...super.toObject(),\n      matrix: [...this.matrix] as TMatColorMatrix,\n    };\n  }\n}\n\nclassRegistry.setClass(ColorMatrix);\n", "import { ColorMatrix } from './ColorMatrix';\nimport { classRegistry } from '../ClassRegistry';\nimport type { TMatColorMatrix } from './typedefs';\n\ntype FixedFiltersOwnProps = {\n  colorsOnly: boolean;\n};\n\nexport function createColorMatrixFilter(key: string, matrix: TMatColorMatrix) {\n  const newClass = class extends ColorMatrix<\n    typeof key,\n    FixedFiltersOwnProps,\n    FixedFiltersOwnProps\n  > {\n    static type = key;\n\n    static defaults = {\n      colorsOnly: false,\n      matrix,\n    };\n\n    toObject(): { type: string } & FixedFiltersOwnProps {\n      return { type: this.type, colorsOnly: this.colorsOnly };\n    }\n  };\n  classRegistry.setClass(newClass, key);\n  return newClass as typeof ColorMatrix<typeof key, FixedFiltersOwnProps>;\n}\n\nexport const Brownie = createColorMatrixFilter(\n  'Brownie',\n  [\n    0.5997, 0.34553, -0.27082, 0, 0.186, -0.0377, 0.86095, 0.15059, 0, -0.1449,\n    0.24113, -0.07441, 0.44972, 0, -0.02965, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Vintage = createColorMatrixFilter(\n  'Vintage',\n  [\n    0.62793, 0.32021, -0.03965, 0, 0.03784, 0.02578, 0.64411, 0.03259, 0,\n    0.02926, 0.0466, -0.08512, 0.52416, 0, 0.02023, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Kodachrome = createColorMatrixFilter(\n  'Kodachrome',\n  [\n    1.12855, -0.39673, -0.03992, 0, 0.24991, -0.16404, 1.08352, -0.05498, 0,\n    0.09698, -0.16786, -0.56034, 1.60148, 0, 0.13972, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Technicolor = createColorMatrixFilter(\n  'Technicolor',\n  [\n    1.91252, -0.85453, -0.09155, 0, 0.04624, -0.30878, 1.76589, -0.10601, 0,\n    -0.27589, -0.2311, -0.75018, 1.84759, 0, 0.12137, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Polaroid = createColorMatrixFilter(\n  'Polaroid',\n  [\n    1.438, -0.062, -0.062, 0, 0, -0.122, 1.378, -0.122, 0, 0, -0.016, -0.016,\n    1.483, 0, 0, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Sepia = createColorMatrixFilter(\n  'Sepia',\n  [\n    0.393, 0.769, 0.189, 0, 0, 0.349, 0.686, 0.168, 0, 0, 0.272, 0.534, 0.131,\n    0, 0, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const BlackWhite = createColorMatrixFilter(\n  'BlackWhite',\n  [\n    1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 0, 0, 0,\n    1, 0,\n  ],\n);\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLPipelineState } from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\n\ntype ComposedOwnProps = {\n  subFilters: BaseFilter<string, object, object>[];\n};\n\ntype ComposedSerializedProps = {\n  subFilters: Record<string, unknown>[];\n};\n\n/**\n * A container class that knows how to apply a sequence of filters to an input image.\n */\nexport class Composed extends BaseFilter<\n  'Composed',\n  ComposedOwnProps,\n  ComposedSerializedProps\n> {\n  /**\n   * A non sparse array of filters to apply\n   */\n  declare subFilters: ComposedOwnProps['subFilters'];\n\n  static type = 'Composed';\n\n  constructor(\n    options: { subFilters?: BaseFilter<string, object>[] } & Record<\n      string,\n      any\n    > = {},\n  ) {\n    super(options);\n    this.subFilters = options.subFilters || [];\n  }\n\n  /**\n   * Apply this container's filters to the input image provided.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be applied.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      options.passes += this.subFilters.length - 1;\n    }\n    this.subFilters.forEach((filter) => {\n      filter.applyTo(options);\n    });\n  }\n\n  /**\n   * Serialize this filter into JSON.\n   * @returns {Object} A JSON representation of this filter.\n   */\n  toObject() {\n    return {\n      type: this.type,\n      subFilters: this.subFilters.map((filter) => filter.toObject()),\n    };\n  }\n\n  isNeutralState() {\n    return !this.subFilters.some((filter) => !filter.isNeutralState());\n  }\n\n  /**\n   * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\n   * @static\n   * @param {oject} object Object to create an instance from\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting `BlendImage` filter loading, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<Composed>}\n   */\n  static fromObject(\n    object: Record<string, any>,\n    options: { signal: AbortSignal },\n  ): Promise<Composed> {\n    return Promise.all(\n      ((object.subFilters || []) as BaseFilter<string, object>[]).map(\n        (filter) =>\n          classRegistry\n            .getClass<typeof BaseFilter>(filter.type)\n            .fromObject(filter, options),\n      ),\n    ).then(\n      (enlivedFilters) => new this({ subFilters: enlivedFilters }) as Composed,\n    );\n  }\n}\n\nclassRegistry.setClass(Composed);\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/constrast';\n\ntype ContrastOwnProps = {\n  contrast: number;\n};\n\nexport const contrastDefaultValues: ContrastOwnProps = {\n  contrast: 0,\n};\n\n/**\n * Contrast filter class\n * @example\n * const filter = new Contrast({\n *   contrast: 0.25\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Contrast extends BaseFilter<'Contrast', ContrastOwnProps> {\n  /**\n   * contrast value, range from -1 to 1.\n   * @param {Number} contrast\n   * @default 0\n   */\n  declare contrast: ContrastOwnProps['contrast'];\n\n  static type = 'Contrast';\n\n  static defaults = contrastDefaultValues;\n\n  static uniformLocations = ['uContrast'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  isNeutralState() {\n    return this.contrast === 0;\n  }\n\n  /**\n   * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const contrast = Math.floor(this.contrast * 255),\n      contrastF = (259 * (contrast + 255)) / (255 * (259 - contrast));\n\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = contrastF * (data[i] - 128) + 128;\n      data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\n      data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uContrast, this.contrast);\n  }\n}\n\nclassRegistry.setClass(Contrast);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uContrast;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\n    color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\n    gl_FragColor = color;\n  }`;\n", "export const fragmentSource = {\n  Convolute_3_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_3_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_5_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_5_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_7_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_7_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_9_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_9_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n};\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/convolute';\n\nexport type ConvoluteOwnProps = {\n  opaque: boolean;\n  matrix: number[];\n};\n\nexport const convoluteDefaultValues: ConvoluteOwnProps = {\n  opaque: false,\n  matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],\n};\n\n/**\n * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\n * @example <caption>Sharpen filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 0, -1,  0,\n *            -1,  5, -1,\n *             0, -1,  0 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Blur filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 1/9, 1/9, 1/9,\n *             1/9, 1/9, 1/9,\n *             1/9, 1/9, 1/9 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Emboss filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 1,   1,  1,\n *             1, 0.7, -1,\n *            -1,  -1, -1 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Emboss filter with opaqueness</caption>\n * const filter = new Convolute({\n *   opaque: true,\n *   matrix: [ 1,   1,  1,\n *             1, 0.7, -1,\n *            -1,  -1, -1 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Convolute extends BaseFilter<'Convolute', ConvoluteOwnProps> {\n  /*\n   * Opaque value (true/false)\n   */\n  declare opaque: ConvoluteOwnProps['opaque'];\n\n  /*\n   * matrix for the filter, max 9x9\n   */\n  declare matrix: ConvoluteOwnProps['matrix'];\n\n  static type = 'Convolute';\n\n  static defaults = convoluteDefaultValues;\n\n  static uniformLocations = ['uMatrix', 'uOpaque', 'uHalfSize', 'uSize'];\n\n  getCacheKey() {\n    return `${this.type}_${Math.sqrt(this.matrix.length)}_${\n      this.opaque ? 1 : 0\n    }` as keyof typeof fragmentSource;\n  }\n\n  getFragmentSource() {\n    return fragmentSource[this.getCacheKey()];\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d(options: T2DPipelineState) {\n    const imageData = options.imageData,\n      data = imageData.data,\n      weights = this.matrix,\n      side = Math.round(Math.sqrt(weights.length)),\n      halfSide = Math.floor(side / 2),\n      sw = imageData.width,\n      sh = imageData.height,\n      output = options.ctx.createImageData(sw, sh),\n      dst = output.data,\n      // go through the destination image pixels\n      alphaFac = this.opaque ? 1 : 0;\n    let r, g, b, a, dstOff, scx, scy, srcOff, wt, x, y, cx, cy;\n\n    for (y = 0; y < sh; y++) {\n      for (x = 0; x < sw; x++) {\n        dstOff = (y * sw + x) * 4;\n        // calculate the weighed sum of the source image pixels that\n        // fall under the convolution matrix\n        r = 0;\n        g = 0;\n        b = 0;\n        a = 0;\n\n        for (cy = 0; cy < side; cy++) {\n          for (cx = 0; cx < side; cx++) {\n            scy = y + cy - halfSide;\n            scx = x + cx - halfSide;\n\n            // eslint-disable-next-line max-depth\n            if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {\n              continue;\n            }\n\n            srcOff = (scy * sw + scx) * 4;\n            wt = weights[cy * side + cx];\n\n            r += data[srcOff] * wt;\n            g += data[srcOff + 1] * wt;\n            b += data[srcOff + 2] * wt;\n            // eslint-disable-next-line max-depth\n            if (!alphaFac) {\n              a += data[srcOff + 3] * wt;\n            }\n          }\n        }\n        dst[dstOff] = r;\n        dst[dstOff + 1] = g;\n        dst[dstOff + 2] = b;\n        if (!alphaFac) {\n          dst[dstOff + 3] = a;\n        } else {\n          dst[dstOff + 3] = data[dstOff + 3];\n        }\n      }\n    }\n    options.imageData = output;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject() {\n    return {\n      ...super.toObject(),\n      opaque: this.opaque,\n      matrix: [...this.matrix],\n    };\n  }\n}\n\nclassRegistry.setClass(Convolute);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform vec3 uGamma;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    vec3 correction = (1.0 / uGamma);\n    color.r = pow(color.r, correction.r);\n    color.g = pow(color.g, correction.g);\n    color.b = pow(color.b, correction.b);\n    gl_FragColor = color;\n    gl_FragColor.rgb *= color.a;\n  }\n`;\n", "import { BaseFilter } from './BaseFilter';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/gamma';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\n\nconst GAMMA = 'Gamma' as const;\n\nexport type GammaInput = [number, number, number];\n\nexport type GammaOwnProps = {\n  gamma: GammaInput;\n};\n\nexport const gammaDefaultValues: GammaOwnProps = {\n  gamma: [1, 1, 1],\n};\n\n/**\n * Gamma filter class\n * @example\n * const filter = new Gamma({\n *   gamma: [1, 0.5, 2.1]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Gamma extends BaseFilter<typeof GAMMA, GammaOwnProps> {\n  /**\n   * Gamma array value, from 0.01 to 2.2.\n   * @param {Array} gamma\n   * @default\n   */\n  declare gamma: GammaOwnProps['gamma'];\n  declare rgbValues?: {\n    r: Uint8Array;\n    g: Uint8Array;\n    b: Uint8Array;\n  };\n\n  static type = GAMMA;\n\n  static defaults = gammaDefaultValues;\n\n  static uniformLocations = ['uGamma'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  constructor(options: { gamma?: GammaInput } = {}) {\n    super(options);\n    this.gamma =\n      options.gamma ||\n      ((\n        this.constructor as typeof Gamma\n      ).defaults.gamma.concat() as GammaInput);\n  }\n\n  /**\n   * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const gamma = this.gamma,\n      rInv = 1 / gamma[0],\n      gInv = 1 / gamma[1],\n      bInv = 1 / gamma[2];\n\n    if (!this.rgbValues) {\n      this.rgbValues = {\n        r: new Uint8Array(256),\n        g: new Uint8Array(256),\n        b: new Uint8Array(256),\n      };\n    }\n\n    // This is an optimization - pre-compute a look-up table for each color channel\n    // instead of performing these pow calls for each pixel in the image.\n    const rgb = this.rgbValues;\n    for (let i = 0; i < 256; i++) {\n      rgb.r[i] = Math.pow(i / 255, rInv) * 255;\n      rgb.g[i] = Math.pow(i / 255, gInv) * 255;\n      rgb.b[i] = Math.pow(i / 255, bInv) * 255;\n    }\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = rgb.r[data[i]];\n      data[i + 1] = rgb.g[data[i + 1]];\n      data[i + 2] = rgb.b[data[i + 2]];\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform3fv(uniformLocations.uGamma, this.gamma);\n  }\n\n  isNeutralState() {\n    const { gamma } = this;\n    return gamma[0] === 1 && gamma[1] === 1 && gamma[2] === 1;\n  }\n\n  toObject(): { type: typeof GAMMA; gamma: GammaInput } {\n    return {\n      type: GAMMA,\n      gamma: this.gamma.concat() as GammaInput,\n    };\n  }\n}\n\nclassRegistry.setClass(Gamma);\n", "import type { TGrayscaleMode } from '../Grayscale';\n\nexport const fragmentSource: Record<TGrayscaleMode, string> = {\n  average: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      float average = (color.r + color.b + color.g) / 3.0;\n      gl_FragColor = vec4(average, average, average, color.a);\n    }\n    `,\n  lightness: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `,\n  luminosity: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `,\n};\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/grayscale';\n\nexport type TGrayscaleMode = 'average' | 'lightness' | 'luminosity';\n\ntype GrayscaleOwnProps = {\n  mode: TGrayscaleMode;\n};\n\nexport const grayscaleDefaultValues: GrayscaleOwnProps = {\n  mode: 'average',\n};\n\n/**\n * Grayscale image filter class\n * @example\n * const filter = new Grayscale();\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Grayscale extends BaseFilter<'Grayscale', GrayscaleOwnProps> {\n  declare mode: TGrayscaleMode;\n\n  static type = 'Grayscale';\n\n  static defaults = grayscaleDefaultValues;\n\n  static uniformLocations = ['uMode'];\n\n  /**\n   * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    for (let i = 0, value: number; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      switch (this.mode) {\n        case 'average':\n          value = (r + g + b) / 3;\n          break;\n        case 'lightness':\n          value = (Math.min(r, g, b) + Math.max(r, g, b)) / 2;\n          break;\n        case 'luminosity':\n          value = 0.21 * r + 0.72 * g + 0.07 * b;\n          break;\n      }\n\n      data[i + 2] = data[i + 1] = data[i] = value;\n    }\n  }\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  getFragmentSource() {\n    return fragmentSource[this.mode];\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const mode = 1;\n    gl.uniform1i(uniformLocations.uMode, mode);\n  }\n\n  /**\n   * Grayscale filter isNeutralState implementation\n   * The filter is never neutral\n   * on the image\n   **/\n  isNeutralState() {\n    return false;\n  }\n}\n\nclassRegistry.setClass(Grayscale);\n", "import { cos } from '../util/misc/cos';\nimport { sin } from '../util/misc/sin';\nimport {\n  ColorMatrix,\n  type ColorMatrixOwnProps,\n  colorMatrixDefaultValues,\n} from './ColorMatrix';\nimport type { TWebGLPipelineState, T2DPipelineState } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\n\nexport type HueRotationOwnProps = ColorMatrixOwnProps & {\n  rotation: number;\n};\n\nexport type HueRotationSerializedProps = {\n  rotation: number;\n};\n\nexport const hueRotationDefaultValues: HueRotationOwnProps = {\n  ...colorMatrixDefaultValues,\n  rotation: 0,\n};\n\n/**\n * HueRotation filter class\n * @example\n * const filter = new HueRotation({\n *   rotation: -0.5\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class HueRotation extends ColorMatrix<\n  'HueRotation',\n  HueRotationOwnProps,\n  HueRotationSerializedProps\n> {\n  /**\n   * HueRotation value, from -1 to 1.\n   */\n  declare rotation: HueRotationOwnProps['rotation'];\n\n  static type = 'HueRotation';\n\n  static defaults = hueRotationDefaultValues;\n\n  calculateMatrix() {\n    const rad = this.rotation * Math.PI,\n      cosine = cos(rad),\n      sine = sin(rad),\n      aThird = 1 / 3,\n      aThirdSqtSin = Math.sqrt(aThird) * sine,\n      OneMinusCos = 1 - cosine;\n    this.matrix = [\n      cosine + OneMinusCos / 3,\n      aThird * OneMinusCos - aThirdSqtSin,\n      aThird * OneMinusCos + aThirdSqtSin,\n      0,\n      0,\n      aThird * OneMinusCos + aThirdSqtSin,\n      cosine + aThird * OneMinusCos,\n      aThird * OneMinusCos - aThirdSqtSin,\n      0,\n      0,\n      aThird * OneMinusCos - aThirdSqtSin,\n      aThird * OneMinusCos + aThirdSqtSin,\n      cosine + aThird * OneMinusCos,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n    ];\n  }\n\n  isNeutralState() {\n    return this.rotation === 0;\n  }\n\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    this.calculateMatrix();\n    super.applyTo(options);\n  }\n\n  toObject() {\n    return {\n      type: this.type,\n      rotation: this.rotation,\n    };\n  }\n}\n\nclassRegistry.setClass(HueRotation);\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/invert';\n\nexport type InvertOwnProps = {\n  alpha: boolean;\n  invert: boolean;\n};\n\nexport const invertDefaultValues: InvertOwnProps = {\n  alpha: false,\n  invert: true,\n};\n\n/**\n * @example\n * const filter = new Invert();\n * object.filters.push(filter);\n * object.applyFilters(canvas.renderAll.bind(canvas));\n */\nexport class Invert extends BaseFilter<'Invert', InvertOwnProps> {\n  /**\n   * Invert also alpha.\n   * @param {Boolean} alpha\n   * @default\n   **/\n  declare alpha: InvertOwnProps['alpha'];\n\n  /**\n   * Filter invert. if false, does nothing\n   * @param {Boolean} invert\n   * @default\n   */\n  declare invert: InvertOwnProps['invert'];\n\n  static type = 'Invert';\n\n  static defaults = invertDefaultValues;\n\n  static uniformLocations = ['uInvert', 'uAlpha'];\n\n  /**\n   * Apply the Invert operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = 255 - data[i];\n      data[i + 1] = 255 - data[i + 1];\n      data[i + 2] = 255 - data[i + 2];\n\n      if (this.alpha) {\n        data[i + 3] = 255 - data[i + 3];\n      }\n    }\n  }\n\n  protected getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Invert filter isNeutralState implementation\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * @param {Object} options\n   **/\n  isNeutralState() {\n    return !this.invert;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1i(uniformLocations.uInvert, Number(this.invert));\n    gl.uniform1i(uniformLocations.uAlpha, Number(this.alpha));\n  }\n}\n\nclassRegistry.setClass(Invert);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform int uInvert;\n  uniform int uAlpha;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    if (uInvert == 1) {\n      if (uAlpha == 1) {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,1.0 -color.a);\n      } else {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n      }\n    } else {\n      gl_FragColor = color;\n    }\n  }\n`;\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/noise';\n\nexport type NoiseOwnProps = {\n  noise: number;\n};\n\nexport const noiseDefaultValues: NoiseOwnProps = {\n  noise: 0,\n};\n\n/**\n * Noise filter class\n * @example\n * const filter = new Noise({\n *   noise: 700\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Noise extends BaseFilter<'Noise', NoiseOwnProps> {\n  /**\n   * Noise value, from\n   * @param {Number} noise\n   * @default\n   */\n  declare noise: NoiseOwnProps['noise'];\n\n  static type = 'Noise';\n\n  static defaults = noiseDefaultValues;\n\n  static uniformLocations = ['uNoise', 'uSeed'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const noise = this.noise;\n    for (let i = 0; i < data.length; i += 4) {\n      const rand = (0.5 - Math.random()) * noise;\n      data[i] += rand;\n      data[i + 1] += rand;\n      data[i + 2] += rand;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\n    gl.uniform1f(uniformLocations.uSeed, Math.random());\n  }\n\n  isNeutralState() {\n    return this.noise === 0;\n  }\n}\n\nclassRegistry.setClass(Noise);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uStepH;\n  uniform float uNoise;\n  uniform float uSeed;\n  varying vec2 vTexCoord;\n  float rand(vec2 co, float seed, float vScale) {\n    return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n  }\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\n    gl_FragColor = color;\n  }\n`;\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/pixelate';\n\nexport type PixelateOwnProps = {\n  blocksize: number;\n};\n\nexport const pixelateDefaultValues: PixelateOwnProps = {\n  blocksize: 4,\n};\n\n/**\n * Pixelate filter class\n * @example\n * const filter = new Pixelate({\n *   blocksize: 8\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Pixelate extends BaseFilter<'Pixelate', PixelateOwnProps> {\n  declare blocksize: PixelateOwnProps['blocksize'];\n\n  static type = 'Pixelate';\n\n  static defaults = pixelateDefaultValues;\n\n  static uniformLocations = ['uBlocksize'];\n\n  /**\n   * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data, width, height } }: T2DPipelineState) {\n    for (let i = 0; i < height; i += this.blocksize) {\n      for (let j = 0; j < width; j += this.blocksize) {\n        const index = i * 4 * width + j * 4;\n        const r = data[index];\n        const g = data[index + 1];\n        const b = data[index + 2];\n        const a = data[index + 3];\n\n        for (let _i = i; _i < Math.min(i + this.blocksize, height); _i++) {\n          for (let _j = j; _j < Math.min(j + this.blocksize, width); _j++) {\n            const index = _i * 4 * width + _j * 4;\n            data[index] = r;\n            data[index + 1] = g;\n            data[index + 2] = b;\n            data[index + 3] = a;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Indicate when the filter is not gonna apply changes to the image\n   **/\n  isNeutralState() {\n    return this.blocksize === 1;\n  }\n\n  protected getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\n  }\n}\n\nclassRegistry.setClass(Pixelate);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBlocksize;\n  uniform float uStepW;\n  uniform float uStepH;\n  varying vec2 vTexCoord;\n  void main() {\n    float blockW = uBlocksize * uStepW;\n    float blockH = uBlocksize * uStepH;\n    int posX = int(vTexCoord.x / blockW);\n    int posY = int(vTexCoord.y / blockH);\n    float fposX = float(posX);\n    float fposY = float(posY);\n    vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\n    vec4 color = texture2D(uTexture, squareCoords);\n    gl_FragColor = color;\n  }\n`;\n", "import { classRegistry } from '../ClassRegistry';\nimport { Color } from '../color/Color';\nimport { BaseFilter } from './BaseFilter';\nimport { fragmentShader } from './shaders/removeColor';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\n\nexport type RemoveColorOwnProps = {\n  color: string;\n  distance: number;\n  useAlpha: boolean;\n};\n\nexport const removeColorDefaultValues: RemoveColorOwnProps = {\n  color: '#FFFFFF',\n  distance: 0.02,\n  useAlpha: false,\n};\n\n/**\n * Remove white filter class\n * @example\n * const filter = new RemoveColor({\n *   threshold: 0.2,\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class RemoveColor extends BaseFilter<\n  'RemoveColor',\n  RemoveColorOwnProps\n> {\n  /**\n   * Color to remove, in any format understood by {@link Color}.\n   * @param {String} type\n   * @default\n   */\n  declare color: RemoveColorOwnProps['color'];\n\n  /**\n   * distance to actual color, as value up or down from each r,g,b\n   * between 0 and 1\n   **/\n  declare distance: RemoveColorOwnProps['distance'];\n\n  /**\n   * For color to remove inside distance, use alpha channel for a smoother deletion\n   * NOT IMPLEMENTED YET\n   **/\n  declare useAlpha: RemoveColorOwnProps['useAlpha'];\n\n  static type = 'RemoveColor';\n\n  static defaults = removeColorDefaultValues;\n\n  static uniformLocations = ['uLow', 'uHigh'];\n\n  getFragmentSource() {\n    return fragmentShader;\n  }\n\n  /**\n   * Applies filter to canvas element\n   * @param {Object} canvasEl Canvas element to apply filter to\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const distance = this.distance * 255,\n      source = new Color(this.color).getSource(),\n      lowC = [source[0] - distance, source[1] - distance, source[2] - distance],\n      highC = [\n        source[0] + distance,\n        source[1] + distance,\n        source[2] + distance,\n      ];\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      if (\n        r > lowC[0] &&\n        g > lowC[1] &&\n        b > lowC[2] &&\n        r < highC[0] &&\n        g < highC[1] &&\n        b < highC[2]\n      ) {\n        data[i + 3] = 0;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const source = new Color(this.color).getSource(),\n      distance = this.distance,\n      lowC = [\n        0 + source[0] / 255 - distance,\n        0 + source[1] / 255 - distance,\n        0 + source[2] / 255 - distance,\n        1,\n      ],\n      highC = [\n        source[0] / 255 + distance,\n        source[1] / 255 + distance,\n        source[2] / 255 + distance,\n        1,\n      ];\n    gl.uniform4fv(uniformLocations.uLow, lowC);\n    gl.uniform4fv(uniformLocations.uHigh, highC);\n  }\n}\n\nclassRegistry.setClass(RemoveColor);\n", "export const fragmentShader = `\nprecision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uLow;\nuniform vec4 uHigh;\nvarying vec2 vTexCoord;\nvoid main() {\n  gl_FragColor = texture2D(uTexture, vTexCoord);\n  if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\n    gl_FragColor.a = 0.0;\n  }\n}\n`;\n", "import { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TWebGLPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type { XY } from '../Point';\n\nexport type TResizeType = 'bilinear' | 'hermite' | 'sliceHack' | 'lanczos';\n\nexport type ResizeOwnProps = {\n  resizeType: TResizeType;\n  scaleX: number;\n  scaleY: number;\n  lanczosLobes: number;\n};\n\nexport const resizeDefaultValues: ResizeOwnProps = {\n  resizeType: 'hermite',\n  scaleX: 1,\n  scaleY: 1,\n  lanczosLobes: 3,\n};\n\ntype ResizeDuring2DResize = Resize & {\n  rcpScaleX: number;\n  rcpScaleY: number;\n};\n\ntype ResizeDuringWEBGLResize = Resize & {\n  rcpScaleX: number;\n  rcpScaleY: number;\n  horizontal: boolean;\n  width: number;\n  height: number;\n  taps: number[];\n  tempScale: number;\n  dH: number;\n  dW: number;\n};\n\n/**\n * Resize image filter class\n * @example\n * const filter = new Resize();\n * object.filters.push(filter);\n * object.applyFilters(canvas.renderAll.bind(canvas));\n */\nexport class Resize extends BaseFilter<'Resize', ResizeOwnProps> {\n  /**\n   * Resize type\n   * for webgl resizeType is just lanczos, for canvas2d can be:\n   * bilinear, hermite, sliceHack, lanczos.\n   * @default\n   */\n  declare resizeType: ResizeOwnProps['resizeType'];\n\n  /**\n   * Scale factor for resizing, x axis\n   * @param {Number} scaleX\n   * @default\n   */\n  declare scaleX: ResizeOwnProps['scaleX'];\n\n  /**\n   * Scale factor for resizing, y axis\n   * @param {Number} scaleY\n   * @default\n   */\n  declare scaleY: ResizeOwnProps['scaleY'];\n\n  /**\n   * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\n   * @param {Number} lanczosLobes\n   * @default\n   */\n  declare lanczosLobes: ResizeOwnProps['lanczosLobes'];\n\n  static type = 'Resize';\n\n  static defaults = resizeDefaultValues;\n\n  static uniformLocations = ['uDelta', 'uTaps'];\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    this: ResizeDuringWEBGLResize,\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform2fv(\n      uniformLocations.uDelta,\n      this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height],\n    );\n    gl.uniform1fv(uniformLocations.uTaps, this.taps);\n  }\n\n  getFilterWindow(this: ResizeDuringWEBGLResize) {\n    const scale = this.tempScale;\n    return Math.ceil(this.lanczosLobes / scale);\n  }\n\n  getCacheKey(this: ResizeDuringWEBGLResize): string {\n    const filterWindow = this.getFilterWindow();\n    return `${this.type}_${filterWindow}`;\n  }\n\n  getFragmentSource(this: ResizeDuringWEBGLResize): string {\n    const filterWindow = this.getFilterWindow();\n    return this.generateShader(filterWindow);\n  }\n\n  getTaps(this: ResizeDuringWEBGLResize) {\n    const lobeFunction = this.lanczosCreate(this.lanczosLobes),\n      scale = this.tempScale,\n      filterWindow = this.getFilterWindow(),\n      taps = new Array(filterWindow);\n    for (let i = 1; i <= filterWindow; i++) {\n      taps[i - 1] = lobeFunction(i * scale);\n    }\n    return taps;\n  }\n\n  /**\n   * Generate vertex and shader sources from the necessary steps numbers\n   * @param {Number} filterWindow\n   */\n  generateShader(filterWindow: number) {\n    const offsets = new Array(filterWindow);\n    for (let i = 1; i <= filterWindow; i++) {\n      offsets[i - 1] = `${i}.0 * uDelta`;\n    }\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec2 uDelta;\n      varying vec2 vTexCoord;\n      uniform float uTaps[${filterWindow}];\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        float sum = 1.0;\n        ${offsets\n          .map(\n            (offset, i) => `\n              color += texture2D(uTexture, vTexCoord + ${offset}) * uTaps[${i}] + texture2D(uTexture, vTexCoord - ${offset}) * uTaps[${i}];\n              sum += 2.0 * uTaps[${i}];\n            `,\n          )\n          .join('\\n')}\n        gl_FragColor = color / sum;\n      }\n    `;\n  }\n\n  applyToForWebgl(this: ResizeDuringWEBGLResize, options: TWebGLPipelineState) {\n    options.passes++;\n    this.width = options.sourceWidth;\n    this.horizontal = true;\n    this.dW = Math.round(this.width * this.scaleX);\n    this.dH = options.sourceHeight;\n    this.tempScale = this.dW / this.width;\n    this.taps = this.getTaps();\n    options.destinationWidth = this.dW;\n    super.applyTo(options);\n    options.sourceWidth = options.destinationWidth;\n\n    this.height = options.sourceHeight;\n    this.horizontal = false;\n    this.dH = Math.round(this.height * this.scaleY);\n    this.tempScale = this.dH / this.height;\n    this.taps = this.getTaps();\n    options.destinationHeight = this.dH;\n    super.applyTo(options);\n    options.sourceHeight = options.destinationHeight;\n  }\n\n  /**\n   * Apply the resize filter to the image\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      (this as unknown as ResizeDuringWEBGLResize).applyToForWebgl(options);\n    } else {\n      (this as unknown as ResizeDuring2DResize).applyTo2d(options);\n    }\n  }\n\n  isNeutralState() {\n    return this.scaleX === 1 && this.scaleY === 1;\n  }\n\n  lanczosCreate(lobes: number) {\n    return (x: number) => {\n      if (x >= lobes || x <= -lobes) {\n        return 0.0;\n      }\n      if (x < 1.1920929e-7 && x > -1.1920929e-7) {\n        return 1.0;\n      }\n      x *= Math.PI;\n      const xx = x / lobes;\n      return ((Math.sin(x) / x) * Math.sin(xx)) / xx;\n    };\n  }\n\n  applyTo2d(this: ResizeDuring2DResize, options: T2DPipelineState) {\n    const imageData = options.imageData,\n      scaleX = this.scaleX,\n      scaleY = this.scaleY;\n\n    this.rcpScaleX = 1 / scaleX;\n    this.rcpScaleY = 1 / scaleY;\n\n    const oW = imageData.width;\n    const oH = imageData.height;\n    const dW = Math.round(oW * scaleX);\n    const dH = Math.round(oH * scaleY);\n    let newData: ImageData;\n\n    if (this.resizeType === 'sliceHack') {\n      newData = this.sliceByTwo(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'hermite') {\n      newData = this.hermiteFastResize(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'bilinear') {\n      newData = this.bilinearFiltering(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'lanczos') {\n      newData = this.lanczosResize(options, oW, oH, dW, dH);\n    } else {\n      // this should never trigger, is here just for safety net.\n      newData = new ImageData(dW, dH);\n    }\n    options.imageData = newData;\n  }\n\n  /**\n   * Filter sliceByTwo\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  sliceByTwo(\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    const imageData = options.imageData;\n    const mult = 0.5;\n    let doneW = false;\n    let doneH = false;\n    let stepW = oW * mult;\n    let stepH = oH * mult;\n    const resources = options.filterBackend.resources;\n    let sX = 0;\n    let sY = 0;\n    const dX = oW;\n    let dY = 0;\n    if (!resources.sliceByTwo) {\n      resources.sliceByTwo = createCanvasElement();\n    }\n    const tmpCanvas = resources.sliceByTwo;\n    if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\n      tmpCanvas.width = oW * 1.5;\n      tmpCanvas.height = oH;\n    }\n    const ctx = tmpCanvas.getContext('2d')!;\n    ctx.clearRect(0, 0, oW * 1.5, oH);\n    ctx.putImageData(imageData, 0, 0);\n\n    dW = Math.floor(dW);\n    dH = Math.floor(dH);\n\n    while (!doneW || !doneH) {\n      oW = stepW;\n      oH = stepH;\n      if (dW < Math.floor(stepW * mult)) {\n        stepW = Math.floor(stepW * mult);\n      } else {\n        stepW = dW;\n        doneW = true;\n      }\n      if (dH < Math.floor(stepH * mult)) {\n        stepH = Math.floor(stepH * mult);\n      } else {\n        stepH = dH;\n        doneH = true;\n      }\n      ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\n      sX = dX;\n      sY = dY;\n      dY += stepH;\n    }\n    return ctx.getImageData(sX, sY, dW, dH);\n  }\n\n  /**\n   * Filter lanczosResize\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  lanczosResize(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ): ImageData {\n    function process(u: number): ImageData {\n      let v, i, weight, idx, a, red, green, blue, alpha, fX, fY;\n      center.x = (u + 0.5) * ratioX;\n      icenter.x = Math.floor(center.x);\n      for (v = 0; v < dH; v++) {\n        center.y = (v + 0.5) * ratioY;\n        icenter.y = Math.floor(center.y);\n        a = 0;\n        red = 0;\n        green = 0;\n        blue = 0;\n        alpha = 0;\n        for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\n          if (i < 0 || i >= oW) {\n            continue;\n          }\n          fX = Math.floor(1000 * Math.abs(i - center.x));\n          if (!cacheLanc[fX]) {\n            cacheLanc[fX] = {};\n          }\n          for (let j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\n            if (j < 0 || j >= oH) {\n              continue;\n            }\n            fY = Math.floor(1000 * Math.abs(j - center.y));\n            if (!cacheLanc[fX][fY]) {\n              cacheLanc[fX][fY] = lanczos(\n                Math.sqrt(\n                  Math.pow(fX * rcpRatioX, 2) + Math.pow(fY * rcpRatioY, 2),\n                ) / 1000,\n              );\n            }\n            weight = cacheLanc[fX][fY];\n            if (weight > 0) {\n              idx = (j * oW + i) * 4;\n              a += weight;\n              red += weight * srcData[idx];\n              green += weight * srcData[idx + 1];\n              blue += weight * srcData[idx + 2];\n              alpha += weight * srcData[idx + 3];\n            }\n          }\n        }\n        idx = (v * dW + u) * 4;\n        destData[idx] = red / a;\n        destData[idx + 1] = green / a;\n        destData[idx + 2] = blue / a;\n        destData[idx + 3] = alpha / a;\n      }\n\n      if (++u < dW) {\n        return process(u);\n      } else {\n        return destImg;\n      }\n    }\n\n    const srcData = options.imageData.data,\n      destImg = options.ctx.createImageData(dW, dH),\n      destData = destImg.data,\n      lanczos = this.lanczosCreate(this.lanczosLobes),\n      ratioX = this.rcpScaleX,\n      ratioY = this.rcpScaleY,\n      rcpRatioX = 2 / this.rcpScaleX,\n      rcpRatioY = 2 / this.rcpScaleY,\n      range2X = Math.ceil((ratioX * this.lanczosLobes) / 2),\n      range2Y = Math.ceil((ratioY * this.lanczosLobes) / 2),\n      cacheLanc: Record<number, Record<number, number>> = {},\n      center: XY = { x: 0, y: 0 },\n      icenter: XY = { x: 0, y: 0 };\n\n    return process(0);\n  }\n\n  /**\n   * bilinearFiltering\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  bilinearFiltering(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    let a;\n    let b;\n    let c;\n    let d;\n    let x;\n    let y;\n    let i;\n    let j;\n    let xDiff;\n    let yDiff;\n    let chnl;\n    let color;\n    let offset = 0;\n    let origPix;\n    const ratioX = this.rcpScaleX;\n    const ratioY = this.rcpScaleY;\n    const w4 = 4 * (oW - 1);\n    const img = options.imageData;\n    const pixels = img.data;\n    const destImage = options.ctx.createImageData(dW, dH);\n    const destPixels = destImage.data;\n    for (i = 0; i < dH; i++) {\n      for (j = 0; j < dW; j++) {\n        x = Math.floor(ratioX * j);\n        y = Math.floor(ratioY * i);\n        xDiff = ratioX * j - x;\n        yDiff = ratioY * i - y;\n        origPix = 4 * (y * oW + x);\n\n        for (chnl = 0; chnl < 4; chnl++) {\n          a = pixels[origPix + chnl];\n          b = pixels[origPix + 4 + chnl];\n          c = pixels[origPix + w4 + chnl];\n          d = pixels[origPix + w4 + 4 + chnl];\n          color =\n            a * (1 - xDiff) * (1 - yDiff) +\n            b * xDiff * (1 - yDiff) +\n            c * yDiff * (1 - xDiff) +\n            d * xDiff * yDiff;\n          destPixels[offset++] = color;\n        }\n      }\n    }\n    return destImage;\n  }\n\n  /**\n   * hermiteFastResize\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  hermiteFastResize(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    const ratioW = this.rcpScaleX,\n      ratioH = this.rcpScaleY,\n      ratioWHalf = Math.ceil(ratioW / 2),\n      ratioHHalf = Math.ceil(ratioH / 2),\n      img = options.imageData,\n      data = img.data,\n      img2 = options.ctx.createImageData(dW, dH),\n      data2 = img2.data;\n    for (let j = 0; j < dH; j++) {\n      for (let i = 0; i < dW; i++) {\n        const x2 = (i + j * dW) * 4;\n        let weight = 0;\n        let weights = 0;\n        let weightsAlpha = 0;\n        let gxR = 0;\n        let gxG = 0;\n        let gxB = 0;\n        let gxA = 0;\n        const centerY = (j + 0.5) * ratioH;\n        for (let yy = Math.floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\n          const dy = Math.abs(centerY - (yy + 0.5)) / ratioHHalf,\n            centerX = (i + 0.5) * ratioW,\n            w0 = dy * dy;\n          for (let xx = Math.floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\n            let dx = Math.abs(centerX - (xx + 0.5)) / ratioWHalf;\n            const w = Math.sqrt(w0 + dx * dx);\n            /* eslint-disable max-depth */\n            if (w > 1 && w < -1) {\n              continue;\n            }\n            //hermite filter\n            weight = 2 * w * w * w - 3 * w * w + 1;\n            if (weight > 0) {\n              dx = 4 * (xx + yy * oW);\n              //alpha\n              gxA += weight * data[dx + 3];\n              weightsAlpha += weight;\n              //colors\n              if (data[dx + 3] < 255) {\n                weight = (weight * data[dx + 3]) / 250;\n              }\n              gxR += weight * data[dx];\n              gxG += weight * data[dx + 1];\n              gxB += weight * data[dx + 2];\n              weights += weight;\n            }\n            /* eslint-enable max-depth */\n          }\n        }\n        data2[x2] = gxR / weights;\n        data2[x2 + 1] = gxG / weights;\n        data2[x2 + 2] = gxB / weights;\n        data2[x2 + 3] = gxA / weightsAlpha;\n      }\n    }\n    return img2;\n  }\n}\n\nclassRegistry.setClass(Resize);\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/saturation';\n\nexport type SaturationOwnProps = {\n  saturation: number;\n};\n\nexport const saturationDefaultValues: SaturationOwnProps = {\n  saturation: 0,\n};\n\n/**\n * Saturate filter class\n * @example\n * const filter = new Saturation({\n *   saturation: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Saturation extends BaseFilter<'Saturation', SaturationOwnProps> {\n  /**\n   * Saturation value, from -1 to 1.\n   * Increases/decreases the color saturation.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} saturation\n   * @default\n   */\n  declare saturation: SaturationOwnProps['saturation'];\n\n  static type = 'Saturation';\n\n  static defaults = saturationDefaultValues;\n\n  static uniformLocations = ['uSaturation'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const adjust = -this.saturation;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const max = Math.max(r, g, b);\n      data[i] += max !== r ? (max - r) * adjust : 0;\n      data[i + 1] += max !== g ? (max - g) * adjust : 0;\n      data[i + 2] += max !== b ? (max - b) * adjust : 0;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\n  }\n\n  isNeutralState() {\n    return this.saturation === 0;\n  }\n}\n\nclassRegistry.setClass(Saturation);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uSaturation;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float rgMax = max(color.r, color.g);\n    float rgbMax = max(rgMax, color.b);\n    color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\n    color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\n    color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\n    gl_FragColor = color;\n  }\n`;\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/vibrance';\n\nexport type VibranceOwnProps = {\n  vibrance: number;\n};\n\nexport const vibranceDefaultValues: VibranceOwnProps = {\n  vibrance: 0,\n};\n\n/**\n * Vibrance filter class\n * @example\n * const filter = new Vibrance({\n *   vibrance: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Vibrance extends BaseFilter<'Vibrance', VibranceOwnProps> {\n  /**\n   * Vibrance value, from -1 to 1.\n   * Increases/decreases the saturation of more muted colors with less effect on saturated colors.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} vibrance\n   * @default\n   */\n  declare vibrance: VibranceOwnProps['vibrance'];\n\n  static type = 'Vibrance';\n\n  static defaults = vibranceDefaultValues;\n\n  static uniformLocations = ['uVibrance'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Vibrance operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const adjust = -this.vibrance;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const max = Math.max(r, g, b);\n      const avg = (r + g + b) / 3;\n      const amt = ((Math.abs(max - avg) * 2) / 255) * adjust;\n      data[i] += max !== r ? (max - r) * amt : 0;\n      data[i + 1] += max !== g ? (max - g) * amt : 0;\n      data[i + 2] += max !== b ? (max - b) * amt : 0;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {TWebGLUniformLocationMap} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uVibrance, -this.vibrance);\n  }\n\n  isNeutralState() {\n    return this.vibrance === 0;\n  }\n}\n\nclassRegistry.setClass(Vibrance);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uVibrance;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float max = max(color.r, max(color.g, color.b));\n    float avg = (color.r + color.g + color.b) / 3.0;\n    float amt = (abs(max - avg) * 2.0) * uVibrance;\n    color.r += max != color.r ? (max - color.r) * amt : 0.00;\n    color.g += max != color.g ? (max - color.g) * amt : 0.00;\n    color.b += max != color.b ? (max - color.b) * amt : 0.00;\n    gl_FragColor = color;\n  }\n`;\n", "'use strict';\n\nexport default function bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n", "'use strict';\n\nimport bind from './helpers/bind.js';\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\nconst {iterator, toStringTag} = Symbol;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n}\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(toStringTag in val) && !(iterator in val);\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  let kind;\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) || (\n      isFunction(thing.append) && (\n        (kind = kindOf(thing)) === 'formdata' ||\n        // detect form-data instance\n        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')\n      )\n    )\n  )\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\nconst [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  return typeof self !== \"undefined\" ? self : (typeof window !== 'undefined' ? window : global)\n})();\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  }\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[iterator];\n\n  const _iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = _iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n}\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n}\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    let ret;\n    if ((ret = reducer(descriptor, name, obj)) !== false) {\n      reducedDescriptors[name] = ret || descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n}\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n}\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  }\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n}\n\nconst noop = () => {}\n\nconst toFiniteNumber = (value, defaultValue) => {\n  return value != null && Number.isFinite(value = +value) ? value : defaultValue;\n}\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && isFunction(thing.append) && thing[toStringTag] === 'FormData' && thing[iterator]);\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      if(!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  }\n\n  return visit(obj, 0);\n}\n\nconst isAsyncFn = kindOfTest('AsyncFunction');\n\nconst isThenable = (thing) =>\n  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);\n\n// original code\n// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34\n\nconst _setImmediate = ((setImmediateSupported, postMessageSupported) => {\n  if (setImmediateSupported) {\n    return setImmediate;\n  }\n\n  return postMessageSupported ? ((token, callbacks) => {\n    _global.addEventListener(\"message\", ({source, data}) => {\n      if (source === _global && data === token) {\n        callbacks.length && callbacks.shift()();\n      }\n    }, false);\n\n    return (cb) => {\n      callbacks.push(cb);\n      _global.postMessage(token, \"*\");\n    }\n  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);\n})(\n  typeof setImmediate === 'function',\n  isFunction(_global.postMessage)\n);\n\nconst asap = typeof queueMicrotask !== 'undefined' ?\n  queueMicrotask.bind(_global) : ( typeof process !== 'undefined' && process.nextTick || _setImmediate);\n\n// *********************\n\n\nconst isIterable = (thing) => thing != null && isFunction(thing[iterator]);\n\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isReadableStream,\n  isRequest,\n  isResponse,\n  isHeaders,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  isSpecCompliantForm,\n  toJSONObject,\n  isAsyncFn,\n  isThenable,\n  setImmediate: _setImmediate,\n  asap,\n  isIterable\n};\n", "'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = (new Error()).stack;\n  }\n\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  if (response) {\n    this.response = response;\n    this.status = response.status ? response.status : null;\n  }\n}\n\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils.toJSONObject(this.config),\n      code: this.code,\n      status: this.status\n    };\n  }\n});\n\nconst prototype = AxiosError.prototype;\nconst descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED',\n  'ERR_NOT_SUPPORT',\n  'ERR_INVALID_URL'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(prototype);\n\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== 'isAxiosError';\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.cause = error;\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\nexport default AxiosError;\n", "// eslint-disable-next-line strict\nexport default null;\n", "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\n// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored\nimport PlatformFormData from '../platform/node/classes/FormData.js';\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? '[' + token + ']' : token;\n  }).join(dots ? '.' : '');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('target must be an object');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (PlatformFormData || FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;\n  const useBlob = _Blob && utils.isSpecCompliantForm(formData);\n\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError('visitor must be a function');\n  }\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (!useBlob && utils.isBlob(value)) {\n      throw new AxiosError('Blob is not supported. Use a Buffer instead.');\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === 'object') {\n      if (utils.endsWith(key, '{}')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils.isArray(value) && isFlatArray(value)) ||\n        ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error('Circular reference detected in ' + path.join('.'));\n    }\n\n    stack.push(value);\n\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils.isObject(obj)) {\n    throw new TypeError('data must be an object');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\nexport default toFormData;\n", "'use strict';\n\nimport toFormData from './toFormData.js';\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode(str) {\n  const charMap = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '~': '%7E',\n    '%20': '+',\n    '%00': '\\x00'\n  };\n  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n\n  params && toFormData(params, this, options);\n}\n\nconst prototype = AxiosURLSearchParams.prototype;\n\nprototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\n\nprototype.toString = function toString(encoder) {\n  const _encode = encoder ? function(value) {\n    return encoder.call(this, value, encode);\n  } : encode;\n\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + '=' + _encode(pair[1]);\n  }, '').join('&');\n};\n\nexport default AxiosURLSearchParams;\n", "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosURLSearchParams from '../helpers/AxiosURLSearchParams.js';\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?(object|Function)} options\n *\n * @returns {string} The formatted url\n */\nexport default function buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || encode;\n\n  if (utils.isFunction(options)) {\n    options = {\n      serialize: options\n    };\n  } \n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n}\n", "'use strict';\n\nimport utils from './../utils.js';\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\nexport default InterceptorManager;\n", "'use strict';\n\nexport default {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n", "'use strict';\n\nimport AxiosURLSearchParams from '../../../helpers/AxiosURLSearchParams.js';\nexport default typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;\n", "'use strict';\n\nexport default typeof FormData !== 'undefined' ? FormData : null;\n", "'use strict'\n\nexport default typeof Blob !== 'undefined' ? Blob : null\n", "import URLSearchParams from './classes/URLSearchParams.js'\nimport FormData from './classes/FormData.js'\nimport Blob from './classes/Blob.js'\n\nexport default {\n  isBrowser: true,\n  classes: {\n    URLSearchParams,\n    FormData,\n    Blob\n  },\n  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']\n};\n", "const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';\n\nconst _navigator = typeof navigator === 'object' && navigator || undefined;\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n *\n * @returns {boolean}\n */\nconst hasStandardBrowserEnv = hasBrowserEnv &&\n  (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0);\n\n/**\n * Determine if we're running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */\nconst hasStandardBrowserWebWorkerEnv = (() => {\n  return (\n    typeof WorkerGlobalScope !== 'undefined' &&\n    // eslint-disable-next-line no-undef\n    self instanceof WorkerGlobalScope &&\n    typeof self.importScripts === 'function'\n  );\n})();\n\nconst origin = hasBrowserEnv && window.location.href || 'http://localhost';\n\nexport {\n  hasBrowserEnv,\n  hasStandardBrowserWebWorkerEnv,\n  hasStandardBrowserEnv,\n  _navigator as navigator,\n  origin\n}\n", "import platform from './node/index.js';\nimport * as utils from './common/utils.js';\n\nexport default {\n  ...utils,\n  ...platform\n}\n", "'use strict';\n\nimport utils from '../utils.js';\nimport toFormData from './toFormData.js';\nimport platform from '../platform/index.js';\n\nexport default function toURLEncodedForm(data, options) {\n  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({\n    visitor: function(value, key, path, helpers) {\n      if (platform.isNode && utils.isBuffer(value)) {\n        this.append(key, value.toString('base64'));\n        return false;\n      }\n\n      return helpers.defaultVisitor.apply(this, arguments);\n    }\n  }, options));\n}\n", "'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === '[]' ? '' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n\n    if (name === '__proto__') return true;\n\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils.isArray(target) ? target.length : name;\n\n    if (isLast) {\n      if (utils.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n\n      return !isNumericKey;\n    }\n\n    if (!target[name] || !utils.isObject(target[name])) {\n      target[name] = [];\n    }\n\n    const result = buildPath(path, value, target[name], index);\n\n    if (result && utils.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n\n    return !isNumericKey;\n  }\n\n  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {\n    const obj = {};\n\n    utils.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n\n    return obj;\n  }\n\n  return null;\n}\n\nexport default formDataToJSON;\n", "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\nimport transitionalDefaults from './transitional.js';\nimport toFormData from '../helpers/toFormData.js';\nimport toURLEncodedForm from '../helpers/toURLEncodedForm.js';\nimport platform from '../platform/index.js';\nimport formDataToJSON from '../helpers/formDataToJSON.js';\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: ['xhr', 'http', 'fetch'],\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils.isObject(data);\n\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils.isFormData(data);\n\n    if (isFormData) {\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data) ||\n      utils.isReadableStream(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(\n          isFileList ? {'files[]': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (utils.isResponse(data) || utils.isReadableStream(data)) {\n      return data;\n    }\n\n    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': undefined\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {\n  defaults.headers[method] = {};\n});\n\nexport default defaults;\n", "'use strict';\n\nimport utils from './../utils.js';\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils.toObjectSet([\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n]);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\nexport default rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\n    i = line.indexOf(':');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\n      return;\n    }\n\n    if (key === 'set-cookie') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n", "'use strict';\n\nimport utils from '../utils.js';\nimport parseHeaders from '../helpers/parseHeaders.js';\n\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nconst isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());\n\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (isHeaderNameFilter) {\n    value = header;\n  }\n\n  if (!utils.isString(value)) return;\n\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(' ' + header);\n\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite)\n    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else if (utils.isObject(header) && utils.isIterable(header)) {\n      let obj = {}, dest, key;\n      for (const entry of header) {\n        if (!utils.isArray(entry)) {\n          throw TypeError('Object iterator must return a key-value pair');\n        }\n\n        obj[key = entry[0]] = (dest = obj[key]) ?\n          (utils.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]]) : entry[1];\n      }\n\n      setHeaders(obj, valueOrRewrite)\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n\n    while (i--) {\n      const key = keys[i];\n      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\\n');\n  }\n\n  getSetCookie() {\n    return this.get(\"set-cookie\") || [];\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);\n\n// reserved names hotfix\nutils.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {\n  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`\n  return {\n    get: () => value,\n    set(headerValue) {\n      this[mapped] = headerValue;\n    }\n  }\n});\n\nutils.freezeMethods(AxiosHeaders);\n\nexport default AxiosHeaders;\n", "'use strict';\n\nimport utils from './../utils.js';\nimport defaults from '../defaults/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nexport default function transformData(fns, response) {\n  const config = this || defaults;\n  const context = response || config;\n  const headers = AxiosHeaders.from(context.headers);\n  let data = context.data;\n\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n\n  headers.normalize();\n\n  return data;\n}\n", "'use strict';\n\nexport default function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n", "'use strict';\n\nimport AxiosError from '../core/AxiosError.js';\nimport utils from '../utils.js';\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);\n  this.name = 'CanceledError';\n}\n\nutils.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\nexport default CanceledError;\n", "'use strict';\n\nimport AxiosError from './AxiosError.js';\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nexport default function settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n}\n", "'use strict';\n\nexport default function parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n}\n", "'use strict';\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\nexport default speedometer;\n", "/**\n * Throttle decorator\n * @param {Function} fn\n * @param {Number} freq\n * @return {Function}\n */\nfunction throttle(fn, freq) {\n  let timestamp = 0;\n  let threshold = 1000 / freq;\n  let lastArgs;\n  let timer;\n\n  const invoke = (args, now = Date.now()) => {\n    timestamp = now;\n    lastArgs = null;\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n    fn.apply(null, args);\n  }\n\n  const throttled = (...args) => {\n    const now = Date.now();\n    const passed = now - timestamp;\n    if ( passed >= threshold) {\n      invoke(args, now);\n    } else {\n      lastArgs = args;\n      if (!timer) {\n        timer = setTimeout(() => {\n          timer = null;\n          invoke(lastArgs)\n        }, threshold - passed);\n      }\n    }\n  }\n\n  const flush = () => lastArgs && invoke(lastArgs);\n\n  return [throttled, flush];\n}\n\nexport default throttle;\n", "import speedometer from \"./speedometer.js\";\nimport throttle from \"./throttle.js\";\nimport utils from \"../utils.js\";\n\nexport const progressEventReducer = (listener, isDownloadStream, freq = 3) => {\n  let bytesNotified = 0;\n  const _speedometer = speedometer(50, 250);\n\n  return throttle(e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e,\n      lengthComputable: total != null,\n      [isDownloadStream ? 'download' : 'upload']: true\n    };\n\n    listener(data);\n  }, freq);\n}\n\nexport const progressEventDecorator = (total, throttled) => {\n  const lengthComputable = total != null;\n\n  return [(loaded) => throttled[0]({\n    lengthComputable,\n    total,\n    loaded\n  }), throttled[1]];\n}\n\nexport const asyncDecorator = (fn) => (...args) => utils.asap(() => fn(...args));\n", "import platform from '../platform/index.js';\n\nexport default platform.hasStandardBrowserEnv ? ((origin, isMSIE) => (url) => {\n  url = new URL(url, platform.origin);\n\n  return (\n    origin.protocol === url.protocol &&\n    origin.host === url.host &&\n    (isMSIE || origin.port === url.port)\n  );\n})(\n  new URL(platform.origin),\n  platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)\n) : () => true;\n", "import utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.hasStandardBrowserEnv ?\n\n  // Standard browser envs support document.cookie\n  {\n    write(name, value, expires, path, domain, secure) {\n      const cookie = [name + '=' + encodeURIComponent(value)];\n\n      utils.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());\n\n      utils.isString(path) && cookie.push('path=' + path);\n\n      utils.isString(domain) && cookie.push('domain=' + domain);\n\n      secure === true && cookie.push('secure');\n\n      document.cookie = cookie.join('; ');\n    },\n\n    read(name) {\n      const match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n      return (match ? decodeURIComponent(match[3]) : null);\n    },\n\n    remove(name) {\n      this.write(name, '', Date.now() - 86400000);\n    }\n  }\n\n  :\n\n  // Non-standard browser env (web workers, react-native) lack needed support.\n  {\n    write() {},\n    read() {\n      return null;\n    },\n    remove() {}\n  };\n\n", "'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nexport default function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n", "'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nexport default function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/?\\/$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n}\n", "'use strict';\n\nimport isAbsoluteURL from '../helpers/isAbsoluteURL.js';\nimport combineURLs from '../helpers/combineURLs.js';\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nexport default function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {\n  let isRelativeUrl = !isAbsoluteURL(requestedURL);\n  if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n", "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosHeaders from \"./AxiosHeaders.js\";\n\nconst headersToObject = (thing) => thing instanceof AxiosHeaders ? { ...thing } : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nexport default function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, prop, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({caseless}, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, prop , caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, prop , caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, prop , caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    withXSRFToken: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b , prop) => mergeDeepProperties(headersToObject(a), headersToObject(b),prop, true)\n  };\n\n  utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n", "import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport isURLSameOrigin from \"./isURLSameOrigin.js\";\nimport cookies from \"./cookies.js\";\nimport buildFullPath from \"../core/buildFullPath.js\";\nimport mergeConfig from \"../core/mergeConfig.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport buildURL from \"./buildURL.js\";\n\nexport default (config) => {\n  const newConfig = mergeConfig({}, config);\n\n  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;\n\n  newConfig.headers = headers = AxiosHeaders.from(headers);\n\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);\n\n  // HTTP basic authentication\n  if (auth) {\n    headers.set('Authorization', 'Basic ' +\n      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))\n    );\n  }\n\n  let contentType;\n\n  if (utils.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // Let the browser set it\n    } else if ((contentType = headers.getContentType()) !== false) {\n      // fix semicolon duplication issue for ReactNative FormData implementation\n      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];\n      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));\n    }\n  }\n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n\n    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {\n      // Add xsrf header\n      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n\n  return newConfig;\n}\n\n", "import utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport parseProtocol from '../helpers/parseProtocol.js';\nimport platform from '../platform/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport {progressEventReducer} from '../helpers/progressEventReducer.js';\nimport resolveConfig from \"../helpers/resolveConfig.js\";\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nexport default isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    const _config = resolveConfig(config);\n    let requestData = _config.data;\n    const requestHeaders = AxiosHeaders.from(_config.headers).normalize();\n    let {responseType, onUploadProgress, onDownloadProgress} = _config;\n    let onCanceled;\n    let uploadThrottled, downloadThrottled;\n    let flushUpload, flushDownload;\n\n    function done() {\n      flushUpload && flushUpload(); // flush events\n      flushDownload && flushDownload(); // flush events\n\n      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);\n\n      _config.signal && _config.signal.removeEventListener('abort', onCanceled);\n    }\n\n    let request = new XMLHttpRequest();\n\n    request.open(_config.method.toUpperCase(), _config.url, true);\n\n    // Set the request timeout in MS\n    request.timeout = _config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = _config.transitional || transitionalDefaults;\n      if (_config.timeoutErrorMessage) {\n        timeoutErrorMessage = _config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(_config.withCredentials)) {\n      request.withCredentials = !!_config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = _config.responseType;\n    }\n\n    // Handle progress if needed\n    if (onDownloadProgress) {\n      ([downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true));\n      request.addEventListener('progress', downloadThrottled);\n    }\n\n    // Not all browsers support upload events\n    if (onUploadProgress && request.upload) {\n      ([uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress));\n\n      request.upload.addEventListener('progress', uploadThrottled);\n\n      request.upload.addEventListener('loadend', flushUpload);\n    }\n\n    if (_config.cancelToken || _config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);\n      if (_config.signal) {\n        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(_config.url);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n}\n", "import CanceledError from \"../cancel/CanceledError.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport utils from '../utils.js';\n\nconst composeSignals = (signals, timeout) => {\n  const {length} = (signals = signals ? signals.filter(Boolean) : []);\n\n  if (timeout || length) {\n    let controller = new AbortController();\n\n    let aborted;\n\n    const onabort = function (reason) {\n      if (!aborted) {\n        aborted = true;\n        unsubscribe();\n        const err = reason instanceof Error ? reason : this.reason;\n        controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\n      }\n    }\n\n    let timer = timeout && setTimeout(() => {\n      timer = null;\n      onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT))\n    }, timeout)\n\n    const unsubscribe = () => {\n      if (signals) {\n        timer && clearTimeout(timer);\n        timer = null;\n        signals.forEach(signal => {\n          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);\n        });\n        signals = null;\n      }\n    }\n\n    signals.forEach((signal) => signal.addEventListener('abort', onabort));\n\n    const {signal} = controller;\n\n    signal.unsubscribe = () => utils.asap(unsubscribe);\n\n    return signal;\n  }\n}\n\nexport default composeSignals;\n", "\nexport const streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n\n  let pos = 0;\n  let end;\n\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n}\n\nexport const readBytes = async function* (iterable, chunkSize) {\n  for await (const chunk of readStream(iterable)) {\n    yield* streamChunk(chunk, chunkSize);\n  }\n}\n\nconst readStream = async function* (stream) {\n  if (stream[Symbol.asyncIterator]) {\n    yield* stream;\n    return;\n  }\n\n  const reader = stream.getReader();\n  try {\n    for (;;) {\n      const {done, value} = await reader.read();\n      if (done) {\n        break;\n      }\n      yield value;\n    }\n  } finally {\n    await reader.cancel();\n  }\n}\n\nexport const trackStream = (stream, chunkSize, onProgress, onFinish) => {\n  const iterator = readBytes(stream, chunkSize);\n\n  let bytes = 0;\n  let done;\n  let _onFinish = (e) => {\n    if (!done) {\n      done = true;\n      onFinish && onFinish(e);\n    }\n  }\n\n  return new ReadableStream({\n    async pull(controller) {\n      try {\n        const {done, value} = await iterator.next();\n\n        if (done) {\n         _onFinish();\n          controller.close();\n          return;\n        }\n\n        let len = value.byteLength;\n        if (onProgress) {\n          let loadedBytes = bytes += len;\n          onProgress(loadedBytes);\n        }\n        controller.enqueue(new Uint8Array(value));\n      } catch (err) {\n        _onFinish(err);\n        throw err;\n      }\n    },\n    cancel(reason) {\n      _onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  })\n}\n", "import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport composeSignals from \"../helpers/composeSignals.js\";\nimport {trackStream} from \"../helpers/trackStream.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport {progressEventReducer, progressEventDecorator, asyncDecorator} from \"../helpers/progressEventReducer.js\";\nimport resolveConfig from \"../helpers/resolveConfig.js\";\nimport settle from \"../core/settle.js\";\n\nconst isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';\nconst isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';\n\n// used only inside the fetch adapter\nconst encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?\n    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :\n    async (str) => new Uint8Array(await new Response(str).arrayBuffer())\n);\n\nconst test = (fn, ...args) => {\n  try {\n    return !!fn(...args);\n  } catch (e) {\n    return false\n  }\n}\n\nconst supportsRequestStream = isReadableStreamSupported && test(() => {\n  let duplexAccessed = false;\n\n  const hasContentType = new Request(platform.origin, {\n    body: new ReadableStream(),\n    method: 'POST',\n    get duplex() {\n      duplexAccessed = true;\n      return 'half';\n    },\n  }).headers.has('Content-Type');\n\n  return duplexAccessed && !hasContentType;\n});\n\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\n\nconst supportsResponseStream = isReadableStreamSupported &&\n  test(() => utils.isReadableStream(new Response('').body));\n\n\nconst resolvers = {\n  stream: supportsResponseStream && ((res) => res.body)\n};\n\nisFetchSupported && (((res) => {\n  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {\n    !resolvers[type] && (resolvers[type] = utils.isFunction(res[type]) ? (res) => res[type]() :\n      (_, config) => {\n        throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);\n      })\n  });\n})(new Response));\n\nconst getBodyLength = async (body) => {\n  if (body == null) {\n    return 0;\n  }\n\n  if(utils.isBlob(body)) {\n    return body.size;\n  }\n\n  if(utils.isSpecCompliantForm(body)) {\n    const _request = new Request(platform.origin, {\n      method: 'POST',\n      body,\n    });\n    return (await _request.arrayBuffer()).byteLength;\n  }\n\n  if(utils.isArrayBufferView(body) || utils.isArrayBuffer(body)) {\n    return body.byteLength;\n  }\n\n  if(utils.isURLSearchParams(body)) {\n    body = body + '';\n  }\n\n  if(utils.isString(body)) {\n    return (await encodeText(body)).byteLength;\n  }\n}\n\nconst resolveBodyLength = async (headers, body) => {\n  const length = utils.toFiniteNumber(headers.getContentLength());\n\n  return length == null ? getBodyLength(body) : length;\n}\n\nexport default isFetchSupported && (async (config) => {\n  let {\n    url,\n    method,\n    data,\n    signal,\n    cancelToken,\n    timeout,\n    onDownloadProgress,\n    onUploadProgress,\n    responseType,\n    headers,\n    withCredentials = 'same-origin',\n    fetchOptions\n  } = resolveConfig(config);\n\n  responseType = responseType ? (responseType + '').toLowerCase() : 'text';\n\n  let composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);\n\n  let request;\n\n  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {\n      composedSignal.unsubscribe();\n  });\n\n  let requestContentLength;\n\n  try {\n    if (\n      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&\n      (requestContentLength = await resolveBodyLength(headers, data)) !== 0\n    ) {\n      let _request = new Request(url, {\n        method: 'POST',\n        body: data,\n        duplex: \"half\"\n      });\n\n      let contentTypeHeader;\n\n      if (utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {\n        headers.setContentType(contentTypeHeader)\n      }\n\n      if (_request.body) {\n        const [onProgress, flush] = progressEventDecorator(\n          requestContentLength,\n          progressEventReducer(asyncDecorator(onUploadProgress))\n        );\n\n        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);\n      }\n    }\n\n    if (!utils.isString(withCredentials)) {\n      withCredentials = withCredentials ? 'include' : 'omit';\n    }\n\n    // Cloudflare Workers throws when credentials are defined\n    // see https://github.com/cloudflare/workerd/issues/902\n    const isCredentialsSupported = \"credentials\" in Request.prototype;\n    request = new Request(url, {\n      ...fetchOptions,\n      signal: composedSignal,\n      method: method.toUpperCase(),\n      headers: headers.normalize().toJSON(),\n      body: data,\n      duplex: \"half\",\n      credentials: isCredentialsSupported ? withCredentials : undefined\n    });\n\n    let response = await fetch(request);\n\n    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');\n\n    if (supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {\n      const options = {};\n\n      ['status', 'statusText', 'headers'].forEach(prop => {\n        options[prop] = response[prop];\n      });\n\n      const responseContentLength = utils.toFiniteNumber(response.headers.get('content-length'));\n\n      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(\n        responseContentLength,\n        progressEventReducer(asyncDecorator(onDownloadProgress), true)\n      ) || [];\n\n      response = new Response(\n        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {\n          flush && flush();\n          unsubscribe && unsubscribe();\n        }),\n        options\n      );\n    }\n\n    responseType = responseType || 'text';\n\n    let responseData = await resolvers[utils.findKey(resolvers, responseType) || 'text'](response, config);\n\n    !isStreamResponse && unsubscribe && unsubscribe();\n\n    return await new Promise((resolve, reject) => {\n      settle(resolve, reject, {\n        data: responseData,\n        headers: AxiosHeaders.from(response.headers),\n        status: response.status,\n        statusText: response.statusText,\n        config,\n        request\n      })\n    })\n  } catch (err) {\n    unsubscribe && unsubscribe();\n\n    if (err && err.name === 'TypeError' && /Load failed|fetch/i.test(err.message)) {\n      throw Object.assign(\n        new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request),\n        {\n          cause: err.cause || err\n        }\n      )\n    }\n\n    throw AxiosError.from(err, err && err.code, config, request);\n  }\n});\n\n\n", "import utils from '../utils.js';\nimport httpAdapter from './http.js';\nimport xhrAdapter from './xhr.js';\nimport fetchAdapter from './fetch.js';\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter,\n  fetch: fetchAdapter\n}\n\nutils.forEach(knownAdapters, (fn, value) => {\n  if (fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nconst renderReason = (reason) => `- ${reason}`;\n\nconst isResolvedHandle = (adapter) => utils.isFunction(adapter) || adapter === null || adapter === false;\n\nexport default {\n  getAdapter: (adapters) => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    const rejectedReasons = {};\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      let id;\n\n      adapter = nameOrAdapter;\n\n      if (!isResolvedHandle(nameOrAdapter)) {\n        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];\n\n        if (adapter === undefined) {\n          throw new AxiosError(`Unknown adapter '${id}'`);\n        }\n      }\n\n      if (adapter) {\n        break;\n      }\n\n      rejectedReasons[id || '#' + i] = adapter;\n    }\n\n    if (!adapter) {\n\n      const reasons = Object.entries(rejectedReasons)\n        .map(([id, state]) => `adapter ${id} ` +\n          (state === false ? 'is not supported by the environment' : 'is not available in the build')\n        );\n\n      let s = length ?\n        (reasons.length > 1 ? 'since :\\n' + reasons.map(renderReason).join('\\n') : ' ' + renderReason(reasons[0])) :\n        'as no adapter specified';\n\n      throw new AxiosError(\n        `There is no suitable adapter to dispatch the request ` + s,\n        'ERR_NOT_SUPPORT'\n      );\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n}\n", "'use strict';\n\nimport transformData from './transformData.js';\nimport isCancel from '../cancel/isCancel.js';\nimport defaults from '../defaults/index.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport adapters from \"../adapters/adapters.js\";\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nexport default function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = AxiosHeaders.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {\n    config.headers.setContentType('application/x-www-form-urlencoded', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || defaults.adapter);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = AxiosHeaders.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = AxiosHeaders.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n", "export const VERSION = \"1.9.0\";", "'use strict';\n\nimport {VERSION} from '../env/data.js';\nimport AxiosError from '../core/AxiosError.js';\n\nconst validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\nvalidators.spelling = function spelling(correctSpelling) {\n  return (value, opt) => {\n    // eslint-disable-next-line no-console\n    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);\n    return true;\n  }\n};\n\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nexport default {\n  assertOptions,\n  validators\n};\n", "'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig || {};\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  async request(configOrUrl, config) {\n    try {\n      return await this._request(configOrUrl, config);\n    } catch (err) {\n      if (err instanceof Error) {\n        let dummy = {};\n\n        Error.captureStackTrace ? Error.captureStackTrace(dummy) : (dummy = new Error());\n\n        // slice off the Error: ... line\n        const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, '') : '';\n        try {\n          if (!err.stack) {\n            err.stack = stack;\n            // match without the 2 top stack lines\n          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, ''))) {\n            err.stack += '\\n' + stack\n          }\n        } catch (e) {\n          // ignore the case where \"stack\" is an un-writable property\n        }\n      }\n\n      throw err;\n    }\n  }\n\n  _request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer != null) {\n      if (utils.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        }\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: validators.function,\n          serialize: validators.function\n        }, true);\n      }\n    }\n\n    // Set config.allowAbsoluteUrls\n    if (config.allowAbsoluteUrls !== undefined) {\n      // do nothing\n    } else if (this.defaults.allowAbsoluteUrls !== undefined) {\n      config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;\n    } else {\n      config.allowAbsoluteUrls = true;\n    }\n\n    validator.assertOptions(config, {\n      baseUrl: validators.spelling('baseURL'),\n      withXsrfToken: validators.spelling('withXSRFToken')\n    }, true);\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    // Flatten headers\n    let contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    headers && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nexport default Axios;\n", "'use strict';\n\nimport CanceledError from './CanceledError.js';\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.');\n    }\n\n    let resolvePromise;\n\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n\n      let i = token._listeners.length;\n\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n\n      return promise;\n    };\n\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n\n      token.reason = new CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  toAbortSignal() {\n    const controller = new AbortController();\n\n    const abort = (err) => {\n      controller.abort(err);\n    };\n\n    this.subscribe(abort);\n\n    controller.signal.unsubscribe = () => this.unsubscribe(abort);\n\n    return controller.signal;\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n\nexport default CancelToken;\n", "'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nexport default function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n", "'use strict';\n\nimport utils from './../utils.js';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nexport default function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n}\n", "const HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511,\n};\n\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n\nexport default HttpStatusCode;\n", "'use strict';\n\nimport utils from './utils.js';\nimport bind from './helpers/bind.js';\nimport Axios from './core/Axios.js';\nimport mergeConfig from './core/mergeConfig.js';\nimport defaults from './defaults/index.js';\nimport formDataToJSON from './helpers/formDataToJSON.js';\nimport CanceledError from './cancel/CanceledError.js';\nimport CancelToken from './cancel/CancelToken.js';\nimport isCancel from './cancel/isCancel.js';\nimport {VERSION} from './env/data.js';\nimport toFormData from './helpers/toFormData.js';\nimport AxiosError from './core/AxiosError.js';\nimport spread from './helpers/spread.js';\nimport isAxiosError from './helpers/isAxiosError.js';\nimport AxiosHeaders from \"./core/AxiosHeaders.js\";\nimport adapters from './adapters/adapters.js';\nimport HttpStatusCode from './helpers/HttpStatusCode.js';\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new Axios(defaultConfig);\n  const instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context, {allOwnKeys: true});\n\n  // Copy context to instance\n  utils.extend(instance, context, null, {allOwnKeys: true});\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\n\naxios.AxiosHeaders = AxiosHeaders;\n\naxios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);\n\naxios.getAdapter = adapters.getAdapter;\n\naxios.HttpStatusCode = HttpStatusCode;\n\naxios.default = axios;\n\n// this module should only have a default export\nexport default axios\n", "import axios from './lib/axios.js';\n\n// This module is intended to unwrap Axios default export as named.\n// Keep top-level export same with static properties\n// so that it can keep same with es module or cjs\nconst {\n  Axios,\n  AxiosError,\n  CanceledError,\n  isCancel,\n  CancelToken,\n  VERSION,\n  all,\n  Cancel,\n  isAxiosError,\n  spread,\n  toFormData,\n  AxiosHeaders,\n  HttpStatusCode,\n  formToJSON,\n  getAdapter,\n  mergeConfig\n} = axios;\n\nexport {\n  axios as default,\n  Axios,\n  AxiosError,\n  CanceledError,\n  isCancel,\n  CancelToken,\n  VERSION,\n  all,\n  Cancel,\n  isAxiosError,\n  spread,\n  toFormData,\n  AxiosHeaders,\n  HttpStatusCode,\n  formToJSON,\n  getAdapter,\n  mergeConfig\n}\n", "import { Rect, Canvas as fC, StaticCanvas, FabricText } from \"fabric\";\nimport * as fabric from \"fabric\";\nimport axios from \"axios\";\nimport tippy from \"tippy.js\";\nimport \"tippy.js/dist/tippy.css\";\nimport $ from \"jquery\";\n\nasync function importOnrs(canvas: fC) {\n  const onrs = await axios.get(\"/assets/onrs.json\");\n  onrs.data.forEach((onr: any, index: number) => {\n    const o1 = new FabricText(onr.name, {\n      fontFamily: \"Arial\",\n      fill: \"red\",\n      fontWeight: \"bold\",\n      textAlign: \"center\",\n      fontSize: 18,\n      top: 50 + index * 25,\n      selectable: false,\n    });\n    o1.on(\"mouseover\", (e1) => {\n      document.getElementById(\"toolTip\")!.style.visibility = \"visible\";\n      document.getElementById(\"toolTip\")!.style.left = o1.getX() + \"px\";\n      document.getElementById(\"toolTip\")!.style.top =\n        o1.getY() - 2 * o1.getBoundingRect().height + \"px\";\n    });\n    o1.on(\"mouseout\", (e) => {\n      document.getElementById(\"toolTip\")!.style.visibility = \"hidden\";\n    });\n    canvas.add(o1);\n  });\n}\n\nasync function importSVGMap(canvas: fC) {\n  const o = await fabric.loadSVGFromURL(\"/assets/france.svg\");\n  var obj = fabric.util.groupSVGElements(o.objects as any);\n  obj.scale(5);\n  canvas.centerObject(obj);\n  obj.selectable = false;\n  canvas.add(obj);\n}\n\nasync function importUnivs(canvas: fC) {\n  const univs = await axios.get(\"/assets/univs.json\");\n  univs.data.forEach((univ: any, index: number) => {\n\n\n  const c = new fabric.Circle({\n    radius: 10,\n    fill: \"#525FFF\",\n    left: 10,\n    top: 10,\n    selectable: false,\n    centeredScaling: true,\n  });\n  const c1 = new fabric.Circle({\n    radius: 5,\n    fill: \"#FFFFFF\",\n    left: 15,\n    top: 15,\n    selectable: false,\n    centeredScaling: true,\n  });\n  const g = [];\n  g.push(c);\n  g.push(c1);\n  const fg = new fabric.Group(g, {\n    centeredScaling: true,\n    left: univ.position.left,\n    top: univ.position.top,\n  });\n  fg.selectable = false;\n\n  fg.on(\"mouseover\", (e) => {\n    fabric.util.animate({\n      startValue: [1, fg.left, fg.top],\n      endValue: [1.2, fg.left - 1, fg.top - 1],\n      onChange: ([scale, left, top]) => {\n        fg.scale(scale);\n        fg.top = top;\n        fg.left = left;\n        canvas.renderAll();\n      },\n      duration: 200,\n    });\n\n    document.getElementById(\"toolTip\")!.style.visibility = \"visible\";\n    document.getElementById(\"toolTip\")!.style.left = fg.getX() + \"px\";\n    document.getElementById(\"toolTip\")!.style.top =\n      fg.getY() - 2 * fg.getBoundingRect().height + \"px\";\n  });\n\n  fg.on(\"mouseout\", (e) => {\n    document.getElementById(\"toolTip\")!.style.visibility = \"hidden\";\n  });\n\n  canvas.add(fg);\n})\n}\n\nasync function main() {\n  var canvas = new fC(\"c\", {\n    centeredScaling: true,\n  });\n\n  const onr = new FabricText(\"Organismes de recherche\");\n  onr.fontSize = 24;\n  canvas.add(onr);\n\n  canvas.on(\"mouse:dblclick\", (e) => {\n    console.error(\"Double click detected\", e.scenePoint);\n  });\n  await importSVGMap(canvas);\n  await importOnrs(canvas);\n  await importUnivs(canvas);\n}\n\nmain();\n\n// create a rectangle object\n"],
  "mappings": "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",
  "names": ["BaseConfiguration", "constructor", "_defineProperty", "this", "window", "devicePixelRatio", "config", "super", "configure", "arguments", "length", "Object", "assign", "addFonts", "paths", "fontPaths", "_objectSpread", "removeFonts", "forEach", "fontFamily", "clearFonts", "restoreDefaults", "keys", "defaults", "reduce", "acc", "key", "log", "severity", "_len", "optionalParams", "Array", "_key", "console", "FabricError", "Error", "message", "options", "concat", "SignalAbortedError", "context", "GLProbe", "WebGLProbe", "testPrecision", "gl", "precision", "fragmentSource", "fragmentShader", "createShader", "FRAGMENT_SHADER", "shaderSource", "compileShader", "getShaderParameter", "COMPILE_STATUS", "queryWebGL", "canvas", "getContext", "maxTextureSize", "getParameter", "MAX_TEXTURE_SIZE", "GLPrecision", "find", "getExtension", "loseContext", "isSupported", "textureSize", "copyPasteData", "env", "setEnv", "getEnv", "env", "document", "window", "isTouchSupported", "navigator", "maxTouchPoints", "WebGLProbe", "dispose", "copyPasteData", "getFabricDocument", "getFabricWindow", "getDevicePixelRatio", "_config$devicePixelRa", "Math", "max", "config", "devicePixelRatio", "cache", "constructor", "_defineProperty", "this", "getFontCache", "_ref", "fontFamily", "fontStyle", "fontWeight", "toLowerCase", "charWidthsCache", "fontCache", "cacheKey", "concat", "clearFontCache", "limitDimsByArea", "ar", "perfLimitSizeTotal", "roughWidth", "sqrt", "floor", "VERSION", "noop", "halfPI", "PI", "twoMathPi", "PiBy180", "iMatrix", "Object", "freeze", "DEFAULT_SVG_FONT_SIZE", "kRect", "CENTER", "LEFT", "TOP", "BOTTOM", "RIGHT", "NONE", "reNewline", "MOVING", "SCALING", "ROTATING", "ROTATE", "SKEWING", "RESIZING", "MODIFY_POLY", "MODIFY_PATH", "CHANGED", "SCALE", "SCALE_X", "SCALE_Y", "SKEW_X", "SKEW_Y", "FILL", "STROKE", "MODIFIED", "JSON", "SVG", "classRegistry", "Map", "has", "classType", "getClass", "get", "FabricError", "setClass", "classConstructor", "set", "type", "getSVGClass", "SVGTagName", "setSVGClass", "runningAnimations", "Array", "remove", "context", "index", "indexOf", "splice", "cancelAll", "animations", "forEach", "animation", "abort", "cancelByCanvas", "canvas", "filter", "_animation$target", "target", "cancelByTarget", "Observable", "on", "arg0", "handler", "__eventListeners", "entries", "eventName", "off", "push", "once", "disposers", "_ref2", "d", "disposer", "_len", "arguments", "length", "args", "_key", "call", "_removeEventListener", "eventListener", "_ref3", "fire", "options", "_this$__eventListener", "listenersForEvent", "i", "removeFromArray", "array", "value", "idx", "cos", "angle", "abs", "sin", "angleSlice", "sign", "Point", "y", "x", "add", "that", "addEquals", "scalarAdd", "scalar", "scalarAddEquals", "subtract", "subtractEquals", "scalarSubtract", "scalarSubtractEquals", "multiply", "scalarMultiply", "scalarMultiplyEquals", "divide", "scalarDivide", "scalarDivideEquals", "eq", "lt", "lte", "gt", "gte", "lerp", "t", "min", "distanceFrom", "dx", "dy", "midPointFrom", "toString", "setXY", "setX", "setY", "setFromPoint", "swap", "clone", "rotate", "radians", "origin", "ZERO", "sinus", "cosinus", "p", "transform", "ignoreOffset", "isCollection", "fabricObject", "isArray", "_objects", "createCollectionMixin", "Base", "Collection", "super", "_onObjectAdded", "object", "_onObjectRemoved", "_onStackOrderChanged", "objects", "size", "insertAt", "_len2", "_key2", "removed", "_len3", "_key3", "forEachObject", "callback", "getObjects", "_len4", "types", "_key4", "o", "isType", "item", "isEmpty", "contains", "deep", "includes", "some", "obj", "complexity", "reduce", "memo", "current", "sendObjectToBack", "unshift", "bringObjectToFront", "sendObjectBackwards", "intersecting", "newIdx", "findNewLowerIndex", "bringObjectForward", "findNewUpperIndex", "moveObjectTo", "isOverlapping", "collectObjects", "left", "top", "width", "height", "includeIntersecting", "undefined", "tl", "br", "selectable", "visible", "intersectsWithRect", "isContainedWithinRect", "containsPoint", "CommonMethods", "_setOptions", "prop", "_setObject", "_set", "key", "toggle", "property", "requestAnimFrame", "requestAnimationFrame", "cancelAnimFrame", "handle", "cancelAnimationFrame", "id", "uid", "createCanvasElement", "element", "createElement", "getContext", "createImage", "createCanvasElementFor", "newCanvas", "toDataURL", "canvasEl", "format", "quality", "toBlob", "Promise", "resolve", "_", "degreesToRadians", "degrees", "radiansToDegrees", "isIdentityMatrix", "mat", "every", "transformPoint", "invertTransform", "a", "r", "multiplyTransformMatrices", "b", "is2x2", "multiplyTransformMatrixArray", "matrices", "reduceRight", "product", "curr", "calcPlaneRotation", "atan2", "qrDecompose", "denom", "pow", "scaleX", "scaleY", "skewX", "skewY", "translateX", "translateY", "createTranslateMatrix", "createRotateMatrix", "angleRadiant", "cosValue", "sinValue", "createScaleMatrix", "angleToSkew", "tan", "createSkewXMatrix", "skewValue", "createSkewYMatrix", "calcDimensionsMatrix", "flipX", "flipY", "matrix", "composeMatrix", "scaleMatrix", "loadImage", "url", "signal", "crossOrigin", "reject", "aborted", "SignalAbortedError", "img", "err", "src", "addEventListener", "done", "onload", "onerror", "removeEventListener", "enlivenObjects", "reviver", "instances", "all", "map", "fromObject", "then", "fabricInstance", "catch", "error", "instance", "finally", "enlivenObjectEnlivables", "serializedObject", "promises", "values", "enlived", "keys", "acc", "pick", "source", "pickBy", "predicate", "toFixed", "number", "fractionDigits", "parseFloat", "Number", "matrixToSVG", "NUM_FRACTION_DIGITS", "join", "isFiller", "filler", "toLive", "isSerializableFiller", "toObject", "isPattern", "offsetX", "isActiveSelection", "getScrollLeftTop", "doc", "getDocumentFromElement", "elementLoop", "docElement", "documentElement", "body", "scrollLeft", "scrollTop", "parentNode", "host", "nodeType", "style", "position", "el", "ownerDocument", "getWindowFromElement", "_el$ownerDocument", "defaultView", "setCanvasDimensions", "ctx", "retinaScaling", "setAttribute", "scale", "setCSSDimensions", "makeElementUnselectable", "onselectstart", "userSelect", "StaticCanvasDOMManager", "createLowerCanvas", "lower", "getElementById", "hasAttribute", "_originalCanvasStyle", "cssText", "classList", "cleanupDOM", "removeAttribute", "setDimensions", "calcOffset", "_getWindowFromElement", "offset", "elemStyle", "getComputedStyle", "parseInt", "borderLeftWidth", "borderTopWidth", "paddingLeft", "paddingTop", "box", "docElem", "getBoundingClientRect", "scrollLeftTop", "clientLeft", "clientTop", "staticCanvasDefaults", "backgroundVpt", "backgroundColor", "overlayVpt", "overlayColor", "includeDefaultValues", "svgViewportTransformation", "renderOnAddRemove", "skipOffscreen", "enableRetinaScaling", "imageSmoothingEnabled", "controlsAboveOverlay", "allowTouchScrolling", "viewportTransform", "StaticCanvas", "lowerCanvasEl", "_this$elements$lower", "elements", "contextContainer", "_this$elements$lower2", "getDefaults", "ownDefaults", "assign", "initElements", "_setDimensionsImpl", "skipControlsDrawing", "calcViewportBoundaries", "requestRenderAll", "log", "setCoords", "getRetinaScaling", "_offset", "getWidth", "getHeight", "setWidth", "setHeight", "dimensions", "cssOnly", "backstoreOnly", "_objectSpread", "hasLostContext", "getZoom", "setViewportTransform", "vpt", "zoomToPoint", "point", "before", "newPoint", "after", "setZoom", "absolutePan", "relativePan", "getElement", "clearContext", "clearRect", "clear", "backgroundImage", "overlayImage", "renderAll", "cancelRequestedRender", "destroyed", "renderCanvas", "renderAndReset", "nextRenderHandle", "disposed", "iVpt", "vptCoords", "tr", "bl", "drawControls", "_ctx", "v", "path", "clipPath", "patternQuality", "_renderBackground", "save", "_renderObjects", "restore", "shouldCache", "_transformDone", "renderCache", "forClipping", "drawClipPathOnCanvas", "_renderOverlay", "__cleanupTask", "globalCompositeOperation", "zoomX", "zoomY", "drawImage", "_cacheCanvas", "cacheTranslationX", "cacheTranslationY", "len", "render", "_renderBackgroundOrOverlay", "fill", "needsVpt", "isAFiller", "beginPath", "moveTo", "lineTo", "closePath", "fillStyle", "offsetY", "m", "gradientTransform", "patternTransform", "getCenter", "getCenterPoint", "centerObjectH", "_centerObject", "centerObjectV", "centerObject", "viewportCenterObject", "getVpCenter", "viewportCenterObjectH", "viewportCenterObjectV", "center", "toDatalessJSON", "propertiesToInclude", "toDatalessObject", "_toObjectMethod", "toJSON", "methodName", "clipPathData", "excludeFromExport", "_toObject", "version", "__serializeBgOverlay", "originalValue", "data", "bgImage", "bgColor", "background", "overlay", "toSVG", "markup", "_setSVGPreamble", "_setSVGHeader", "clipPathId", "_setSVGBgOverlayColor", "_setSVGBgOverlayImage", "_setSVGObjects", "suppressPreamble", "encoding", "optViewBox", "viewBox", "createSVGFontFacesMarkup", "createSVGRefElementsMarkup", "createSVGClipPathMarkup", "toClipPathSVG", "shouldTransform", "additionalTransform", "fontList", "fontPaths", "_renderText", "styles", "styleRow", "fontListMarkup", "_setSVGObject", "bgOrOverlay", "repeat", "finalWidth", "finalHeight", "loadFromJSON", "json", "serialized", "parse", "enlivedMap", "properties", "cloneWithoutData", "multiplier", "finalMultiplier", "toCanvasElement", "scaledWidth", "scaledHeight", "zoom", "originalWidth", "originalHeight", "originalSkipControlsDrawing", "newZoom", "vp", "newVp", "originalRetina", "objectsToRender", "task", "destroy", "kill", "touchEvents", "getPointer", "event", "scroll", "_evt", "touchProp", "changedTouches", "clientX", "clientY", "isTouchEvent", "pointerType", "stopEvent", "e", "preventDefault", "stopPropagation", "makeBoundingBoxFromPoints", "points", "addTransformToObject", "applyTransformToObject", "calcOwnMatrix", "_qrDecompose", "otherOptions", "_objectWithoutProperties", "_excluded", "setPositionByOrigin", "resetObjectTransform", "saveObjectTransform", "sizeAfterTransform", "dimX", "dimY", "bbox", "calcPlaneChangeMatrix", "from", "sendPointToPlane", "to", "sendVectorToPlane", "sendObjectToPlane", "fireEvent", "_target$canvas", "originOffset", "bottom", "right", "resolveOrigin", "originValue", "NOT_ALLOWED_CURSOR", "isTransformCentered", "originX", "originY", "invertOrigin", "isLocked", "lockingKey", "commonEventInfo", "eventData", "pointer", "findCornerQuadrant", "control", "cornerAngle", "getTotalAngle", "round", "getLocalPoint", "corner", "controls", "padding", "localPoint", "getRelativeCenterPoint", "translateToGivenOrigin", "dragHandler", "newLeft", "newTop", "moveX", "moveY", "ColorNameMap", "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgrey", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgrey", "lightgreen", "lightpink", "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightslategrey", "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta", "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple", "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise", "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin", "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered", "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred", "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue", "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue", "slateblue", "slategray", "slategrey", "snow", "springgreen", "steelblue", "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white", "whitesmoke", "yellow", "yellowgreen", "hue2rgb", "q", "rgb2Hsl", "g", "maxValue", "minValue", "h", "s", "l", "fromAlphaToFloat", "endsWith", "hexify", "toUpperCase", "padStart", "greyAverage", "avg", "Color", "color", "setSource", "_source", "_tryParsingColor", "sourceFromHex", "sourceFromRgb", "sourceFromHsl", "isUnrecognised", "getSource", "toRgb", "toRgba", "toHsl", "toHsla", "toHex", "toHexa", "slice", "getAlpha", "setAlpha", "alpha", "toGrayscale", "toBlackWhite", "threshold", "average", "bOrW", "overlayWith", "otherColor", "otherSource", "R", "G", "B", "fromRgba", "match", "parsedValue", "fromHsla", "parseAngletoDegrees", "expandedValue", "split", "hex", "hexCouple", "lowercase", "numeric", "parseUnit", "fontSize", "unit", "exec", "dpi", "DPI", "parsePreserveAspectRatioAttribute", "attribute", "firstPart", "secondPart", "trim", "alignX", "alignY", "align", "meetOrSlice", "colorPropToSVG", "colorValue", "opacityValue", "inlineStyle", "opacity", "FabricObjectSVGExportMixin", "getSvgStyles", "skipShadow", "fillRule", "strokeWidth", "strokeDashArray", "strokeDashOffset", "strokeLineCap", "strokeLineJoin", "strokeMiterLimit", "visibility", "getSvgFilter", "stroke", "shadow", "getSvgCommons", "getSvgTransform", "full", "calcTransformMatrix", "svgTransform", "_toSVG", "_reviver", "_createBaseSVGMarkup", "_createBaseClipPathSVGMarkup", "objectMarkup", "commonPieces", "noStyle", "withShadow", "styleInfo", "shadowInfo", "vectorEffect", "strokeUniform", "absoluteClipPath", "absolutePositioned", "clipPathMarkup", "addPaintOrder", "paintFirst", "getSvgRegex", "arr", "RegExp", "reNum", "String", "raw", "_templateObject", "_taggedTemplateLiteral", "viewportSeparator", "_templateObject2", "svgNS", "reFontDeclaration", "attributesMap", "cx", "cy", "display", "fSize", "cPath", "svgValidTagNamesRegEx", "svgViewBoxElementsRegEx", "svgValidParentsRegEx", "reViewBoxAttrValue", "_templateObject3", "unitVectorX", "zero", "rotateVector", "vector", "createVector", "magnitude", "calcAngleBetweenVectors", "crossProduct", "dotProduct", "calcVectorRotation", "getUnitVector", "getOrthonormalVector", "counterClockwise", "isBetweenVectors", "AxB", "AxT", "BxT", "shadowOffsetRegex", "reOffsetsAndBlur", "Shadow", "parseShadow", "shadowStr", "blur", "replace", "fBoxX", "fBoxY", "affectStroke", "nonScaling", "defaults", "capValue", "stateProperties", "cacheProperties", "fabricObjectDefaultValues", "minScaleLimit", "objectCaching", "inverted", "centeredRotation", "centeredScaling", "dirty", "normalize", "c", "asin", "elastic", "defaultEasing", "easeOutBounce", "easeInBounce", "easeInCirc", "easeInCubic", "easeInElastic", "normA", "normS", "normP", "easeInExpo", "easeInOutBounce", "easeInOutCirc", "easeInOutCubic", "easeInOutElastic", "normC", "easeInOutExpo", "easeInOutQuad", "easeInOutQuart", "easeInOutQuint", "easeInOutSine", "easeInQuad", "easeInQuart", "easeInQuint", "easeInSine", "easeOutCirc", "easeOutCubic", "easeOutElastic", "easeOutExpo", "easeOutQuad", "easeOutQuart", "easeOutQuint", "easeOutSine", "defaultAbort", "AnimationBase", "startValue", "byValue", "duration", "delay", "easing", "onStart", "onChange", "onComplete", "tick", "bind", "_onStart", "_onChange", "_onComplete", "_abort", "endValue", "calculate", "state", "_state", "isDone", "start", "firstTick", "timestamp", "startTime", "Date", "register", "setTimeout", "durationMs", "boundDurationMs", "durationProgress", "valueProgress", "unregister", "ValueAnimation", "timeElapsed", "ArrayAnimation", "defaultColorEasing", "wrapColorCallback", "rgba", "ColorAnimation", "startColor", "endColor", "find", "animate", "animateColor", "Intersection", "status", "append", "T", "A", "infinite", "AB", "other", "hits", "inter", "intersectSegmentSegment", "a1", "a2", "b1", "b2", "aInfinite", "bInfinite", "a2xa1x", "a2ya1y", "b2xb1x", "b2yb1y", "a1xb1x", "a1yb1y", "uaT", "ubT", "uB", "ua", "ub", "segmentsCoincide", "isPointContained", "s1", "s2", "l1", "l2", "intersectLineLine", "result", "intersectLinePolygon", "points1", "points2", "coincidences", "intersectSegmentPolygon", "r1", "r2", "topRight", "bottomLeft", "intersectPolygonPolygon", "ObjectGeometry", "getX", "getXY", "getY", "getRelativeX", "setRelativeX", "getRelativeY", "setRelativeY", "relativePosition", "getRelativeXY", "group", "setRelativeXY", "isStrokeAccountedForInDimensions", "getCoords", "aCoords", "calcACoords", "coords", "intersectPolygonRectangle", "intersectsWithObject", "intersection", "isContainedWithinObject", "getBoundingRect", "isPointInPolygon", "isOnScreen", "isPartiallyOnScreen", "getScaledWidth", "_getTransformedDimensions", "getScaledHeight", "scaleToWidth", "boundingRectFactor", "scaleToHeight", "getCanvasRetinaScaling", "_this$canvas", "getViewportTransform", "_this$canvas2", "rotateMatrix", "tMatrix", "finalMatrix", "dim", "w", "transformMatrixKey", "skipGroup", "prefix", "matrixCache", "ownMatrixCache", "_getNonTransformedDimensions", "_calculateCurrentDimensions", "dimOptions", "preScalingStrokeValue", "postScalingStrokeValue", "finalDimensions", "fromOriginX", "fromOriginY", "toOriginX", "toOriginY", "translateToCenterPoint", "translateToOriginPoint", "relCenter", "getPointByOrigin", "pos", "_getLeftTopCoords", "FabricObject", "name", "setOptions", "_createCacheCanvas", "_cacheContext", "_updateCacheCanvas", "_limitCacheSize", "dims", "maxCacheSideLimit", "minCacheSideLimit", "limX", "limY", "capped", "_getCacheCanvasDimensions", "objectScale", "getTotalObjectScaling", "neededX", "neededY", "ceil", "dimensionsChanged", "zoomChanged", "setTransform", "drawingWidth", "drawingHeight", "translate", "needFullTransform", "contextTop", "getObjectScaling", "retina", "getObjectOpacity", "_constrainScale", "isChanged", "parent", "isNotVisible", "_setupCompositeOperation", "drawSelectionBackground", "_setOpacity", "_setShadow", "drawCacheOnCanvas", "_removeCacheCanvas", "drawObject", "isCacheDirty", "parentClipPaths", "hasStroke", "hasFill", "needsItsOwnCache", "ownCaching", "isOnACache", "willDrawShadow", "drawClipPathOnCache", "canvasWithClipPath", "originalFill", "originalStroke", "_setClippingProperties", "_render", "_drawClipPath", "createClipPathLayer", "prevClipPath", "skipCanvas", "fillRect", "_removeShadow", "globalAlpha", "_setStrokeStyles", "decl", "lineWidth", "lineCap", "lineDashOffset", "lineJoin", "miterLimit", "gradientUnits", "_applyPatternForTransformedGradient", "strokeStyle", "_applyPatternGradientTransform", "_setFillStyles", "_setLineDash", "dashArray", "setLineDash", "sx", "sy", "multX", "multY", "scaling", "shadowColor", "shadowBlur", "browserShadowBlurConstant", "shadowOffsetX", "shadowOffsetY", "_renderPaintInOrder", "_renderStroke", "_renderFill", "_pCtx$createPattern", "pCanvas", "pCtx", "createPattern", "_findCenterFromElement", "objectForm", "cloneAsImage", "origParams", "originalGroup", "originalShadow", "canvasProvider", "withoutTransform", "withoutShadow", "boundingRect", "shadowOffset", "originalCanvas", "setOnGroup", "animatable", "_animate", "propIsColor", "colorProperties", "animationOptions", "isDescendantOf", "getAncestors", "ancestors", "findCommonAncestors", "fork", "otherFork", "common", "otherAncestors", "ancestor", "j", "hasCommonAncestors", "commonAncestors", "isInFrontOf", "ancestorData", "firstCommonAncestor", "headOfFork", "pop", "headOfOtherFork", "thisIndex", "otherIndex", "propertiesToSerialize", "customProperties", "toFixedBound", "val", "_removeDefaultValues", "baseValues", "getPrototypeOf", "baseValue", "serializedObjectOptions", "_ref4", "extraParam", "_excluded2", "enlivedObjectOptions", "_fromObject", "wrapWithFireEvent", "actionHandler", "extraEventInfo", "actionPerformed", "wrapWithFixedAnchor", "centerPoint", "constraint", "changeWidth", "changeObjectWidth", "strokePadding", "oldWidth", "newWidth", "renderCircleControl", "styleOverride", "xSize", "sizeX", "cornerSize", "ySize", "sizeY", "transparentCorners", "cornerStrokeColor", "myLeft", "myTop", "cornerColor", "arc", "renderSquareControl", "xSizeBy2", "ySizeBy2", "strokeRect", "Control", "shouldActivate", "controlKey", "_fabricObject$canvas", "getActiveObject", "isControlVisible", "getActionHandler", "getMouseDownHandler", "mouseDownHandler", "getMouseUpHandler", "mouseUpHandler", "cursorStyleHandler", "cursorStyle", "getActionName", "actionName", "getVisibility", "_fabricObject$_contro", "_fabricObject$_contro2", "_controlsVisibility", "setVisibility", "positionHandler", "currentControl", "calcCornerCoords", "objectCornerSize", "centerX", "centerY", "isTouch", "touchSizeX", "touchSizeY", "cornerStyle", "rotationStyleHandler", "lockRotation", "rotationWithSnapping", "rotateObjectWithSnapping", "ex", "ey", "theta", "pivotPoint", "lastAngle", "curAngle", "snapAngle", "snapThreshold", "rightAngleLocked", "leftAngleLocked", "hasRotated", "scaleIsProportional", "uniformIsToggled", "uniScaleKey", "uniformScaling", "scalingIsForbidden", "by", "scaleProportionally", "lockX", "lockY", "scaleMap", "scaleCursorStyleHandler", "n", "scaleObject", "signX", "signY", "gestureScale", "distance", "original", "oldScaleX", "oldScaleY", "scalingEqually", "scaleObjectFromCorner", "scalingX", "scaleObjectX", "scalingY", "scaleObjectY", "AXIS_KEYS", "counterAxis", "skew", "lockSkewing", "flip", "skewMap", "skewCursorStyleHandler", "skewHandler", "axis", "originKey", "lockSkewingKey", "skewKey", "flipKey", "counterOriginKey", "counterFlipKey", "counterOriginFactor", "skewingSide", "finalHandler", "skewingBefore", "skewingStart", "shearingStart", "shearing", "skewing", "atan", "changed", "dimBefore", "dimAfter", "compensationFactor", "skewHandlerX", "skewHandlerY", "isAltAction", "altActionKey", "scaleOrSkewActionName", "isAlternative", "scaleSkewCursorStyleHandler", "scalingXOrSkewingY", "scalingYOrSkewingX", "createObjectDefaultControls", "ml", "mr", "mb", "mt", "mtr", "withConnection", "createResizeControls", "createTextboxDefaultControls", "InteractiveFabricObject", "createControls", "targetCanvas", "noScaleCache", "_currentTransform", "action", "startsWith", "getActiveControl", "__corner", "coord", "oCoords", "findControl", "forTouch", "hasControls", "cornerEntries", "touchCorner", "calcOCoords", "rMatrix", "positionMatrix", "startMatrix", "transformOptions", "forEachControl", "_calcCornerCoords", "touchCornerSize", "fn", "selectionBackgroundColor", "_activeObject", "wh", "strokeBorders", "_drawBorders", "borderColor", "borderDashArray", "drawControlsConnectingLines", "_renderControls", "hasBorders", "styleOptions", "shouldDrawBorders", "shouldDrawControls", "borderScaleFactor", "isMoving", "borderOpacityWhenMoving", "drawBorders", "forActiveSelection", "shouldStroke", "cornerDashArray", "setControlVisible", "setControlsVisibility", "clearContextTop", "restoreManually", "onDeselect", "_options", "onSelect", "shouldStartDragging", "_e", "onDragStart", "canDrop", "renderDragSourceEffect", "renderDropTargetEffect", "applyMixins", "derivedCtor", "constructors", "baseCtor", "getOwnPropertyNames", "prototype", "defineProperty", "getOwnPropertyDescriptor", "create", "lockMovementX", "lockMovementY", "lockScalingX", "lockScalingY", "lockSkewingX", "lockSkewingY", "lockScalingFlip", "evented", "perPixelTargetFind", "activeOn", "hoverCursor", "moveCursor", "isTransparent", "tolerance", "getImageData", "StrokeProjectionsBase", "strokeProjectionMagnitude", "strokeUniformScalar", "createSideVector", "projectOrthogonally", "applySkew", "calcOrthogonalProjection", "isSkewed", "scaleUnitVector", "unitVector", "zeroVector", "StrokeLineJoinProjections", "vector1", "vector2", "C", "AC", "bisector", "orthogonalProjection", "correctSide", "getOrthogonalRotationFactor", "projectBevel", "projections", "projectMiter", "hypotUnitScalar", "miterVector", "projectRoundNoSkew", "startCircle", "endCircle", "projectRoundWithSkew", "circleRadius", "newY", "furthestY", "newX", "furthestX", "projectRound", "isStraightLine", "newOrigin", "proj0", "proj1", "comparisonVector", "isProj0Start", "projectPoints", "project", "originPoint", "projectedPoint", "StrokeLineCapProjections", "projectButt", "projection", "projectSquare", "strokePointingOut", "projectedA", "projectStrokeOnPoints", "openPath", "reduced", "findIndexRight", "cloneStyles", "newObj", "keyInner", "escapeXml", "string", "segmenter", "graphemeSplit", "textstring", "Intl", "Segmenter", "granularity", "segments", "segment", "graphemeSplitImpl", "graphemes", "chr", "getWholeChar", "str", "code", "charCodeAt", "isNaN", "charAt", "next", "prev", "firstLetterOnly", "hasStyleChanged", "prevStyle", "thisStyle", "forTextSpans", "textBackgroundColor", "deltaY", "overline", "underline", "linethrough", "stylesToArray", "text", "textLines", "stylesArray", "charIndex", "chars", "end", "stylesFromArray", "stylesObject", "styleIndex", "SHARED_ATTRIBUTES", "selectorMatches", "selector", "nodeName", "classNames", "getAttribute", "azAz", "matcher", "splitClassNames", "elementMatchesRule", "selectors", "parentMatching", "firstMatching", "parentElement", "normalizeAttr", "attr", "_attributesMap", "regex", "cleanupSvgAttribute", "attributeValue", "_templateObject4", "_templateObject5", "_templateObject6", "transforms", "transformList", "_templateObject7", "reTransformList", "reTransform", "reTransformAll", "parseTransformAttribute", "test", "matchAll", "transformMatch", "matchedParams", "operation", "rawArgs", "arg1", "arg2", "arg3", "arg4", "arg5", "arg", "normalizeValue", "parentAttributes", "parsed", "ouputValue", "transformMatrix", "fillIndex", "strokeIndex", "parseFontDeclaration", "oStyle", "lineHeight", "parseStyleString", "chunk", "parseStyleAttribute", "colorAttributesMap", "parseAttributes", "attributes", "cssRules", "parentFontSize", "ownAttributes", "rule", "normalizedStyle", "normalizedAttr", "normalizedValue", "font", "mergedAttrs", "colorAttr", "RECT_PROPS", "Rect", "_initRxRy", "rx", "ry", "isRounded", "bezierCurveTo", "_parseAttributes", "ATTRIBUTE_NAMES", "restOfparsedAttributes", "Boolean", "LAYOUT_TYPE_INITIALIZATION", "LAYOUT_TYPE_ADDED", "LAYOUT_TYPE_REMOVED", "LAYOUT_TYPE_IMPERATIVE", "getObjectBounds", "destinationGroup", "currentGroup", "objectCenter", "accountForStroke", "strokeUniformVector", "scalingStrokeWidth", "sizeVector", "LayoutStrategy", "calcLayoutResult", "shouldPerformLayout", "calcBoundingBox", "prevStrategy", "strategy", "shouldLayoutClipPath", "getInitialSize", "overrides", "bboxSize", "bboxCenter", "actualSize", "relativeCorrection", "FitContentLayout", "LAYOUT_MANAGER", "LayoutManager", "_subscriptions", "performLayout", "strictContext", "bubbles", "_prevLayoutStrategy", "onBeforeLayout", "layoutResult", "getLayoutResult", "commitLayout", "onAfterLayout", "attachHandlers", "trigger", "subscribe", "unsubscribe", "_context", "delete", "unsubscribeTargets", "targets", "subscribeTargets", "tricklingContext", "layoutManager", "prevCenter", "nextCenter", "correction", "_context$x", "_context$y", "layoutObjects", "layoutObject", "bubblingContext", "NoopLayoutManager", "Group", "groupInit", "_options$layoutManage", "__objectSelectionTracker", "__objectSelectionMonitor", "__objectSelectionDisposer", "enterGroup", "canEnterGroup", "_filterObjectsBeforeEnteringGroup", "allowedObjects", "_onAfterObjectsChange", "removeParentTransform", "exitGroup", "_shouldSetNestedCoords", "subTargetCheck", "removeAll", "_activeObjects", "selected", "activeObjects", "_watchObject", "watch", "_enterGroup", "activeObject", "_exitGroup", "ownCache", "preserveObjectStacking", "triggerLayout", "__serializeObjects", "method", "_includeDefaultValues", "originalDefaults", "_createSVGBgRect", "fillStroke", "commons", "svgString", "bg", "abortable", "hydratedOptions", "layoutClass", "strategyClass", "interactive", "findScaleToFit", "destination", "findScaleToCover", "commaWsp", "reArcCommandPoints", "repeatedCommands", "M", "segmentToBezier", "theta1", "theta2", "cosTh", "sinTh", "cx1", "cy1", "mT", "fromX", "fromY", "costh1", "sinth1", "costh2", "sinth2", "toX", "toY", "calcVectorAngle", "ux", "uy", "vx", "vy", "ta", "tb", "getBoundsOfCurve", "begx", "begy", "cp1x", "cp1y", "cp2x", "cp2y", "endx", "endy", "argsString", "cachesBoundsOfCurve", "boundsOfCurveCache", "tvalues", "bounds", "b2ac", "sqrtb2ac", "t1", "t2", "jlen", "iterator", "getPointOnCubicBezierIterator", "fromArcToBeziers", "fx", "fy", "rot", "large", "sweep", "tx", "ty", "segsNorm", "arcToSegments", "rotateX", "root", "sinTheta", "px", "py", "rx2", "ry2", "py2", "px2", "pl", "_rx", "_ry", "mTheta", "dtheta", "mDelta", "th3", "makePathSimpler", "x1", "y1", "destinationPath", "previous", "controlX", "controlY", "parsedCommand", "converted", "calcLineLength", "x2", "y2", "pct", "c1", "c2", "c3", "c4", "QB1", "QB2", "QB3", "getTangentCubicIterator", "p1x", "p1y", "p2x", "p2y", "p3x", "p3y", "p4x", "p4y", "qb1", "qb2", "qb3", "tangentX", "tangentY", "getPointOnQuadraticBezierIterator", "getTangentQuadraticIterator", "invT", "pathIterator", "tempP", "tmpLen", "perc", "findPercentageForDistance", "segInfo", "nextLen", "nextStep", "lastPerc", "angleFinder", "getPathSegmentsInfo", "tempInfo", "totalLength", "info", "basicInfo", "command", "destX", "destY", "getPointOnPath", "infos", "segPercent", "rePathCmdAll", "regExpArcCommandPoints", "reMyNum", "commandLengths", "parsePath", "pathString", "_pathString$match", "chain", "matchStr", "commandLetter", "commandLength", "paramArr", "lastIndex", "out", "newCommand", "transformedCommand", "getSmoothPathFromPoints", "p1", "p2", "multSignX", "multSignY", "manyPoints", "midPoint", "joinPath", "pathData", "setStyle", "elementStyle", "setProperty", "getRandomInt", "random", "request", "xhr", "removeListener", "ontimeout", "onreadystatechange", "readyState", "open", "send", "removeTransformMatrixForSvgParsing", "preserveAspectRatioOptions", "cropX", "cropY", "offsetLeft", "offsetTop", "_newCanvas$getContext", "getRegularPolygonPath", "numVertexes", "radius", "interiorAngle", "rotationAdjustment", "rad", "commonAttributes", "groupSVGElements", "mergeClipPaths", "_b$group", "removeTransformFromObject", "finalTransform", "rotatePoint", "transformPath", "pathOffset", "pathSegment", "newSegment", "CanvasDOMManager", "containerClass", "upperCanvasEl", "createUpperCanvas", "upper", "applyCanvasStyle", "container", "createContainerElement", "replaceChild", "className", "removeChild", "SelectableCanvas", "_this$elements$upper", "_this$elements$upper2", "wrapperEl", "_objectsToRender", "deselected", "_discardActiveObject", "_hoveredTarget", "_hoveredTargets", "_chooseObjectsToRender", "contextTopDirty", "_groupSelector", "isDrawingMode", "renderTopLayer", "_isCurrentlyDrawing", "freeDrawingBrush", "selection", "_drawSelection", "renderTop", "setTargetFindTolerance", "targetFindTolerance", "pixelFindCanvasEl", "pixelFindContext", "isTargetTransparent", "selectionBgc", "enhancedTolerance", "_isSelectionKeyPressed", "sKey", "selectionKey", "_shouldClearSelection", "getActiveObjects", "_shouldCenterTransform", "modifierKeyPressed", "centerTransform", "_getOriginFromCorner", "controlName", "_setupCurrentTransform", "alreadySelected", "_control$getActionHan", "getScenePoint", "getActionFromCorner", "altKey", "centeredKey", "lastX", "lastY", "shiftKey", "setCursor", "cursor", "deltaX", "extent", "strokeOffset", "selectionLineWidth", "minX", "minY", "maxX", "maxY", "selectionColor", "selectionBorderColor", "selectionDashArray", "findTarget", "skipTargetFind", "getViewportPoint", "aObjects", "searchPossibleTargets", "subTargets", "altSelectionKey", "_pointIsInObjectSelectionArea", "viewportZoom", "angleRadians", "cosP", "sinP", "cosPSinP", "cosPMinusSinP", "_checkTarget", "isEditing", "_searchPossibleTargets", "subTarget", "_pointer", "_absolutePointer", "fromViewport", "boundsWidth", "boundsHeight", "cssScale", "_resetTransformEventData", "_setBrushStyles", "willReadFrequently", "getTopContext", "getSelectionContext", "getSelectionElement", "active", "_fireSelectionEvents", "oldObjects", "somethingChanged", "invalidate", "added", "setActiveObject", "currentActives", "_setActiveObject", "prevActiveObject", "endCurrentTransform", "discardActiveObject", "discarded", "_finalizeCurrentTransform", "_scaling", "originalProperties", "_realizeGroupTransformOnObject", "originalValues", "selectionFullyContained", "defaultCursor", "freeDrawingCursor", "notAllowedCursor", "stopContextMenu", "fireRightClick", "fireMiddleClick", "enablePointerEvents", "TextEditingManager", "cb", "hiddenTextarea", "focus", "__disposer", "exitTextEditing", "exitEditing", "onMouseMove", "_this$target", "updateSelectionOnMouseMove", "addEventOptions", "passive", "getEventPoints", "viewportPoint", "scenePoint", "absolutePointer", "addListener", "syntheticEventConfig", "mouse", "in", "targetIn", "targetOut", "canvasIn", "canvasOut", "drag", "Canvas", "eventHandler", "addOrRemove", "_getEventPrefix", "functor", "_eventjsFunctor", "canvasElement", "eventTypePrefix", "_onResize", "_onMouseDown", "_onMouseMove", "_onMouseOut", "_onMouseEnter", "_onMouseWheel", "_onContextMenu", "_onClick", "_onDragStart", "_onDragEnd", "_onDragOver", "_onDragEnter", "_onDragLeave", "_onDrop", "_onTouchStart", "removeListeners", "_onMouseUp", "_onTouchEnd", "clearTimeout", "_willAddMouseDown", "__onMouseWheel", "shared", "nestedTarget", "_isClick", "_dragSource", "_onDragProgress", "_renderDragEffects", "dropTarget", "_dropTarget", "didDrop", "dataTransfer", "dropEffect", "dragSource", "_draggedoverTarget", "findDragTargets", "eventType", "_fireEnterLeaveEvents", "_basicEventHandler", "clicks", "detail", "_cacheTransformEventData", "_handleEvent", "getPointerId", "evt", "identifier", "pointerId", "_isMainEvent", "isPrimary", "touches", "mainTouchId", "shouldPreventScrolling", "currentActiveObject", "__onMouseDown", "_target", "__onMouseUp", "__onMouseMove", "_shouldRender", "_this$_activeObject", "isClick", "button", "_onMouseUpInDrawingMode", "shouldRender", "targetWasActive", "handleSelection", "found", "originalControl", "originalMouseUpHandler", "_setCursorFromEvent", "extraData", "currentTarget", "currentSubTargets", "_onMouseDownInDrawingMode", "onMouseDown", "_onMouseMoveInDrawingMode", "onMouseUp", "grouped", "handleMultiSelection", "groupSelector", "_transformObject", "_fireOverOutEvents", "textEditingManager", "fireSyntheticInOutEvents", "oldTarget", "fireCanvas", "draggedoverTarget", "targetChanged", "outOpt", "nextTarget", "inOpt", "previousTarget", "localPointer", "_performTransformAction", "activeSelection", "reverse", "isAS", "prevActiveObjects", "multiSelectAdd", "newActiveSelection", "point1", "point2", "collectedObjects", "klass", "linearDefaultCoords", "radialDefaultCoords", "ifNaN", "valueIfNaN", "RE_PERCENT", "isPercent", "parsePercent", "NaN", "RE_KEY_VALUE_PAIRS", "RE_KEY_VALUE", "parseColorStop", "keyValuePairs", "parseColorStops", "opacityAttr", "colorStops", "colorStopEls", "getElementsByTagName", "parseType", "parseGradientUnits", "getValue", "parseCoords", "valuesToConvert", "finalValue", "propValue", "Gradient", "addColorStop", "colorStop", "preTransform", "sort", "_renderPathCommands", "needsSwap", "minRadius", "percentageShift", "gradient", "createLinearGradient", "createRadialGradient", "svgOptions", "viewBoxWidth", "viewBoxHeight", "Pattern", "isImageSource", "isCanvasSource", "sourceToString", "complete", "naturalWidth", "naturalHeight", "patternSource", "patternOffsetX", "patternOffsetY", "patternWidth", "patternHeight", "Path", "FabricObject", "constructor", "path", "_ref", "arguments", "length", "_", "left", "top", "options", "_objectWithoutProperties", "_excluded", "super", "Object", "assign", "this", "ownDefaults", "setOptions", "_setPath", "set", "LEFT", "TOP", "adjustPosition", "makePathSimpler", "Array", "isArray", "parsePath", "setBoundingBox", "_findCenterFromElement", "bbox", "_calcBoundsFromPath", "Point", "width", "height", "_renderPathCommands", "ctx", "l", "pathOffset", "x", "t", "y", "beginPath", "command", "lineTo", "moveTo", "bezierCurveTo", "quadraticCurveTo", "closePath", "_render", "_renderPaintInOrder", "toString", "concat", "complexity", "toObject", "propertiesToInclude", "_objectSpread", "map", "pathCmd", "slice", "toDatalessObject", "o", "sourcePath", "_toSVG", "joinPath", "config", "NUM_FRACTION_DIGITS", "_getOffsetTransform", "digits", "toFixed", "toClipPathSVG", "reviver", "additionalTransform", "_createBaseClipPathSVGMarkup", "toSVG", "_createBaseSVGMarkup", "setDimensions", "_calcDimensions", "setPositionByOrigin", "CENTER", "bounds", "subpathStartX", "subpathStartY", "push", "getBoundsOfCurve", "makeBoundingBoxFromPoints", "object", "_fromObject", "extraParam", "element", "cssRules", "_parseAttributes", "parseAttributes", "ATTRIBUTE_NAMES", "d", "parsedAttributes", "_excluded2", "undefined", "_defineProperty", "cacheProperties", "SHARED_ATTRIBUTES", "classRegistry", "setClass", "setSVGClass", "CIRCLE_PROPS", "Circle", "FabricObject", "getDefaults", "_objectSpread", "super", "ownDefaults", "constructor", "options", "Object", "assign", "this", "setOptions", "_set", "key", "value", "setRadius", "_render", "ctx", "beginPath", "arc", "radius", "degreesToRadians", "startAngle", "endAngle", "counterClockwise", "_renderPaintInOrder", "getRadiusX", "get", "SCALE_X", "getRadiusY", "SCALE_Y", "set", "width", "height", "toObject", "propertiesToInclude", "arguments", "length", "_toSVG", "angle", "concat", "start", "end", "startX", "cos", "startY", "sin", "endX", "endY", "largeFlag", "sweepFlag", "element", "cssRules", "_ref", "parseAttributes", "ATTRIBUTE_NAMES", "left", "top", "_objectWithoutProperties", "_excluded", "object", "_fromObject", "_defineProperty", "cacheProperties", "SHARED_ATTRIBUTES", "classRegistry", "setClass", "setSVGClass", "coordProps", "Line", "FabricObject", "constructor", "x1", "y1", "x2", "y2", "arguments", "length", "options", "super", "Object", "assign", "this", "ownDefaults", "setOptions", "_setWidthHeight", "left", "top", "set", "LEFT", "TOP", "width", "Math", "abs", "height", "makeBoundingBoxFromPoints", "x", "y", "position", "Point", "setPositionByOrigin", "CENTER", "_set", "key", "value", "includes", "_render", "ctx", "beginPath", "p", "calcLinePoints", "moveTo", "lineTo", "lineWidth", "strokeWidth", "origStrokeStyle", "strokeStyle", "_this$stroke", "isFiller", "stroke", "toLive", "fillStyle", "_renderStroke", "_findCenterFromElement", "toObject", "propertiesToInclude", "_objectSpread", "_getNonTransformedDimensions", "dim", "strokeLineCap", "_x1", "_x2", "_y1", "_y2", "xMult", "yMult", "_toSVG", "concat", "element", "cssRules", "_parseAttributes", "parseAttributes", "ATTRIBUTE_NAMES", "_objectWithoutProperties", "_excluded", "_ref", "object", "_excluded2", "_fromObject", "points", "extraParam", "_defineProperty", "cacheProperties", "SHARED_ATTRIBUTES", "classRegistry", "setClass", "setSVGClass", "Triangle", "getDefaults", "widthBy2", "heightBy2", "closePath", "_renderPaintInOrder", "ELLIPSE_PROPS", "Ellipse", "rx", "ry", "getRx", "get", "SCALE_X", "getRy", "SCALE_Y", "save", "transform", "arc", "twoMathPi", "restore", "parsedAttributes", "parsePointsAttribute", "pointsSplit", "replace", "trim", "split", "parsedPoints", "i", "push", "parseFloat", "polylineDefaultValues", "exactBoundingBox", "Polyline", "initialized", "setBoundingBox", "isOpen", "_projectStrokeOnPoints", "projectStrokeOnPoints", "_calcDimensions", "scaleX", "scaleY", "skewX", "skewY", "strokeLineJoin", "strokeMiterLimit", "strokeUniform", "map", "projection", "projectedPoint", "pathOffset", "strokeOffset", "strokeDiff", "bbox", "matrix", "calcDimensionsMatrix", "bboxNoStroke", "transformPoint", "scale", "offsetX", "offsetY", "tan", "degreesToRadians", "subtract", "multiply", "setDimensions", "adjustPosition", "isStrokeAccountedForInDimensions", "_getTransformedDimensions", "size", "keys", "some", "layoutProperties", "_options$width", "_options$height", "_options$width2", "_options$height2", "changed", "output", "diffX", "diffY", "NUM_FRACTION_DIGITS", "config", "len", "toFixed", "type", "toLowerCase", "join", "isNaN", "point", "complexity", "getAttribute", "SKEW_X", "SKEW_Y", "Polygon", "fontProperties", "textDecorationProperties", "textLayoutProperties", "additionalProps", "styleProperties", "STROKE", "FILL", "textDefaultValues", "_reNewline", "reNewline", "_reSpacesAndTabs", "_reSpaceAndTab", "_reWords", "fontSize", "fontWeight", "fontFamily", "underline", "overline", "linethrough", "textAlign", "fontStyle", "lineHeight", "superscript", "baseline", "subscript", "textBackgroundColor", "shadow", "path", "pathStartOffset", "pathSide", "pathAlign", "_fontSizeFraction", "offsets", "_fontSizeMult", "charSpacing", "deltaY", "direction", "CACHE_FONT_SIZE", "MIN_TEXT_WIDTH", "JUSTIFY", "JUSTIFY_LEFT", "JUSTIFY_RIGHT", "JUSTIFY_CENTER", "StyledText", "isEmptyStyles", "lineIndex", "styles", "obj", "line", "p1", "p2", "p3", "styleHas", "property", "cleanStyle", "letterCount", "stylePropertyValue", "stylesCount", "allStyleObjectPropertiesMatch", "graphemeCount", "styleObject", "_textLines", "removeStyle", "lineNum", "charNum", "_extendStyles", "index", "style", "charIndex", "get2DCursorLocation", "_getLineStyle", "_setLineStyle", "newStyle", "pickBy", "_getStyleDeclaration", "_setStyleDeclaration", "getSelectionStyles", "startIndex", "endIndex", "complete", "getStyleAtPosition", "getCompleteStyleDeclaration", "setSelectionStyles", "_forceClearCache", "_lineStyle$charIndex", "lineStyle", "pick", "_styleProperties", "_deleteStyleDeclaration", "_deleteLineStyle", "multipleSpacesRegex", "dblQuoteRegex", "createSVGInlineRect", "color", "precision", "undefined", "svgColor", "colorPropToSVG", "w", "h", "measuringContext", "FabricText", "text", "setPathInfo", "initDimensions", "setCoords", "segmentsInfo", "getPathSegmentsInfo", "_splitText", "newLines", "_splitTextIntoLines", "textLines", "lines", "graphemeLines", "_unwrappedTextLines", "_unwrappedLines", "_text", "graphemeText", "_clearCache", "dirty", "calcTextWidth", "cursorWidth", "calcTextHeight", "enlargeSpaces", "diffSpace", "currentLineWidth", "numberOfSpaces", "accumulatedSpace", "charBound", "spaces", "isEndOfWrapping", "getLineWidth", "match", "j", "__charBounds", "test", "kernedWidth", "missingNewlineOffset", "_lineIndex", "selectionStart", "skipWrapping", "toString", "_getCacheCanvasDimensions", "dims", "zoomX", "zoomY", "isNotVisible", "_setTextStyles", "_renderTextLinesBackground", "_renderTextDecoration", "_renderText", "paintFirst", "_renderTextStroke", "_renderTextFill", "charStyle", "forMeasuring", "textBaseline", "BOTTOM", "font", "_getFontDeclaration", "maxWidth", "_renderTextLine", "method", "_renderChars", "originalFill", "leftOffset", "_getLeftOffset", "lineTopOffset", "_getTopOffset", "heightOfLine", "getHeightOfLine", "jlen", "lineLeftOffset", "_getLineLeftOffset", "drawStart", "currentColor", "boxWidth", "boxStart", "lastColor", "getValueOfPropertyAt", "charBox", "translate", "renderLeft", "renderTop", "rotate", "angle", "fillRect", "_removeShadow", "_measureChar", "_char", "previousChar", "prevCharStyle", "fontCache", "cache", "getFontCache", "fontDeclaration", "couple", "stylesAreEqual", "fontMultiplier", "coupleWidth", "previousWidth", "canvas", "createCanvasElementFor", "getContext", "getMeasuringContext", "measureText", "getHeightOfChar", "measureLine", "lineInfo", "_measureLine", "_getWidthOfCharSpacing", "prevGrapheme", "graphemeInfo", "reverse", "RIGHT", "llength", "lineBounds", "Array", "grapheme", "_getGraphemeBox", "positionInPath", "totalPathLength", "_setGraphemeOnPath", "numOfSpaces", "centerPosition", "info", "getPointOnPath", "PI", "skipLeft", "prevStyle", "box", "previousBox", "__lineHeights", "maxHeight", "max", "_renderTextCommon", "lineHeights", "fill", "affectStroke", "_setLineDash", "strokeDashArray", "isJustify", "shortCut", "isLtr", "sign", "currentDirection", "actualStyle", "nextStyle", "timeToRender", "drawingLeft", "charsToRender", "setAttribute", "_renderChar", "hasStyleChanged", "_applyPatternGradientTransformText", "filler", "pCanvas", "pCtx", "_applyPatternGradientTransform", "createPattern", "handleFiller", "gradientUnits", "gradientTransform", "patternTransform", "_setStrokeStyles", "lineCap", "lineDashOffset", "strokeDashOffset", "lineJoin", "miterLimit", "_setFillStyles", "_ref2", "decl", "fullDecl", "shouldFill", "shouldStroke", "fillOffsets", "fillText", "strokeOffsets", "strokeText", "setSuperscript", "start", "end", "_setScript", "setSubscript", "schema", "loc", "dy", "lineDiff", "__lineWidths", "_charStyle$property", "topOffset", "currentDecoration", "currentFill", "lastDecoration", "lastFill", "currentSize", "currentDy", "parsedFontFamily", "genericFonts", "render", "visible", "skipOffscreen", "group", "isOnScreen", "graphemeSplit", "newLine", "newText", "pop", "stylesToArray", "needsDims", "isAddingPath", "_key", "_options$parsedAttrib", "textAnchor", "textDecoration", "dx", "DEFAULT_SVG_FONT_SIZE", "restOfOptions", "textContent", "textHeightScaleFactor", "getScaledHeight", "scaledDiff", "textHeight", "offX", "getScaledWidth", "stylesFromArray", "applyMixins", "FabricObjectSVGExportMixin", "_getSVGLeftTopOffsets", "textAndBg", "_getSVGTextAndBg", "textTop", "textLeft", "_wrapSVGTextAndBg", "toSVG", "reviver", "textSvg", "_createBaseSVGMarkup", "noStyle", "withShadow", "additionalTransform", "matrixToSVG", "calcOwnMatrix", "lineTop", "textBgRects", "textSpans", "getSvgTextDecoration", "getSvgStyles", "addPaintOrder", "textTopOffset", "textLeftOffset", "lineOffset", "backgroundColor", "_setSVGTextLineBg", "_setSVGTextLineText", "_createTextCharSpan", "char", "styleDecl", "numFractionDigit", "styleProps", "getSvgSpanStyles", "fillStyles", "dySpan", "angleAttr", "wBy2", "radiansToDegrees", "m", "createRotateMatrix", "renderPoint", "escapeXml", "_getSVGLineTopOffset", "lastHeight", "offset", "skipShadow", "useWhiteSpace", "filter", "decoration", "DraggableTextDelegate", "target", "disposers", "on", "dragEnterHandler", "bind", "dragOverHandler", "dragLeaveHandler", "dragEndHandler", "dropHandler", "_dispose", "forEach", "d", "isPointerOverSelection", "e", "newSelection", "getSelectionStartFromPointer", "isEditing", "selectionEnd", "__mouseDownInPlace", "isActive", "active", "__dragStartFired", "setCursorByClick", "initDelayedCursor", "__isDraggingOver", "getDragStartSelection", "__dragStartSelection", "setDragImage", "_e$dataTransfer", "flipFactor", "flipX", "flipY", "boundaries", "_getCursorBoundaries", "pos", "calcTransformMatrix", "diff", "getScenePoint", "retinaScaling", "getCanvasRetinaScaling", "getBoundingRect", "correction", "vpt", "viewportTransform", "add", "bgc", "cloneStyles", "styleOverride", "dragImage", "toCanvasElement", "enableRetinaScaling", "setStyle", "border", "NONE", "__dragImageDisposer", "remove", "getDocumentFromElement", "hiddenTextarea", "body", "appendChild", "dataTransfer", "onDragStart", "selection", "slice", "data", "setData", "JSON", "stringify", "effectAllowed", "abortCursorAnimation", "canDrop", "editable", "getActiveControl", "defaultPrevented", "dragStartSelection", "targetCanDrop", "ev", "preventDefault", "dropTarget", "_e$dataTransfer2", "didDrop", "insert", "getData", "insertAt", "types", "parse", "trailing", "selectionStartOffset", "removeChars", "trimEnd", "insertChars", "setActiveObject", "enterEditing", "min", "_updateTextarea", "focus", "fire", "CHANGED", "action", "contextTopDirty", "requestRenderAll", "_ref3", "_e$dataTransfer3", "dropEffect", "clearContextTop", "exitEditing", "dispose", "reNonWord", "ITextBehavior", "initBehavior", "_tick", "_onTickComplete", "updateSelectionOnMouseMove", "onDeselect", "selected", "_animateCursor", "toValue", "duration", "delay", "onComplete", "animate", "startValue", "_currentCursorOpacity", "endValue", "abort", "onChange", "renderCursorOrSelection", "_currentTickState", "cursorDuration", "_this$_currentTickCom", "_currentTickCompleteState", "restart", "cursorDelay", "shouldClear", "cursorAnimation", "isDone", "restartCursorIfNeeded", "selectAll", "_fireSelectionChanged", "cmdAll", "getSelectedText", "findWordBoundaryLeft", "startFrom", "_reSpace", "findWordBoundaryRight", "findLineBoundaryLeft", "findLineBoundaryRight", "searchWordBoundary", "selectWord", "_selectionStart", "newSelectionStart", "newSelectionEnd", "selectLine", "_selectionStart2", "enterEditingImpl", "calcOffset", "textEditingManager", "exitTextEditing", "initHiddenTextarea", "_saveEditingProps", "_setEditingProps", "_textBeforeEdit", "el", "activeElement", "currentStart", "currentEnd", "__selectionStartOnMouseDown", "hoverCursor", "defaultCursor", "moveCursor", "borderColor", "editingBorderColor", "hasControls", "selectable", "lockMovementX", "lockMovementY", "fromStringToGraphemeSelection", "smallerTextStart", "graphemeStart", "smallerTextEnd", "fromGraphemeToStringSelection", "graphemes", "cursorOffsetCache", "inCompositionMode", "updateTextareaPosition", "updateFromTextArea", "textarea", "_calcTextareaPosition", "desiredPosition", "compositionStart", "cursorLocation", "charHeight", "upperCanvas", "upperCanvasEl", "upperCanvasWidth", "upperCanvasHeight", "clientWidth", "clientHeight", "_offset", "_savedProps", "_restoreEditingProps", "_exitEditing", "blur", "parentNode", "removeChild", "exitEditingImpl", "isTextChanged", "MODIFIED", "_removeExtraneousStyles", "prop", "removeStyleFromTo", "lineStart", "charStart", "lineEnd", "charEnd", "styleObj", "shiftLineStyles", "numericChar", "parseInt", "clonedStyles", "numericLine", "insertNewlineStyleObject", "qty", "copiedStyle", "newLineStyles", "originalLineLength", "isEndOfLine", "someStyleIsCarryingOver", "currentCharStyle", "numIndex", "styleCarriedOver", "insertCharStyleObject", "quantity", "currentLineStyles", "currentLineStylesCloned", "numericIndex", "insertNewStyleBlock", "insertedText", "cursorLoc", "addedLines", "linesLength", "splice", "setSelectionStartEndWithShift", "_selectionDirection", "ITextKeyBehavior", "doc", "getElement", "getFabricDocument", "createElement", "entries", "autocapitalize", "autocorrect", "autocomplete", "spellcheck", "wrap", "attribute", "cssText", "hiddenTextareaContainer", "keydown", "keyup", "input", "copy", "cut", "paste", "compositionstart", "compositionupdate", "compositionend", "eventName", "handler", "addEventListener", "onKeyDown", "keyMap", "keysMapRtl", "keysMap", "keyCode", "ctrlKeysMapDown", "ctrlKey", "metaKey", "stopImmediatePropagation", "onKeyUp", "_copyDone", "ctrlKeysMapUp", "onInput", "fromPaste", "stopPropagation", "updateAndFire", "nextText", "charCount", "nextCharCount", "_selectionEnd", "removedText", "removeFrom", "removeTo", "charDiff", "textareaSelection", "backDelete", "copyPasteData", "getEnv", "copiedText", "disableStyleCopyPaste", "copiedTextStyle", "onCompositionStart", "onCompositionEnd", "onCompositionUpdate", "compositionEnd", "_getWidthBeforeCursor", "bound", "widthBeforeCursor", "getDownCursorOffset", "isRight", "selectionProp", "_getSelectionForOffset", "indexOnOtherLine", "_getIndexOnLine", "shiftKey", "getUpCursorOffset", "textBeforeCursor", "charWidth", "foundMatch", "widthOfCharsOnLine", "indexOnLine", "leftEdge", "rightEdge", "offsetFromLeftEdge", "moveCursorDown", "_moveCursorUpOrDown", "moveCursorUp", "moveCursorWithShift", "moveCursorWithoutShift", "capValue", "moveCursorLeft", "_moveCursorLeftOrRight", "_move", "newValue", "altKey", "_moveLeft", "_moveRight", "moveCursorLeftWithoutShift", "change", "moveCursorLeftWithShift", "moveCursorRight", "actionName", "moveCursorRightWithShift", "moveCursorRightWithoutShift", "notALeftClick", "button", "ITextClickBehavior", "_mouseDownHandler", "mouseUpHandler", "doubleClickHandler", "tripleClickHandler", "draggableTextDelegate", "shouldStartDragging", "alreadySelected", "register", "didDrag", "unregister", "activeObject", "_activeObject", "interactive", "actionPerformed", "mouseOffset", "invertTransform", "charLength", "chars", "widthAfter", "MOVE_CURSOR_UP", "MOVE_CURSOR_DOWN", "MOVE_CURSOR_LEFT", "MOVE_CURSOR_RIGHT", "EXIT_EDITING", "applyCanvasTransform", "getRetinaScaling", "setTransform", "v", "iTextDefaultValues", "selectionColor", "cursorColor", "caching", "IText", "Canvas", "setSelectionStart", "_updateAndFire", "setSelectionEnd", "ancestors", "findAncestorsWithClipPath", "hasAncestorsWithClipping", "drawingCanvas", "drawingCtx", "renderSelection", "renderCursor", "ancestor", "clipPath", "clippingCanvas", "clippingCtx", "absolutePositioned", "drawObject", "drawClipPathOnCache", "drawImage", "clipPathAncestors", "parent", "skipCaching", "_getCursorBoundariesOffsets", "__getCursorBoundariesOffsets", "renderCursorAt", "_renderCursor", "contextTop", "getCursorRenderingData", "multiplier", "getObjectScaling", "getZoom", "opacity", "globalAlpha", "_renderSelection", "renderDragSourceEffect", "renderDropTargetEffect", "dragSelection", "startLine", "endLine", "startChar", "endChar", "realLineHeight", "boxEnd", "drawHeight", "extraTop", "drawWidth", "compositionColor", "getCurrentCharFontSize", "cp", "_getCurrentCharIndex", "l", "c", "getCurrentCharColor", "cursorPosition", "Textbox", "createControls", "controls", "createTextboxDefaultControls", "dynamicMinWidth", "_styleMap", "_generateStyleMap", "textInfo", "realLineCount", "realLineCharCount", "splitByGrapheme", "isWrapping", "nextOffset", "nextLineIndex", "shouldLimit", "mapNextLine", "p2Number", "_wrapText", "desiredWidth", "getGraphemeDataForRender", "wrapped", "wordsData", "_wrapLine", "infix", "largestWordWidth", "wordsOrGraphemes", "wordSplit", "word", "graphemeArray", "_measureWord", "charOffset", "_wordJoiners", "reservedSpace", "additionalSpace", "infixWidth", "lineJustStarted", "wordWidth", "getMinWidth", "minWidth", "linesToKeep", "Map", "propNumber", "has", "lockScalingFlip", "noScaleCache", "ClipPathLayout", "LayoutStrategy", "shouldPerformLayout", "context", "shouldLayoutClipPath", "calcLayoutResult", "objects", "getObjectBounds", "center", "sendPointToPlane", "getRelativeCenterPoint", "clipPathCenter", "calcBoundingBox", "FixedLayout", "getInitialSize", "ActiveSelectionLayoutManager", "LayoutManager", "subscribeTargets", "activeSelection", "targets", "reduce", "parents", "Set", "layoutManager", "unsubscribeTargets", "selectedObjects", "getObjects", "ActiveSelection", "Group", "groupInit", "_shouldSetNestedCoords", "__objectSelectionMonitor", "multiSelectAdd", "_len", "multiSelectionStacking", "_objects", "findIndex", "isInFrontOf", "canEnterGroup", "o", "isDescendantOf", "log", "enterGroup", "removeParentTransform", "_exitGroup", "_enterGroup", "exitGroup", "_onAfterObjectsChange", "groups", "LAYOUT_TYPE_REMOVED", "LAYOUT_TYPE_ADDED", "removeAll", "shouldCache", "isOnACache", "_renderControls", "childrenOverride", "isMoving", "borderOpacityWhenMoving", "forActiveSelection", "Canvas2dFilterBackend", "applyFilters", "filters", "sourceElement", "sourceWidth", "sourceHeight", "targetCanvas", "pipelineState", "imageData", "getImageData", "originalEl", "originalImageData", "canvasEl", "filterBackend", "applyTo", "imageDataPostFilter", "putImageData", "WebGLFilterBackend", "tileSize", "textureSize", "Float32Array", "setupGLContext", "captureGPUInfo", "createWebGLCanvas", "gl", "alpha", "premultipliedAlpha", "depth", "stencil", "antialias", "clearColor", "source", "cacheKey", "cachedTexture", "getCachedTexture", "originalWidth", "naturalWidth", "originalHeight", "naturalHeight", "destinationWidth", "destinationHeight", "sourceTexture", "createTexture", "targetTexture", "originalTexture", "passes", "webgl", "aPosition", "programCache", "pass", "tempFbo", "createFramebuffer", "bindFramebuffer", "FRAMEBUFFER", "dWidth", "dHeight", "copyGLTo2D", "bindTexture", "TEXTURE_2D", "deleteTexture", "deleteFramebuffer", "clearWebGLCaches", "textureCache", "textureImageSource", "NEAREST", "RGBA", "UNSIGNED_BYTE", "CLAMP_TO_EDGE", "TEXTURE_MAG_FILTER", "TEXTURE_MIN_FILTER", "TEXTURE_WRAP_S", "TEXTURE_WRAP_T", "texture", "texParameteri", "texImage2D", "uniqueId", "evictCachesForKey", "glCanvas", "sourceY", "copyGLTo2DPutImageData", "numBytes", "u8", "Uint8Array", "imageBuffer", "u8Clamped", "Uint8ClampedArray", "readPixels", "imgData", "ImageData", "gpuInfo", "renderer", "vendor", "ext", "getExtension", "getParameter", "UNMASKED_RENDERER_WEBGL", "UNMASKED_VENDOR_WEBGL", "initFilterBackend", "WebGLProbe", "queryWebGL", "createCanvasElement", "enableGLFiltering", "isSupported", "getFilterBackend", "IMAGE_PROPS", "FabricImage", "FabricObject", "getDefaults", "_objectSpread", "super", "ownDefaults", "constructor", "arg0", "options", "_defineProperty", "this", "filters", "Object", "assign", "setOptions", "cacheKey", "concat", "uid", "setElement", "canvas", "getDocumentFromElement", "getElement", "getFabricDocument", "getElementById", "_element", "element", "_element$classList", "size", "arguments", "length", "removeTexture", "_originalElement", "_setWidthHeight", "classList", "add", "CSS_CANVAS", "applyFilters", "resizeFilter", "applyResizeFilters", "key", "backend", "getFilterBackend", "WebGLFilterBackend", "evictCachesForKey", "dispose", "_cacheContext", "forEach", "elementKey", "el", "getEnv", "getCrossOrigin", "crossOrigin", "getOriginalSize", "width", "naturalWidth", "height", "naturalHeight", "_stroke", "ctx", "stroke", "strokeWidth", "w", "h", "beginPath", "moveTo", "lineTo", "closePath", "toObject", "propertiesToInclude", "filterObj", "push", "src", "getSrc", "hasCrop", "cropX", "cropY", "_toSVG", "imageMarkup", "x", "y", "svgString", "strokeSvg", "clipPath", "imageRendering", "clipPathId", "imageSmoothing", "getSvgSrc", "strokeDashArray", "origFill", "fill", "getSvgStyles", "paintFirst", "FILL", "filtered", "toDataURL", "srcFromAttribute", "getAttribute", "setSrc", "signal", "undefined", "loadImage", "then", "img", "set", "toString", "filter", "minimumScale", "minimumScaleTrigger", "objectScale", "getTotalObjectScaling", "scaleX", "scaleY", "elementToFilter", "_filteredEl", "group", "_filterScalingX", "_filterScalingY", "_lastScaleX", "_lastScaleY", "canvasEl", "createCanvasElementFor", "isNeutralState", "imgElement", "sourceWidth", "sourceHeight", "getContext", "clearRect", "_render", "imageSmoothingEnabled", "isMoving", "_needsResize", "_renderPaintInOrder", "drawCacheOnCanvas", "shouldCache", "needsItsOwnCache", "_renderFill", "elementToDraw", "Math", "max", "elWidth", "elHeight", "sX", "sY", "sW", "min", "sH", "maxDestW", "maxDestH", "drawImage", "scale", "_resetWidthHeight", "parsePreserveAspectRatioAttribute", "pAR", "preserveAspectRatio", "pWidth", "pHeight", "parsedAttributes", "offset", "rWidth", "rHeight", "offsetLeft", "offsetTop", "alignX", "NONE", "alignY", "meetOrSlice", "findScaleToFit", "findScaleToCover", "_ref", "f", "rf", "type", "object", "_objectWithoutProperties", "_excluded", "Promise", "all", "enlivenObjects", "enlivenObjectEnlivables", "_ref2", "hydratedProps", "url", "imageOptions", "cssRules", "parseAttributes", "ATTRIBUTE_NAMES", "fromURL", "catch", "err", "log", "applyViewboxTransform", "svgViewBoxElementsRegEx", "test", "nodeName", "viewBoxAttr", "matrix", "minX", "minY", "widthAttr", "heightAttr", "missingViewBox", "reViewBoxAttrValue", "missingDimAttr", "translateMatrix", "widthDiff", "heightDiff", "parentNode", "parseUnit", "setAttribute", "removeAttribute", "parsedDim", "pasedViewBox", "match", "parseFloat", "viewBoxWidth", "viewBoxHeight", "ownerDocument", "createElementNS", "svgNS", "firstChild", "appendChild", "cacheProperties", "SHARED_ATTRIBUTES", "classRegistry", "setClass", "setSVGClass", "getTagName", "node", "tagName", "replace", "svgInvalidAncestorsRegEx", "getSvgRegex", "getMultipleNodes", "doc", "nodeNames", "nodeList", "i", "len", "nodeArray", "getElementsByTagNameNS", "Array", "from", "gradientsAttrs", "xlinkAttr", "recursivelyParseGradientsXlink", "gradient", "_gradient$getAttribut", "xLink", "slice", "referencedGradient", "attr", "value", "hasAttribute", "children", "referenceClone", "cloneNode", "tagArray", "getCSSRules", "styles", "getElementsByTagName", "allRules", "styleContents", "textContent", "trim", "split", "rule", "index", "array", "startsWith", "ruleObj", "propertyValuePairs", "pair", "property", "_rule", "findTag", "getSVGClass", "toLowerCase", "ElementsParser", "elements", "reviver", "clipPaths", "regexUrl", "gradientDefs", "elList", "j", "id", "parse", "map", "createObject", "klass", "obj", "fromElement", "resolveGradient", "STROKE", "removeTransformMatrixForSvgParsing", "resolveClipPath", "extractPropertyDefinition", "storage", "regex", "lastIndex", "exec", "gradientDef", "opacityAttr", "Gradient", "opacity", "usingElement", "exactOwner", "clipPathElements", "objTransformInv", "invertTransform", "calcTransformMatrix", "clipPathTag", "parentElement", "clipPathOwner", "finalTransform", "parseTransformAttribute", "join", "container", "clipPathElement", "enlivedClippath", "fillRule", "clipRule", "Group", "gTransform", "multiplyTransformMatrices", "angle", "skewX", "translateX", "translateY", "qrDecompose", "flipX", "flipY", "skewY", "setPositionByOrigin", "Point", "CENTER", "isValidSvgTag", "svgValidTagNamesRegEx", "createEmptyResponse", "objects", "allElements", "async", "parseSVGDocument", "aborted", "SignalAbortedError", "documentElement", "nodelist", "skipAttributes", "useElement", "useAttributes", "attributes", "useAttrMap", "name", "xlink", "href", "referencedElement", "clonedOriginal", "originalAttributes", "originalAttrMap", "transform", "currentTrans", "el3", "entries", "setAttributeNS", "append", "childNodes", "includes", "styleRecord", "parseStyleString", "style", "mergedStyles", "entry", "replaceChild", "descendants", "localClipPaths", "elementParser", "loadSVGFromURL", "url", "reviver", "options", "arguments", "length", "Promise", "resolve", "reject", "request", "replace", "trim", "onComplete", "r", "xml", "responseXML", "signal", "then", "parsedDoc", "parseSVGDocument", "catch", "createEmptyResponse", "ACTION_NAME", "MODIFY_POLY", "createPolyPositionHandler", "pointIndex", "dim", "finalMatrix", "polyObject", "points", "pathOffset", "Point", "subtract", "transform", "multiplyTransformMatrices", "getViewportTransform", "calcTransformMatrix", "polyActionHandler", "eventData", "x", "y", "target", "poly", "mouseLocalPosition", "sendPointToPlane", "calcOwnMatrix", "add", "setDimensions", "set", "factoryPolyActionHandler", "fn", "anchorPoint", "anchorPointInParentPlane", "actionPerformed", "_objectSpread", "diff", "left", "top", "createPolyActionHandler", "wrapWithFireEvent", "calcPathPointPosition", "pathObject", "commandIndex", "path", "command", "pathPositionHandler", "this", "pathActionHandler", "movePathPoint", "anchorCommand", "fireEvent", "actionName", "commonEventInfo", "PathPointControl", "Control", "constructor", "super", "render", "ctx", "styleOverride", "fabricObject", "overrides", "cornerColor", "controlFill", "cornerStrokeColor", "controlStroke", "transparentCorners", "PathControlPointControl", "connectToCommandIndex", "connectToPointIndex", "save", "strokeStyle", "connectionDashArray", "setLineDash", "commandType", "point", "point2", "moveTo", "lineTo", "stroke", "restore", "createControl", "commandIndexPos", "pointIndexPos", "isControlPoint", "positionHandler", "actionHandler", "controlPointStyle", "pointStyle", "controls", "previousCommandType", "forEach", "concat", "arg0", "idx", "isWebGLPipelineState", "webgl", "isWebGLPipelineState", "highPsourceCode", "identityFragmentShader", "concat", "regex", "RegExp", "BaseFilter", "type", "this", "constructor", "options", "_objectWithoutProperties", "arguments", "length", "_excluded", "Object", "assign", "defaults", "getFragmentSource", "getVertexSource", "createProgram", "gl", "fragmentSource", "vertexSource", "WebGLProbe", "GLPrecision", "getEnv", "replace", "vertexShader", "createShader", "VERTEX_SHADER", "fragmentShader", "FRAGMENT_SHADER", "program", "FabricError", "shaderSource", "compileShader", "getShaderParameter", "COMPILE_STATUS", "getShaderInfoLog", "attachShader", "linkProgram", "getProgramParameter", "LINK_STATUS", "getProgramInfoLog", "uniformLocations", "getUniformLocations", "uStepW", "getUniformLocation", "uStepH", "attributeLocations", "getAttributeLocations", "aPosition", "getAttribLocation", "locations", "i", "sendAttributeData", "aPositionData", "attributeLocation", "buffer", "createBuffer", "bindBuffer", "ARRAY_BUFFER", "enableVertexAttribArray", "vertexAttribPointer", "FLOAT", "bufferData", "STATIC_DRAW", "_setupFrameBuffer", "context", "passes", "width", "destinationWidth", "height", "destinationHeight", "sourceWidth", "sourceHeight", "deleteTexture", "targetTexture", "filterBackend", "createTexture", "framebufferTexture2D", "FRAMEBUFFER", "COLOR_ATTACHMENT0", "TEXTURE_2D", "bindFramebuffer", "finish", "_swapTextures", "pass", "temp", "sourceTexture", "isNeutralState", "applyTo", "applyToWebGL", "applyTo2d", "_options", "getCacheKey", "retrieveShader", "key", "programCache", "shader", "originalTexture", "bindTexture", "useProgram", "uniform1f", "sendUniformData", "viewport", "drawArrays", "TRIANGLE_STRIP", "bindAdditionalTexture", "texture", "textureUnit", "activeTexture", "TEXTURE0", "unbindAdditionalTexture", "_gl", "_uniformLocations", "createHelpLayer", "helpLayer", "createCanvasElementFor", "toObject", "defaultKeys", "keys", "_objectSpread", "reduce", "acc", "toJSON", "_ref2", "_excluded2", "_defineProperty", "blendColorFragmentSource", "multiply", "screen", "add", "difference", "subtract", "lighten", "darken", "exclusion", "overlay", "tint", "BlendColor", "mode", "_ref", "imageData", "data", "source", "Color", "color", "getSource", "alpha", "tr", "tg", "tb", "alpha1", "r", "g", "b", "oR", "oG", "oB", "Math", "abs", "min", "max", "uniform4fv", "uColor", "classRegistry", "setClass", "mask", "BlendImage", "image", "TEXTURE1", "super", "backend", "getCachedTexture", "cacheKey", "getElement", "calculateMatrix", "scaleX", "scaleY", "left", "top", "resources", "blendImage", "createCanvasElement", "canvas1", "getContext", "clearRect", "setTransform", "drawImage", "blendData", "getImageData", "a", "ta", "matrix", "uniform1i", "uImage", "uniformMatrix3fv", "uTransformMatrix", "filterOptions", "FabricImage", "fromObject", "then", "enlivedImage", "Blur", "aspectRatio", "horizontal", "blurValue", "getBlurValue", "Uint8ClampedArray", "samples", "bytesInRow", "totalA", "minIRow", "maxIRow", "j", "percent", "distance", "floor", "weight", "sampledPixel", "localAlpha", "delta", "chooseRightDelta", "uniform2fv", "uDelta", "blur", "blurScale", "Brightness", "brightness", "round", "uBrightness", "colorMatrixDefaultValues", "colorsOnly", "ColorMatrix", "m", "constants", "uniformMatrix4fv", "uColorMatrix", "uConstants", "createColorMatrixFilter", "_Class", "newClass", "Brownie", "Vintage", "Kodachrome", "Technicolor", "Polaroid", "Sepia", "BlackWhite", "Composed", "subFilters", "forEach", "filter", "map", "some", "object", "Promise", "all", "getClass", "enlivedFilters", "Contrast", "contrast", "contrastF", "uContrast", "Convolute_3_1", "Convolute_3_0", "Convolute_5_1", "Convolute_5_0", "Convolute_7_1", "Convolute_7_0", "Convolute_9_1", "Convolute_9_0", "Convolute", "sqrt", "opaque", "weights", "side", "halfSide", "sw", "sh", "output", "ctx", "createImageData", "dst", "alphaFac", "dstOff", "scx", "scy", "srcOff", "wt", "x", "y", "cx", "cy", "uniform1fv", "uMatrix", "GAMMA", "Gamma", "gamma", "rInv", "gInv", "bInv", "rgbValues", "Uint8Array", "rgb", "pow", "uniform3fv", "uGamma", "average", "lightness", "luminosity", "Grayscale", "value", "uMode", "hueRotationDefaultValues", "rotation", "HueRotation", "rad", "PI", "cosine", "cos", "sine", "sin", "aThird", "aThirdSqtSin", "OneMinusCos", "Invert", "invert", "uInvert", "Number", "uAlpha", "Noise", "noise", "rand", "random", "uNoise", "uSeed", "Pixelate", "blocksize", "index", "_i", "_j", "uBlocksize", "RemoveColor", "lowC", "highC", "uLow", "uHigh", "useAlpha", "Resize", "uTaps", "taps", "getFilterWindow", "scale", "tempScale", "ceil", "lanczosLobes", "filterWindow", "generateShader", "getTaps", "lobeFunction", "lanczosCreate", "Array", "offsets", "offset", "join", "applyToForWebgl", "dW", "dH", "lobes", "xx", "rcpScaleX", "rcpScaleY", "oW", "oH", "newData", "resizeType", "sliceByTwo", "hermiteFastResize", "bilinearFiltering", "lanczosResize", "ImageData", "mult", "doneW", "doneH", "stepW", "stepH", "sX", "sY", "dX", "dY", "tmpCanvas", "putImageData", "srcData", "destImg", "destData", "lanczos", "ratioX", "ratioY", "rcpRatioX", "rcpRatioY", "range2X", "range2Y", "cacheLanc", "center", "icenter", "process", "u", "v", "idx", "red", "green", "blue", "fX", "fY", "c", "d", "xDiff", "yDiff", "chnl", "origPix", "w4", "pixels", "destImage", "destPixels", "ratioW", "ratioH", "ratioWHalf", "ratioHHalf", "img2", "data2", "x2", "weightsAlpha", "gxR", "gxG", "gxB", "gxA", "centerY", "yy", "dy", "centerX", "w0", "dx", "w", "Saturation", "adjust", "saturation", "uSaturation", "Vibrance", "vibrance", "avg", "amt", "uVibrance", "fn", "prototype", "fn", "i", "l", "a", "b", "descriptors", "filter", "m", "hasOwnProperty", "filter", "i", "prototype", "toString", "encode", "fn", "h", "i", "e", "isFormData", "isFileList", "transitional", "i", "filter", "w", "self", "i", "prototype", "fn", "validateStatus", "i", "fn", "e", "fn", "origin", "a", "b", "merge", "transitional", "signal", "iterator", "e", "done", "fn", "e", "res", "_", "fn", "e", "i", "s", "i", "validators", "e", "transitional", "i", "i", "c", "Axios", "AxiosError", "CanceledError", "isCancel", "CancelToken", "VERSION", "all", "isAxiosError", "spread", "toFormData", "AxiosHeaders", "HttpStatusCode", "mergeConfig", "e", "o", "c", "g"]
}
